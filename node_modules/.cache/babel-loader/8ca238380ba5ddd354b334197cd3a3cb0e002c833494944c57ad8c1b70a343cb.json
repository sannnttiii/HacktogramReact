{"ast":null,"code":"// src/css-var.ts\nfunction isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\nfunction replaceWhiteSpace(value) {\n  let replaceValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  return value.replace(/\\s+/g, replaceValue);\n}\nfunction escape(value) {\n  const valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value;\n}\nfunction addPrefix(value) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\nfunction toVarRef(name, fallback) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`;\n}\nfunction toVar(value) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return `--${addPrefix(value, prefix)}`;\n}\nfunction cssVar(name, options) {\n  const cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}\nexport { isDecimal, addPrefix, toVarRef, toVar, cssVar };","map":{"version":3,"mappings":";AAAO,SAASA,UAAUC,OAAY;EACpC,OAAO,CAACC,OAAOC,UAAUC,WAAWH,MAAMI,UAAU,CAAC;AACvD;AAEA,SAASC,kBAAkBL,OAAmC;EAAA,IAApBM,mFAAe;EACvD,OAAON,MAAMO,QAAQ,QAAQD,YAAY;AAC3C;AAEA,SAASE,OAAOR,OAAwB;EACtC,MAAMS,WAAWJ,kBAAkBL,MAAMI,UAAU;EACnD,IAAIK,SAASC,SAAS,KAAK,GAAG,OAAOV;EACrC,OAAOD,UAAUC,KAAK,IAAIS,SAASF,QAAQ,KAAK,KAAK,IAAIP;AAC3D;AAEO,SAASW,UAAUX,OAA4B;EAAA,IAAbY,6EAAS;EAChD,OAAO,CAACA,QAAQJ,OAAOR,KAAK,CAAC,EAAEa,OAAOC,OAAO,EAAEC,KAAK,GAAG;AACzD;AAEO,SAASC,SAASC,MAAcC,UAAmB;EACxD,OAAO,OAAOV,OAAOS,IAAI,CAAC,GAAGC,WAAW,KAAKA,QAAQ,KAAK,EAAE;AAC9D;AAEO,SAASC,MAAMnB,OAA4B;EAAA,IAAbY,6EAAS;EAC5C,OAAO,KAAKD,UAAUX,OAAOY,MAAM,CAAC;AACtC;AAYO,SAASQ,OAAOH,MAAcI,SAAyB;EAC5D,MAAMC,cAAcH,MAAMF,MAAMI,mCAAST,MAAM;EAC/C,OAAO;IACLW,UAAUD;IACVE,WAAWR,SAASM,aAAaG,YAAYJ,mCAASH,QAAQ,CAAC;EACjE;AACF;AAEA,SAASO,YAAYP,UAA4B;EAC/C,IAAI,OAAOA,aAAa,UAAU,OAAOA;EACzC,OAAOA,qCAAUM;AACnB","names":["isDecimal","value","Number","isInteger","parseFloat","toString","replaceWhiteSpace","replaceValue","replace","escape","valueStr","includes","addPrefix","prefix","filter","Boolean","join","toVarRef","name","fallback","toVar","cssVar","options","cssVariable","variable","reference","getFallback"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/theme-tools/src/css-var.ts"],"sourcesContent":["export function isDecimal(value: any) {\n  return !Number.isInteger(parseFloat(value.toString()))\n}\n\nfunction replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarRef(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVar(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport type CSSVar = {\n  variable: string\n  reference: string\n}\n\nexport type CSSVarOptions = {\n  fallback?: string | CSSVar\n  prefix?: string\n}\n\nexport function cssVar(name: string, options?: CSSVarOptions) {\n  const cssVariable = toVar(name, options?.prefix)\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options?.fallback)),\n  }\n}\n\nfunction getFallback(fallback?: string | CSSVar) {\n  if (typeof fallback === \"string\") return fallback\n  return fallback?.reference\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}