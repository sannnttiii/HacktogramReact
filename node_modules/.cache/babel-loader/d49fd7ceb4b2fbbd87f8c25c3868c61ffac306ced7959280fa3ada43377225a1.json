{"ast":null,"code":"'use client';\n\n// src/use-popover.ts\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useFocusOnHide, useFocusOnShow } from \"@chakra-ui/react-use-focus-effect\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nfunction usePopover() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props;\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  const anchorRef = useRef(null);\n  const triggerRef = useRef(null);\n  const popoverRef = useRef(null);\n  const isHoveringRef = useRef(false);\n  const hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  const [hasHeader, setHasHeader] = useState(false);\n  const [hasBody, setHasBody] = useState(false);\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const [triggerId, popoverId, headerId, bodyId] = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(id2 => `${id2}-${uid}`);\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount\n  });\n  const animated = useAnimationState({\n    isOpen,\n    ref: popoverRef\n  });\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  const getPopoverProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const popoverProps = {\n      ...props2,\n      style: {\n        ...props2.style,\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n        [popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      },\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props2.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const targetIsPopover = contains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        const isValidBlur = !targetIsPopover && !targetIsTrigger;\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    };\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, event => {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n        isHoveringRef.current = false;\n        setTimeout(() => onClose(), closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  const getPopoverPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({\n      ...props2,\n      style: {\n        visibility: isOpen ? \"visible\" : \"hidden\",\n        ...props2.style\n      }\n    }, forwardedRef);\n  }, [isOpen, getPopperProps]);\n  const getAnchorProps = useCallback(function (props2) {\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      // If anchor is rendered, it is used as reference.\n      ref: mergeRefs(_ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  const openTimeout = useRef();\n  const closeTimeout = useRef();\n  const maybeReferenceRef = useCallback(node => {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const triggerProps = {\n      ...props2,\n      ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    };\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);\n    }\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = callAllHandlers(props2.onFocus, () => {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const isValidBlur = !contains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(() => onOpen(), openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  const getHeaderProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      id: headerId,\n      ref: mergeRefs(ref, node => {\n        setHasHeader(!!node);\n      })\n    };\n  }, [headerId]);\n  const getBodyProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      id: bodyId,\n      ref: mergeRefs(ref, node => {\n        setHasBody(!!node);\n      })\n    };\n  }, [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\nfunction getRelatedTarget(event) {\n  var _a;\n  const activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\nexport { usePopover };","map":{"version":3,"mappings":";;;AAAA,SAASA,yBAAyB;AAClC,SAASC,6BAA6B;AACtC,SACEC,gBACAC,sBACK;AACP,SAASC,qBAAqB;AAC9B,SAASC,eAAeC,iBAAiC;AAEzD,SAASC,iBAAiB;AAC1B,SAASC,uBAAuB;AAChC,SAASC,sBAAgC;AACzC,SAASC,aAAaC,WAAWC,OAAOC,QAAQC,gBAAgB;AAEhE,IAAMC,UAAU;EACdC,OAAO;EACPC,OAAO;AACT;AAuHO,SAASC,aAAwC;EAAA,IAA7BC,4EAAyB,CAAC;EACnD,MAAM;IACJC,cAAc;IACdC,aAAa;IACbC;IACAC;IACAC,qBAAqB;IACrBC,YAAY;IACZC;IACAC;IACAC,UAAUb,QAAQC;IAClBa,YAAY;IACZC,aAAa;IACbC;IACAC,eAAe;IACfC;IACA,GAAGC;EACL,IAAIf;EAEJ,MAAM;IAAEgB;IAAQC;IAASC;IAAQC;EAAS,IAAIlC,cAAce,KAAK;EAEjE,MAAMoB,YAAY1B,OAAoB,IAAI;EAC1C,MAAM2B,aAAa3B,OAAoB,IAAI;EAC3C,MAAM4B,aAAa5B,OAAoB,IAAI;EAE3C,MAAM6B,gBAAgB7B,OAAO,KAAK;EAElC,MAAM8B,gBAAgB9B,OAAO,KAAK;EAClC,IAAIsB,QAAQ;IACVQ,cAAcC,UAAU;EAC1B;EAEA,MAAM,CAACC,WAAWC,YAAY,IAAIhC,SAAS,KAAK;EAChD,MAAM,CAACiC,SAASC,UAAU,IAAIlC,SAAS,KAAK;EAE5C,MAAMmC,OAAOrC,OAAM;EACnB,MAAMsC,MAAM3B,kBAAM0B;EAClB,MAAM,CAACE,WAAWC,WAAWC,UAAUC,MAAM,IAAI,CAC/C,mBACA,mBACA,kBACA,eACF,CAAEC,IAAKhC,OAAO,GAAGA,GAAE,IAAI2B,GAAG,EAAE;EAE5B,MAAM;IACJM;IACAC;IACAC;IACAC;IACAC;EACF,IAAItD,UAAU;IACZ,GAAG4B;IACH2B,SAAS1B,UAAU,CAAC,CAACF;EACvB,CAAC;EAED,MAAM6B,WAAW9D,kBAAkB;IAAEmC;IAAQ4B,KAAKtB;EAAW,CAAC;EAE9DxC,sBAAsB;IACpB4D,SAAS1B;IACT4B,KAAKvB;EACP,CAAC;EAEDtC,eAAeuC,YAAY;IACzBuB,UAAUxB;IACVyB,SAAS9B;IACT+B,aAAa1C,sBAAsBI,YAAYb,QAAQC;EACzD,CAAC;EAEDb,eAAesC,YAAY;IACzBuB,UAAU1C;IACV2C,SAAS9B;IACT+B,aAAazC,aAAaG,YAAYb,QAAQC;EAChD,CAAC;EAED,MAAMmD,uBAAuB1D,eAAe;IAC1C2D,aAAazB,cAAcC;IAC3BiB,SAAS9B;IACTsC,MAAMrC;IACNsC,YAAYR,SAASS;EACvB,CAAC;EAED,MAAMC,kBAA8B9D,YAClC,YAA6B;IAAA,IAA5BS,6EAAQ,CAAC;IAAA,IAAGsD,2EAAO;IAClB,MAAMC,eAA8B;MAClC,GAAGvD;MACHwD,OAAO;QACL,GAAGxD,OAAMwD;QACTC,iBAAiBvE,cAAcuE,gBAAgBC;QAC/C,CAACxE,cAAcqB,UAAUoD,GAAG,GAAGpD,YAC3B,GAAGA,SAAS,OACZ;QACJ,CAACrB,cAAcsB,iBAAiBmD,GAAG,GAAGnD;MACxC;MACAoC,KAAKxD,UAAUkC,YAAYgC,IAAI;MAC/BM,UAAUZ,uBAAuBhD,OAAM4D,WAAW;MAClDxD,IAAI6B;MACJ4B,UAAU;MACVC,MAAM;MACNC,WAAW1E,gBAAgBW,OAAM+D,WAAYC,SAAU;QACrD,IAAI9D,cAAc8D,MAAMC,QAAQ,UAAU;UACxChD,SAAQ;QACV;MACF,CAAC;MACDiD,QAAQ7E,gBAAgBW,OAAMkE,QAASF,SAAU;QAC/C,MAAMG,gBAAgBC,iBAAiBJ,KAAK;QAC5C,MAAMK,kBAAkBC,SAAShD,WAAWG,SAAS0C,aAAa;QAClE,MAAMI,kBAAkBD,SAASjD,WAAWI,SAAS0C,aAAa;QAElE,MAAMK,cAAc,CAACH,mBAAmB,CAACE;QAEzC,IAAIvD,UAAUf,eAAeuE,aAAa;UACxCvD,SAAQ;QACV;MACF,CAAC;MACD,mBAAmBS,YAAYQ,WAAW;MAC1C,oBAAoBN,UAAUO,SAAS;IACzC;IAEA,IAAI1B,YAAYb,QAAQE,OAAO;MAC7ByD,aAAaO,OAAO;MACpBP,aAAakB,eAAepF,gBAAgBW,OAAMyE,cAAc,MAAM;QACpElD,cAAcE,UAAU;MAC1B,CAAC;MACD8B,aAAamB,eAAerF,gBAC1BW,OAAM0E,cACLV,SAAU;QAET,IAAIA,MAAMW,YAAYR,kBAAkB,MAAM;UAC5C;QACF;QACA5C,cAAcE,UAAU;QACxBmD,WAAW,MAAM3D,SAAQ,EAAGN,UAAU;MACxC,EACF;IACF;IAEA,OAAO4C;EACT,GACA,CACEP,sBACAf,WACAP,WACAQ,UACAN,SACAO,QACA1B,SACAP,YACAe,SACAD,QACAf,aACAU,YACAH,kBACAD,UACF,CACF;EAEA,MAAMsE,4BAAwCtF,YAC5C;IAAA,IAACS,6EAAQ,CAAC;IAAA,IAAG8E,mFAAe;IAAA,OAC1BvC,eACE;MACE,GAAGvC;MACHwD,OAAO;QACLuB,YAAY/D,SAAS,YAAY;QACjC,GAAGhB,OAAMwD;MACX;IACF,GACAsB,aACF;EAAA,GACF,CAAC9D,QAAQuB,cAAc,EACzB;EAEA,MAAMyC,iBAA6BzF,YACjC,UAACS,QAAuB;IAAA,IAAhBsD,2EAAO;IACb,OAAO;MACL,GAAGtD;MAAA;MAEH4C,KAAKxD,UAAUkE,MAAMlC,WAAWiB,YAAY;IAC9C;EACF,GACA,CAACjB,WAAWiB,YAAY,EAC1B;EAEA,MAAM4C,cAAcvF,QAAe;EACnC,MAAMwF,eAAexF,QAAe;EAEpC,MAAMyF,oBAAoB5F,YACvB6F,QAAkB;IAEjB,IAAIhE,UAAUK,WAAW,MAAM;MAC7BY,aAAa+C,IAAI;IACnB;EACF,GACA,CAAC/C,YAAY,EACf;EAEA,MAAMgD,kBAA8B9F,YAClC,YAA6B;IAAA,IAA5BS,6EAAQ,CAAC;IAAA,IAAGsD,2EAAO;IAClB,MAAMgC,eAA8B;MAClC,GAAGtF;MACH4C,KAAKxD,UAAUiC,YAAYiC,MAAM6B,iBAAiB;MAClD/E,IAAI4B;MACJ,iBAAiB;MACjB,iBAAiBhB;MACjB,iBAAiBiB;IACnB;IAEA,IAAIxB,YAAYb,QAAQC,OAAO;MAC7ByF,aAAaC,UAAUlG,gBAAgBW,OAAMuF,SAASpE,QAAQ;IAChE;IAEA,IAAIV,YAAYb,QAAQE,OAAO;MAO7BwF,aAAaE,UAAUnG,gBAAgBW,OAAMwF,SAAS,MAAM;QAE1D,IAAIP,YAAYxD,YAAY,QAAW;UACrCP,QAAO;QACT;MACF,CAAC;MACDoE,aAAapB,SAAS7E,gBAAgBW,OAAMkE,QAASF,SAAU;QAC7D,MAAMG,gBAAgBC,iBAAiBJ,KAAK;QAC5C,MAAMQ,cAAc,CAACF,SAAShD,WAAWG,SAAS0C,aAAa;QAE/D,IAAInD,UAAUf,eAAeuE,aAAa;UACxCvD,SAAQ;QACV;MACF,CAAC;MAMDqE,aAAavB,YAAY1E,gBAAgBW,OAAM+D,WAAYC,SAAU;QACnE,IAAIA,MAAMC,QAAQ,UAAU;UAC1BhD,SAAQ;QACV;MACF,CAAC;MAEDqE,aAAab,eAAepF,gBAAgBW,OAAMyE,cAAc,MAAM;QACpElD,cAAcE,UAAU;QACxBwD,YAAYxD,UAAUgE,OAAOb,WAAW,MAAM1D,QAAO,EAAGR,SAAS;MACnE,CAAC;MAED4E,aAAaZ,eAAerF,gBAAgBW,OAAM0E,cAAc,MAAM;QACpEnD,cAAcE,UAAU;QAExB,IAAIwD,YAAYxD,SAAS;UACvBiE,aAAaT,YAAYxD,OAAO;UAChCwD,YAAYxD,UAAU;QACxB;QAEAyD,aAAazD,UAAUgE,OAAOb,WAAW,MAAM;UAC7C,IAAIrD,cAAcE,YAAY,OAAO;YACnCR,SAAQ;UACV;QACF,GAAGN,UAAU;MACf,CAAC;IACH;IAEA,OAAO2E;EACT,GACA,CACEtD,WACAhB,QACAiB,WACAxB,SACA0E,mBACAhE,UACAD,QACAjB,aACAgB,SACAP,WACAC,WACF,CACF;EAEAnB,UAAU,MAAM;IACd,OAAO,MAAM;MACX,IAAIyF,YAAYxD,SAAS;QACvBiE,aAAaT,YAAYxD,OAAO;MAClC;MACA,IAAIyD,aAAazD,SAAS;QACxBiE,aAAaR,aAAazD,OAAO;MACnC;IACF;EACF,GAAG,EAAE;EAEL,MAAMkE,iBAA6BpG,YACjC;IAAA,IAACS,6EAAQ,CAAC;IAAA,IAAG4C,0EAAM;IAAA,OAAU;MAC3B,GAAG5C;MACHI,IAAI8B;MACJU,KAAKxD,UAAUwD,KAAMwC,QAA6B;QAChDzD,aAAa,CAAC,CAACyD,IAAI;MACrB,CAAC;IACH;EAAA,GACA,CAAClD,QAAQ,EACX;EAEA,MAAM0D,eAA2BrG,YAC/B;IAAA,IAACS,6EAAQ,CAAC;IAAA,IAAG4C,0EAAM;IAAA,OAAU;MAC3B,GAAG5C;MACHI,IAAI+B;MACJS,KAAKxD,UAAUwD,KAAMwC,QAAS;QAC5BvD,WAAW,CAAC,CAACuD,IAAI;MACnB,CAAC;IACH;EAAA,GACA,CAACjD,MAAM,EACT;EAEA,OAAO;IACLM;IACAzB;IACA6E,qBAAqBlD,SAASmD;IAC9B7E;IACA+D;IACA1C;IACAE;IACAqC;IACAxB;IACAgC;IACAM;IACAC;EACF;AACF;AAIA,SAAStB,SAASyB,QAA4BC,OAA2B;EACvE,OAAOD,WAAWC,UAASD,iCAAQzB,SAAS0B;AAC9C;AAEA,SAAS5B,iBAAiBJ,OAAyB;EAvdnD;EAwdE,MAAMiC,WAAWjC,MAAMkC,cAAcC,cAAcC;EACnD,QAAQC,WAAMlC,kBAAN,YAAuB8B;AACjC","names":["useAnimationState","useFocusOnPointerDown","useFocusOnHide","useFocusOnShow","useDisclosure","popperCSSVars","usePopper","mergeRefs","callAllHandlers","lazyDisclosure","useCallback","useEffect","useId","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","computePositionOnMount","popperProps","isOpen","onClose","onOpen","onToggle","anchorRef","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","hasBody","setHasBody","uuid","uid","triggerId","popoverId","headerId","bodyId","map","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","enabled","animated","ref","focusRef","visible","shouldFocus","shouldRenderChildren","wasSelected","mode","isSelected","present","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","var","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","getRelatedTarget","targetIsPopover","contains","targetIsTrigger","isValidBlur","onMouseEnter","onMouseLeave","nativeEvent","setTimeout","getPopoverPositionerProps","forwardedRef","visibility","getAnchorProps","openTimeout","closeTimeout","maybeReferenceRef","node","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","getBodyProps","onAnimationComplete","onComplete","parent","child","activeEl","currentTarget","ownerDocument","activeElement","_a"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/popover/src/use-popover.ts"],"sourcesContent":["import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note 🚨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}