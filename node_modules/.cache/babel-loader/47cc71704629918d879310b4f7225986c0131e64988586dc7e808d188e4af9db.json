{"ast":null,"code":"'use client';\n\nimport { Circle } from \"./chunk-7CG3L4JY.mjs\";\nimport { Shape } from \"./chunk-EMKK5VRD.mjs\";\nimport { getProgressProps, spin } from \"./chunk-TXZFUZNG.mjs\";\n\n// src/circular-progress.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar CircularProgress = forwardRef((props, ref) => {\n  var _a;\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props;\n  const progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate\n  });\n  const determinant = isIndeterminate ? void 0 : ((_a = progress.percent) != null ? _a : 0) * 2.64;\n  const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;\n  const indicatorProps = isIndeterminate ? {\n    css: {\n      animation: `${spin} 1.5s linear infinite`\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  const rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /* @__PURE__ */jsxs(chakra.div, {\n    ref,\n    className: \"chakra-progress\",\n    ...progress.bind,\n    ...rest,\n    __css: rootStyles,\n    children: [/* @__PURE__ */jsxs(Shape, {\n      size,\n      isIndeterminate,\n      children: [/* @__PURE__ */jsx(Circle, {\n        stroke: trackColor,\n        strokeWidth: thickness,\n        className: \"chakra-progress__track\"\n      }), /* @__PURE__ */jsx(Circle, {\n        stroke: color,\n        strokeWidth: thickness,\n        className: \"chakra-progress__indicator\",\n        strokeLinecap: capIsRound ? \"round\" : void 0,\n        opacity: progress.value === 0 && !isIndeterminate ? 0 : void 0,\n        ...indicatorProps\n      })]\n    }), children]\n  });\n});\nCircularProgress.displayName = \"CircularProgress\";\nexport { CircularProgress };","map":{"version":3,"mappings":";;;;;;;AAAA,SACEA,QAGAC,kBACK;AA0IC,SACEC,KADFC;AA7DD,IAAMC,mBAAmBH,WAC9B,CAACI,OAAOC,QAAQ;EAnFlB;EAoFI,MAAM;IACJC,OAAO;IACPC,MAAM;IACNC,MAAM;IACNC;IACAC;IACAC;IACAC;IACAC;IACAC,YAAY;IACZC,QAAQ;IACRC,aAAa;IACbC;IACA,GAAGC;EACL,IAAId;EAEJ,MAAMe,WAAWC,iBAAiB;IAChCZ;IACAD;IACAI;IACAF;IACAC;IACAO;EACF,CAAC;EAED,MAAMI,cAAcJ,kBAChB,WACCK,cAASC,YAAT,YAAoB,KAAK;EAE9B,MAAMC,kBACJH,eAAe,OAAO,SAAY,GAAGA,eAAe,MAAMA;EAE5D,MAAMI,iBAAiBR,kBACnB;IACES,KAAK;MAAEC,WAAW,GAAGC;IAA4B;EACnD,IACA;IACEC,kBAAkB;IAClBL;IACAM,oBAAoB;IACpBC,oBAAoB;IACpBC,0BAA0B;EAC5B;EAEJ,MAAMC,aAAgC;IACpCC,SAAS;IACTC,UAAU;IACVC,eAAe;IACfC,UAAU/B;EACZ;EAEA,OACE,oBAACP,OAAOuC,KAAP;IACCjC;IACAkC,WAAU;IACT,GAAGpB,SAASqB;IACZ,GAAGtB;IACJuB,OAAOR;IAEPpB,+BAAC6B;MAAMpC;MAAYW;MACjBJ,8BAAC8B;QACCC,QAAQ5B;QACR6B,aAAa/B;QACbyB,WAAU;MAAA,EACZ,EACA,mBAACI;QACCC,QAAQ7B;QACR8B,aAAa/B;QACbyB,WAAU;QACVO,eAAelC,aAAa,UAAU;QAKtCmC,SAAS5B,SAASR,UAAU,KAAK,CAACM,kBAAkB,IAAI;QACvD,GAAGQ;MAAA,EACN;IAAA,CACF,GACCZ;EAAA,EACH;AAEJ,EACF;AAEAV,iBAAiB6C,cAAc","names":["chakra","forwardRef","jsx","jsxs","CircularProgress","props","ref","size","max","min","valueText","getValueText","value","capIsRound","children","thickness","color","trackColor","isIndeterminate","rest","progress","getProgressProps","determinant","_a","percent","strokeDasharray","indicatorProps","css","animation","spin","strokeDashoffset","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","display","position","verticalAlign","fontSize","div","className","bind","__css","Shape","Circle","stroke","strokeWidth","strokeLinecap","opacity","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/progress/src/circular-progress.tsx"],"sourcesContent":["import {\n  chakra,\n  SystemStyleObject,\n  HTMLChakraProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\n\nimport { getProgressProps, spin } from \"./progress.utils\"\nimport { Shape } from \"./shape\"\nimport { Circle } from \"./circle\"\n\ninterface CircularProgressOptions {\n  /**\n   * The size of the circular progress in CSS units\n   */\n  size?: string | number\n  /**\n   * Maximum value defining 100% progress made (must be higher than 'min')\n   * @default 100\n   */\n  max?: number\n  /**\n   * Minimum value defining 'no progress' (must be lower than 'max')\n   * @default 0\n   */\n  min?: number\n  /**\n   * This defines the stroke width of the svg circle.\n   * @default \"10px\"\n   */\n  thickness?: string | number\n  /**\n   * Current progress (must be between min/max)\n   */\n  value?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   *\n   * @default false\n   */\n  capIsRound?: boolean\n  /**\n   * The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar.\n   */\n  children?: React.ReactNode\n  /**\n   * The color name of the progress track. Use a color key in the theme object\n   */\n  trackColor?: string\n  /**\n   * The color of the progress indicator. Use a color key in the theme object\n   */\n  color?: string\n  /**\n   * The desired valueText to use in place of the value\n   */\n  valueText?: string\n  /**\n   * A function that returns the desired valueText to use in place of the value\n   */\n  getValueText?(value: number, percent: number): string\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface CircularProgressProps\n  extends Omit<HTMLChakraProps<\"div\">, \"color\">,\n    CircularProgressOptions {}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nexport const CircularProgress = forwardRef<CircularProgressProps, \"div\">(\n  (props, ref) => {\n    const {\n      size = \"48px\",\n      max = 100,\n      min = 0,\n      valueText,\n      getValueText,\n      value,\n      capIsRound,\n      children,\n      thickness = \"10px\",\n      color = \"#0078d4\",\n      trackColor = \"#edebe9\",\n      isIndeterminate,\n      ...rest\n    } = props\n\n    const progress = getProgressProps({\n      min,\n      max,\n      value,\n      valueText,\n      getValueText,\n      isIndeterminate,\n    })\n\n    const determinant = isIndeterminate\n      ? undefined\n      : (progress.percent ?? 0) * 2.64\n\n    const strokeDasharray =\n      determinant == null ? undefined : `${determinant} ${264 - determinant}`\n\n    const indicatorProps = isIndeterminate\n      ? {\n          css: { animation: `${spin} 1.5s linear infinite` },\n        }\n      : {\n          strokeDashoffset: 66,\n          strokeDasharray,\n          transitionProperty: \"stroke-dasharray, stroke\",\n          transitionDuration: \"0.6s\",\n          transitionTimingFunction: \"ease\",\n        }\n\n    const rootStyles: SystemStyleObject = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        className=\"chakra-progress\"\n        {...progress.bind}\n        {...rest}\n        __css={rootStyles}\n      >\n        <Shape size={size} isIndeterminate={isIndeterminate}>\n          <Circle\n            stroke={trackColor}\n            strokeWidth={thickness}\n            className=\"chakra-progress__track\"\n          />\n          <Circle\n            stroke={color}\n            strokeWidth={thickness}\n            className=\"chakra-progress__indicator\"\n            strokeLinecap={capIsRound ? \"round\" : undefined}\n            /**\n             * fix issue in Safari where indicator still shows when value is 0\n             * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n             */\n            opacity={progress.value === 0 && !isIndeterminate ? 0 : undefined}\n            {...indicatorProps}\n          />\n        </Shape>\n        {children}\n      </chakra.div>\n    )\n  },\n)\n\nCircularProgress.displayName = \"CircularProgress\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}