{"ast":null,"code":"'use client';\n\nimport { ariaAttr, callAllHandlers, dataAttr } from \"./chunk-DX64QB22.mjs\";\nimport { getIds, getIsReversed, getStyles, orient } from \"./chunk-E23N4XEN.mjs\";\n\n// src/use-range-slider.ts\nimport { usePanEvent } from \"@chakra-ui/react-use-pan-event\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { percentToValue, roundValueToStep, valueToPercent, clampValue } from \"@chakra-ui/number-utils\";\nimport { useCallback, useMemo, useRef, useState, useId } from \"react\";\nimport { useSizes } from \"@chakra-ui/react-use-size\";\nfunction useRangeSlider(props) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    minStepsBetweenThumbs = 0,\n    ...htmlProps\n  } = props;\n  const onChangeStart = useCallbackRef(onChangeStartProp);\n  const onChangeEnd = useCallbackRef(onChangeEndProp);\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation\n  });\n  const [valueState, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue != null ? defaultValue : [25, 75],\n    onChange\n  });\n  if (!Array.isArray(valueState)) {\n    throw new TypeError(`[range-slider] You passed an invalid value for \\`value\\` or \\`defaultValue\\`, expected \\`Array\\` but got \\`${typeof valueState}\\``);\n  }\n  const [isDragging, setDragging] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const isInteractive = !(isDisabled || isReadOnly);\n  const initialValue = useRef(valueState);\n  const value = valueState.map(val => clampValue(val, min, max));\n  const spacing = minStepsBetweenThumbs * step;\n  const valueBounds = getValueBounds(value, min, max, spacing);\n  const stateRef = useRef({\n    eventSource: null,\n    value: [],\n    valueBounds: []\n  });\n  stateRef.current.value = value;\n  stateRef.current.valueBounds = valueBounds;\n  const reversedValue = value.map(val => max - val + min);\n  const thumbValues = isReversed ? reversedValue : value;\n  const thumbPercents = thumbValues.map(val => valueToPercent(val, min, max));\n  const isVertical = orientation === \"vertical\";\n  const trackRef = useRef(null);\n  const rootRef = useRef(null);\n  const thumbRects = useSizes({\n    getNodes() {\n      const rootNode = rootRef.current;\n      const thumbNodes = rootNode == null ? void 0 : rootNode.querySelectorAll(\"[role=slider]\");\n      return thumbNodes ? Array.from(thumbNodes) : [];\n    }\n  });\n  const reactId = useId();\n  const uuid = idProp != null ? idProp : reactId;\n  const ids = getIds(uuid);\n  const getValueFromPointer = useCallback(event => {\n    var _a, _b;\n    if (!trackRef.current) return;\n    stateRef.current.eventSource = \"pointer\";\n    const rect = trackRef.current.getBoundingClientRect();\n    const {\n      clientX,\n      clientY\n    } = (_b = (_a = event.touches) == null ? void 0 : _a[0]) != null ? _b : event;\n    const diff = isVertical ? rect.bottom - clientY : clientX - rect.left;\n    const length = isVertical ? rect.height : rect.width;\n    let percent = diff / length;\n    if (isReversed) percent = 1 - percent;\n    return percentToValue(percent, min, max);\n  }, [isVertical, isReversed, max, min]);\n  const tenSteps = (max - min) / 10;\n  const oneStep = step || (max - min) / 100;\n  const actions = useMemo(() => ({\n    setValueAtIndex(index, val) {\n      if (!isInteractive) return;\n      const bounds = stateRef.current.valueBounds[index];\n      val = parseFloat(roundValueToStep(val, bounds.min, oneStep));\n      val = clampValue(val, bounds.min, bounds.max);\n      const next = [...stateRef.current.value];\n      next[index] = val;\n      setValue(next);\n    },\n    setActiveIndex,\n    stepUp(index) {\n      let step2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : oneStep;\n      const valueAtIndex = stateRef.current.value[index];\n      const next = isReversed ? valueAtIndex - step2 : valueAtIndex + step2;\n      actions.setValueAtIndex(index, next);\n    },\n    stepDown(index) {\n      let step2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : oneStep;\n      const valueAtIndex = stateRef.current.value[index];\n      const next = isReversed ? valueAtIndex + step2 : valueAtIndex - step2;\n      actions.setValueAtIndex(index, next);\n    },\n    reset() {\n      setValue(initialValue.current);\n    }\n  }), [oneStep, isReversed, setValue, isInteractive]);\n  const onKeyDown = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      ArrowRight: () => actions.stepUp(activeIndex),\n      ArrowUp: () => actions.stepUp(activeIndex),\n      ArrowLeft: () => actions.stepDown(activeIndex),\n      ArrowDown: () => actions.stepDown(activeIndex),\n      PageUp: () => actions.stepUp(activeIndex, tenSteps),\n      PageDown: () => actions.stepDown(activeIndex, tenSteps),\n      Home: () => {\n        const {\n          min: value2\n        } = valueBounds[activeIndex];\n        actions.setValueAtIndex(activeIndex, value2);\n      },\n      End: () => {\n        const {\n          max: value2\n        } = valueBounds[activeIndex];\n        actions.setValueAtIndex(activeIndex, value2);\n      }\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      stateRef.current.eventSource = \"keyboard\";\n    }\n  }, [actions, activeIndex, tenSteps, valueBounds]);\n  const {\n    getThumbStyle,\n    rootStyle,\n    trackStyle,\n    innerTrackStyle\n  } = useMemo(() => getStyles({\n    isReversed,\n    orientation,\n    thumbRects,\n    thumbPercents\n  }), [isReversed, orientation, thumbPercents, thumbRects]);\n  const focusThumb = useCallback(index => {\n    var _a;\n    const idx = index != null ? index : activeIndex;\n    if (idx !== -1 && focusThumbOnChange) {\n      const id = ids.getThumb(idx);\n      const thumb = (_a = rootRef.current) == null ? void 0 : _a.ownerDocument.getElementById(id);\n      if (thumb) {\n        setTimeout(() => thumb.focus());\n      }\n    }\n  }, [focusThumbOnChange, activeIndex, ids]);\n  useUpdateEffect(() => {\n    if (stateRef.current.eventSource === \"keyboard\") {\n      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);\n    }\n  }, [value, onChangeEnd]);\n  const onPanSessionStart = event => {\n    const pointValue = getValueFromPointer(event) || 0;\n    const distances = stateRef.current.value.map(val => Math.abs(val - pointValue));\n    const closest = Math.min(...distances);\n    let index = distances.indexOf(closest);\n    const thumbsAtPosition = distances.filter(distance => distance === closest);\n    const isThumbStacked = thumbsAtPosition.length > 1;\n    if (isThumbStacked && pointValue > stateRef.current.value[index]) {\n      index = index + thumbsAtPosition.length - 1;\n    }\n    setActiveIndex(index);\n    actions.setValueAtIndex(index, pointValue);\n    focusThumb(index);\n  };\n  const onPan = event => {\n    if (activeIndex == -1) return;\n    const pointValue = getValueFromPointer(event) || 0;\n    setActiveIndex(activeIndex);\n    actions.setValueAtIndex(activeIndex, pointValue);\n    focusThumb(activeIndex);\n  };\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return;\n      setDragging(true);\n      onPanSessionStart(event);\n      onChangeStart == null ? void 0 : onChangeStart(stateRef.current.value);\n    },\n    onPanSessionEnd() {\n      if (!isInteractive) return;\n      setDragging(false);\n      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);\n    },\n    onPan(event) {\n      if (!isInteractive) return;\n      onPan(event);\n    }\n  });\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ...htmlProps,\n      id: ids.root,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: {\n        ...props2.style,\n        ...rootStyle\n      }\n    };\n  }, [htmlProps, isDisabled, isFocused, rootStyle, ids]);\n  const getTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, trackRef),\n      id: ids.track,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: {\n        ...props2.style,\n        ...trackStyle\n      }\n    };\n  }, [isDisabled, trackStyle, ids]);\n  const getInnerTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      id: ids.innerTrack,\n      style: {\n        ...props2.style,\n        ...innerTrackStyle\n      }\n    };\n  }, [innerTrackStyle, ids]);\n  const getThumbProps = useCallback(function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var _a;\n    const {\n      index,\n      ...rest\n    } = props2;\n    const valueAtIndex = value[index];\n    if (valueAtIndex == null) {\n      throw new TypeError(`[range-slider > thumb] Cannot find value at index \\`${index}\\`. The \\`value\\` or \\`defaultValue\\` length is : ${value.length}`);\n    }\n    const bounds = valueBounds[index];\n    return {\n      ...rest,\n      ref,\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : void 0,\n      id: ids.getThumb(index),\n      \"data-active\": dataAttr(isDragging && activeIndex === index),\n      \"aria-valuetext\": (_a = getAriaValueText == null ? void 0 : getAriaValueText(valueAtIndex)) != null ? _a : ariaValueText == null ? void 0 : ariaValueText[index],\n      \"aria-valuemin\": bounds.min,\n      \"aria-valuemax\": bounds.max,\n      \"aria-valuenow\": valueAtIndex,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel == null ? void 0 : ariaLabel[index],\n      \"aria-labelledby\": (ariaLabel == null ? void 0 : ariaLabel[index]) ? void 0 : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index],\n      style: {\n        ...props2.style,\n        ...getThumbStyle(index)\n      },\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, () => {\n        setFocused(true);\n        setActiveIndex(index);\n      }),\n      onBlur: callAllHandlers(props2.onBlur, () => {\n        setFocused(false);\n        setActiveIndex(-1);\n      })\n    };\n  }, [ids, value, valueBounds, isInteractive, isDragging, activeIndex, getAriaValueText, ariaValueText, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown, setFocused]);\n  const getOutputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      id: ids.output,\n      htmlFor: value.map((v, i) => ids.getThumb(i)).join(\" \"),\n      \"aria-live\": \"off\"\n    };\n  }, [ids, value]);\n  const getMarkerProps = useCallback(function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const {\n      value: v,\n      ...rest\n    } = props2;\n    const isInRange = !(v < min || v > max);\n    const isHighlighted = v >= value[0] && v <= value[value.length - 1];\n    let percent = valueToPercent(v, min, max);\n    percent = isReversed ? 100 - percent : percent;\n    const markerStyle = {\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      ...orient({\n        orientation,\n        vertical: {\n          bottom: `${percent}%`\n        },\n        horizontal: {\n          left: `${percent}%`\n        }\n      })\n    };\n    return {\n      ...rest,\n      ref,\n      id: ids.getMarker(props2.value),\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: {\n        ...props2.style,\n        ...markerStyle\n      }\n    };\n  }, [isDisabled, isReversed, max, min, orientation, value, ids]);\n  const getInputProps = useCallback(function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const {\n      index,\n      ...rest\n    } = props2;\n    return {\n      ...rest,\n      ref,\n      id: ids.getInput(index),\n      type: \"hidden\",\n      value: value[index],\n      name: Array.isArray(name) ? name[index] : `${name}-${index}`\n    };\n  }, [name, value, ids]);\n  const state = {\n    value,\n    isFocused,\n    isDragging,\n    getThumbPercent: index => thumbPercents[index],\n    getThumbMinValue: index => valueBounds[index].min,\n    getThumbMaxValue: index => valueBounds[index].max\n  };\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n    getOutputProps\n  };\n}\nfunction getValueBounds(arr, min, max, spacing) {\n  return arr.map((v, i) => {\n    const _min = i === 0 ? min : arr[i - 1] + spacing;\n    const _max = i === arr.length - 1 ? max : arr[i + 1] - spacing;\n    return {\n      min: _min,\n      max: _max\n    };\n  });\n}\nexport { useRangeSlider };","map":{"version":3,"mappings":"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","names":["usePanEvent","useControllableState","useCallbackRef","useUpdateEffect","mergeRefs","percentToValue","roundValueToStep","valueToPercent","clampValue","useCallback","useMemo","useRef","useState","useId","useSizes","useRangeSlider","props","min","max","onChange","value","valueProp","defaultValue","isReversed","isReversedProp","direction","orientation","id","idProp","isDisabled","isReadOnly","onChangeStart","onChangeStartProp","onChangeEnd","onChangeEndProp","step","getAriaValueText","getAriaValueTextProp","ariaValueText","ariaLabel","ariaLabelledBy","name","focusThumbOnChange","minStepsBetweenThumbs","htmlProps","getIsReversed","valueState","setValue","Array","isArray","TypeError","isDragging","setDragging","isFocused","setFocused","activeIndex","setActiveIndex","isInteractive","initialValue","map","val","spacing","valueBounds","getValueBounds","stateRef","eventSource","current","reversedValue","thumbValues","thumbPercents","isVertical","trackRef","rootRef","thumbRects","getNodes","rootNode","thumbNodes","querySelectorAll","from","reactId","uuid","ids","getIds","getValueFromPointer","event","rect","getBoundingClientRect","clientX","clientY","_b","touches","diff","bottom","left","length","height","width","percent","tenSteps","oneStep","actions","setValueAtIndex","index","bounds","parseFloat","next","stepUp","valueAtIndex","stepDown","reset","onKeyDown","eventKey","key","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","preventDefault","stopPropagation","getThumbStyle","rootStyle","trackStyle","innerTrackStyle","getStyles","focusThumb","idx","getThumb","thumb","_a","ownerDocument","getElementById","setTimeout","focus","onPanSessionStart","pointValue","distances","Math","abs","closest","indexOf","thumbsAtPosition","filter","distance","isThumbStacked","onPan","onPanSessionEnd","getRootProps","ref","root","tabIndex","ariaAttr","dataAttr","style","getTrackProps","track","getInnerTrackProps","innerTrack","getThumbProps","rest","role","callAllHandlers","onFocus","onBlur","getOutputProps","output","htmlFor","v","i","join","getMarkerProps","isInRange","isHighlighted","markerStyle","position","pointerEvents","orient","vertical","horizontal","getMarker","getInputProps","getInput","type","state","getThumbPercent","getThumbMinValue","getThumbMaxValue","arr","_min","_max"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/slider/src/use-range-slider.ts"],"sourcesContent":["import { usePanEvent } from \"@chakra-ui/react-use-pan-event\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport type { PropGetter, RequiredPropGetter } from \"@chakra-ui/react-types\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/utils\"\nimport {\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n  clampValue,\n} from \"@chakra-ui/number-utils\"\nimport { useCallback, useMemo, useRef, useState, useId } from \"react\"\nimport { getIds, getIsReversed, getStyles, orient } from \"./slider-utils\"\nimport { useSizes } from \"@chakra-ui/react-use-size\"\n\nexport interface UseRangeSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number[]\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number[]\n  /**\n   * Orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   * @default false\n   */\n  isReversed?: boolean\n\n  /**\n   * Function called when the user starts selecting a new value (by dragging or clicking)\n   */\n  onChangeStart?(value: number[]): void\n\n  /**\n   * Function called when the user is done selecting a new value (by dragging or clicking)\n   */\n  onChangeEnd?(value: number[]): void\n\n  /**\n   * Function called whenever the slider value changes  (by dragging or clicking)\n   */\n  onChange?(value: number[]): void\n\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string | string[]\n  /**\n   * If `true`, the slider will be disabled\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   * @default false\n   */\n  isReadOnly?: boolean\n\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string[]\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string[]\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string[]\n  /**\n   * The writing mode\n   * @default \"ltr\"\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /**\n   * The minimum distance between slider thumbs. Useful for preventing\n   * the thumbs from being too close together.\n   * @default 0\n   */\n  minStepsBetweenThumbs?: number\n}\n\nexport interface RangeSliderState {\n  value: number[]\n  isFocused: boolean\n  isDragging: boolean\n  getThumbPercent: (index: number) => number\n  getThumbMinValue: (index: number) => number\n  getThumbMaxValue: (index: number) => number\n}\n\nexport interface RangeSliderActions {\n  setValueAtIndex(index: number, val: number): void\n  setActiveIndex: React.Dispatch<React.SetStateAction<number>>\n  stepUp(index: number, step?: number): void\n  stepDown(index: number, step?: number): void\n  reset(): void\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb/\n */\nexport function useRangeSlider(props: UseRangeSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    minStepsBetweenThumbs = 0,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation,\n  })\n\n  const [valueState, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? [25, 75],\n    onChange,\n  })\n\n  if (!Array.isArray(valueState)) {\n    throw new TypeError(\n      `[range-slider] You passed an invalid value for \\`value\\` or \\`defaultValue\\`, expected \\`Array\\` but got \\`${typeof valueState}\\``,\n    )\n  }\n\n  const [isDragging, setDragging] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [activeIndex, setActiveIndex] = useState(-1)\n\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  const initialValue = useRef(valueState)\n  const value = valueState.map((val) => clampValue(val, min, max))\n\n  const spacing = minStepsBetweenThumbs * step\n  const valueBounds = getValueBounds(value, min, max, spacing)\n\n  const stateRef = useRef<{\n    eventSource: \"pointer\" | \"keyboard\" | null\n    value: number[]\n    valueBounds: Array<{ min: number; max: number }>\n  }>({\n    eventSource: null,\n    value: [],\n    valueBounds: [],\n  })\n\n  stateRef.current.value = value\n  stateRef.current.valueBounds = valueBounds\n\n  const reversedValue = value.map((val) => max - val + min)\n  const thumbValues = isReversed ? reversedValue : value\n  const thumbPercents = thumbValues.map((val) => valueToPercent(val, min, max))\n\n  const isVertical = orientation === \"vertical\"\n\n  const trackRef = useRef<HTMLElement>(null)\n  const rootRef = useRef<HTMLElement>(null)\n\n  const thumbRects = useSizes({\n    getNodes() {\n      const rootNode = rootRef.current\n      const thumbNodes =\n        rootNode?.querySelectorAll<HTMLElement>(\"[role=slider]\")\n      return thumbNodes ? Array.from(thumbNodes) : []\n    },\n  })\n\n  const reactId = useId()\n  const uuid = idProp ?? reactId\n  const ids = getIds(uuid)\n\n  const getValueFromPointer = useCallback(\n    (event: any) => {\n      if (!trackRef.current) return\n      stateRef.current.eventSource = \"pointer\"\n      const rect = trackRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical ? rect.bottom - clientY : clientX - rect.left\n      const length = isVertical ? rect.height : rect.width\n\n      let percent = diff / length\n      if (isReversed) percent = 1 - percent\n\n      return percentToValue(percent, min, max)\n    },\n    [isVertical, isReversed, max, min],\n  )\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  const actions: RangeSliderActions = useMemo(\n    () => ({\n      setValueAtIndex(index: number, val: number) {\n        if (!isInteractive) return\n        const bounds = stateRef.current.valueBounds[index]\n        val = parseFloat(roundValueToStep(val, bounds.min, oneStep))\n        val = clampValue(val, bounds.min, bounds.max)\n        const next = [...stateRef.current.value]\n        next[index] = val\n        setValue(next)\n      },\n      setActiveIndex,\n      stepUp(index: number, step = oneStep) {\n        const valueAtIndex = stateRef.current.value[index]\n        const next = isReversed ? valueAtIndex - step : valueAtIndex + step\n        actions.setValueAtIndex(index, next)\n      },\n      stepDown(index: number, step = oneStep) {\n        const valueAtIndex = stateRef.current.value[index]\n        const next = isReversed ? valueAtIndex + step : valueAtIndex - step\n        actions.setValueAtIndex(index, next)\n      },\n      reset() {\n        setValue(initialValue.current)\n      },\n    }),\n    [oneStep, isReversed, setValue, isInteractive],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowRight: () => actions.stepUp(activeIndex),\n        ArrowUp: () => actions.stepUp(activeIndex),\n        ArrowLeft: () => actions.stepDown(activeIndex),\n        ArrowDown: () => actions.stepDown(activeIndex),\n        PageUp: () => actions.stepUp(activeIndex, tenSteps),\n        PageDown: () => actions.stepDown(activeIndex, tenSteps),\n        Home: () => {\n          const { min: value } = valueBounds[activeIndex]\n          actions.setValueAtIndex(activeIndex, value)\n        },\n        End: () => {\n          const { max: value } = valueBounds[activeIndex]\n          actions.setValueAtIndex(activeIndex, value)\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        stateRef.current.eventSource = \"keyboard\"\n      }\n    },\n    [actions, activeIndex, tenSteps, valueBounds],\n  )\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = useMemo(\n    () =>\n      getStyles({\n        isReversed,\n        orientation,\n        thumbRects,\n        thumbPercents,\n      }),\n    [isReversed, orientation, thumbPercents, thumbRects],\n  )\n\n  const focusThumb = useCallback(\n    (index?: number) => {\n      const idx = index ?? activeIndex\n      if (idx !== -1 && focusThumbOnChange) {\n        const id = ids.getThumb(idx)\n        const thumb = rootRef.current?.ownerDocument.getElementById(id)\n        if (thumb) {\n          setTimeout(() => thumb.focus())\n        }\n      }\n    },\n    [focusThumbOnChange, activeIndex, ids],\n  )\n\n  useUpdateEffect(() => {\n    if (stateRef.current.eventSource === \"keyboard\") {\n      onChangeEnd?.(stateRef.current.value)\n    }\n  }, [value, onChangeEnd])\n\n  const onPanSessionStart = (event: MouseEvent | TouchEvent | PointerEvent) => {\n    const pointValue = getValueFromPointer(event) || 0\n    const distances = stateRef.current.value.map((val) =>\n      Math.abs(val - pointValue),\n    )\n    const closest = Math.min(...distances)\n    let index = distances.indexOf(closest)\n\n    // check if the clicked thumb is stacked by checking if there are multiple\n    // thumbs at the same distance\n    const thumbsAtPosition = distances.filter(\n      (distance) => distance === closest,\n    )\n    const isThumbStacked = thumbsAtPosition.length > 1\n\n    // when two thumbs are stacked and the user clicks at a point larger than\n    // their values, pick the last thumb with the greatest index\n    if (isThumbStacked && pointValue > stateRef.current.value[index]) {\n      index = index + thumbsAtPosition.length - 1\n    }\n\n    setActiveIndex(index)\n    actions.setValueAtIndex(index, pointValue)\n    focusThumb(index)\n  }\n\n  const onPan = (event: MouseEvent | TouchEvent | PointerEvent) => {\n    if (activeIndex == -1) return\n    const pointValue = getValueFromPointer(event) || 0\n    setActiveIndex(activeIndex)\n    actions.setValueAtIndex(activeIndex, pointValue)\n    focusThumb(activeIndex)\n  }\n\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return\n      setDragging(true)\n      onPanSessionStart(event)\n      onChangeStart?.(stateRef.current.value)\n    },\n    onPanSessionEnd() {\n      if (!isInteractive) return\n      setDragging(false)\n      onChangeEnd?.(stateRef.current.value)\n    },\n    onPan(event) {\n      if (!isInteractive) return\n      onPan(event)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ...htmlProps,\n        id: ids.root,\n        ref: mergeRefs(ref, rootRef),\n        tabIndex: -1,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"data-focused\": dataAttr(isFocused),\n        style: { ...props.style, ...rootStyle },\n      }\n    },\n    [htmlProps, isDisabled, isFocused, rootStyle, ids],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, trackRef),\n        id: ids.track,\n        \"data-disabled\": dataAttr(isDisabled),\n        style: { ...props.style, ...trackStyle },\n      }\n    },\n    [isDisabled, trackStyle, ids],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        id: ids.innerTrack,\n        style: {\n          ...props.style,\n          ...innerTrackStyle,\n        },\n      }\n    },\n    [innerTrackStyle, ids],\n  )\n\n  const getThumbProps: RequiredPropGetter<{ index: number }> = useCallback(\n    (props, ref = null) => {\n      const { index, ...rest } = props\n\n      const valueAtIndex = value[index]\n      if (valueAtIndex == null) {\n        throw new TypeError(\n          `[range-slider > thumb] Cannot find value at index \\`${index}\\`. The \\`value\\` or \\`defaultValue\\` length is : ${value.length}`,\n        )\n      }\n\n      const bounds = valueBounds[index]\n\n      return {\n        ...rest,\n        ref,\n        role: \"slider\",\n        tabIndex: isInteractive ? 0 : undefined,\n        id: ids.getThumb(index),\n        \"data-active\": dataAttr(isDragging && activeIndex === index),\n        \"aria-valuetext\":\n          getAriaValueText?.(valueAtIndex) ?? ariaValueText?.[index],\n        \"aria-valuemin\": bounds.min,\n        \"aria-valuemax\": bounds.max,\n        \"aria-valuenow\": valueAtIndex,\n        \"aria-orientation\": orientation,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-label\": ariaLabel?.[index],\n        \"aria-labelledby\": ariaLabel?.[index]\n          ? undefined\n          : ariaLabelledBy?.[index],\n        style: { ...props.style, ...getThumbStyle(index) },\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, () => {\n          setFocused(true)\n          setActiveIndex(index)\n        }),\n        onBlur: callAllHandlers(props.onBlur, () => {\n          setFocused(false)\n          setActiveIndex(-1)\n        }),\n      }\n    },\n    [\n      ids,\n      value,\n      valueBounds,\n      isInteractive,\n      isDragging,\n      activeIndex,\n      getAriaValueText,\n      ariaValueText,\n      orientation,\n      isDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      getThumbStyle,\n      onKeyDown,\n      setFocused,\n    ],\n  )\n\n  const getOutputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        id: ids.output,\n        htmlFor: value.map((v, i) => ids.getThumb(i)).join(\" \"),\n        \"aria-live\": \"off\",\n      }\n    },\n    [ids, value],\n  )\n\n  const getMarkerProps: RequiredPropGetter<{ value: number }> = useCallback(\n    (props, ref = null) => {\n      const { value: v, ...rest } = props\n\n      const isInRange = !(v < min || v > max)\n      const isHighlighted = v >= value[0] && v <= value[value.length - 1]\n\n      let percent = valueToPercent(v, min, max)\n      percent = isReversed ? 100 - percent : percent\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation,\n          vertical: { bottom: `${percent}%` },\n          horizontal: { left: `${percent}%` },\n        }),\n      }\n\n      return {\n        ...rest,\n        ref,\n        id: ids.getMarker(props.value),\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value, ids],\n  )\n\n  const getInputProps: RequiredPropGetter<{ index: number }> = useCallback(\n    (props, ref = null) => {\n      const { index, ...rest } = props\n      return {\n        ...rest,\n        ref,\n        id: ids.getInput(index),\n        type: \"hidden\",\n        value: value[index],\n        name: Array.isArray(name) ? name[index] : `${name}-${index}`,\n      }\n    },\n    [name, value, ids],\n  )\n\n  const state: RangeSliderState = {\n    value,\n    isFocused,\n    isDragging,\n    getThumbPercent: (index: number) => thumbPercents[index],\n    getThumbMinValue: (index: number) => valueBounds[index].min,\n    getThumbMaxValue: (index: number) => valueBounds[index].max,\n  }\n\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n    getOutputProps,\n  }\n}\n\nexport type UseRangeSliderReturn = ReturnType<typeof useRangeSlider>\n\nfunction getValueBounds(\n  arr: number[],\n  min: number,\n  max: number,\n  spacing: number,\n) {\n  return arr.map((v, i) => {\n    const _min = i === 0 ? min : arr[i - 1] + spacing\n    const _max = i === arr.length - 1 ? max : arr[i + 1] - spacing\n    return { min: _min, max: _max }\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}