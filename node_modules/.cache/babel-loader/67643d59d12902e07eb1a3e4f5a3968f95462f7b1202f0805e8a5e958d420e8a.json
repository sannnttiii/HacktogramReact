{"ast":null,"code":"'use client';\n\nimport { TRANSITION_EASINGS, getSlideTransition, withDelay } from \"./chunk-6NHXDBFO.mjs\";\n\n// src/slide.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { forwardRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar defaultTransition = {\n  exit: {\n    duration: 0.15,\n    ease: TRANSITION_EASINGS.easeInOut\n  },\n  enter: {\n    type: \"spring\",\n    damping: 25,\n    stiffness: 180\n  }\n};\nvar variants = {\n  exit: _ref => {\n    let {\n      direction,\n      transition,\n      transitionEnd,\n      delay\n    } = _ref;\n    var _a;\n    const {\n      exit: exitStyles\n    } = getSlideTransition({\n      direction\n    });\n    return {\n      ...exitStyles,\n      transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : withDelay.exit(defaultTransition.exit, delay),\n      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit\n    };\n  },\n  enter: _ref2 => {\n    let {\n      direction,\n      transitionEnd,\n      transition,\n      delay\n    } = _ref2;\n    var _a;\n    const {\n      enter: enterStyles\n    } = getSlideTransition({\n      direction\n    });\n    return {\n      ...enterStyles,\n      transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : withDelay.enter(defaultTransition.enter, delay),\n      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter\n    };\n  }\n};\nvar Slide = forwardRef(function Slide2(props, ref) {\n  const {\n    direction = \"right\",\n    style,\n    unmountOnExit,\n    in: isOpen,\n    className,\n    transition,\n    transitionEnd,\n    delay,\n    motionProps,\n    ...rest\n  } = props;\n  const transitionStyles = getSlideTransition({\n    direction\n  });\n  const computedStyle = Object.assign({\n    position: \"fixed\"\n  }, transitionStyles.position, style);\n  const show = unmountOnExit ? isOpen && unmountOnExit : true;\n  const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\";\n  const custom = {\n    transitionEnd,\n    transition,\n    direction,\n    delay\n  };\n  return /* @__PURE__ */jsx(AnimatePresence, {\n    custom,\n    children: show && /* @__PURE__ */jsx(motion.div, {\n      ...rest,\n      ref,\n      initial: \"exit\",\n      className: cx(\"chakra-slide\", className),\n      animate,\n      exit: \"exit\",\n      custom,\n      variants,\n      style: computedStyle,\n      ...motionProps\n    })\n  });\n});\nSlide.displayName = \"Slide\";\nexport { Slide };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,UAAU;AACnB,SACEC,iBAEAC,cAGK;AACP,SAASC,kBAAkB;AA2FnB;AA/ER,IAAMC,oBAAoB;EACxBC,MAAM;IACJC,UAAU;IACVC,MAAMC,mBAAmBC;EAC3B;EACAC,OAAO;IACLC,MAAM;IACNC,SAAS;IACTC,WAAW;EACb;AACF;AAEA,IAAMC,WAAmC;EACvCT,MAAM,QAAqD;IAAA,IAApD;MAAEU;MAAWC;MAAYC;MAAeC;IAAM;IAjCvD;IAkCI,MAAM;MAAEb,MAAMc;IAAW,IAAIC,mBAAmB;MAAEL;IAAU,CAAC;IAC7D,OAAO;MACL,GAAGI;MACHH,aACEK,8CAAYhB,SAAZ,YAAoBiB,UAAUjB,KAAKD,kBAAkBC,MAAMa,KAAK;MAClED,eAAeA,+CAAeZ;IAChC;EACF;EACAK,OAAO,SAAqD;IAAA,IAApD;MAAEK;MAAWE;MAAeD;MAAYE;IAAM;IA1CxD;IA2CI,MAAM;MAAER,OAAOa;IAAY,IAAIH,mBAAmB;MAAEL;IAAU,CAAC;IAC/D,OAAO;MACL,GAAGQ;MACHP,aACEK,8CAAYX,UAAZ,YAAqBY,UAAUZ,MAAMN,kBAAkBM,OAAOQ,KAAK;MACrED,eAAeA,+CAAeP;IAChC;EACF;AACF;AAgBO,IAAMc,QAAQrB,WAAuC,SAASqB,OACnEC,OACAC,KACA;EACA,MAAM;IACJX,YAAY;IACZY;IACAC;IACAC,IAAIC;IACJC;IACAf;IACAC;IACAC;IACAc;IACA,GAAGC;EACL,IAAIR;EAEJ,MAAMS,mBAAmBd,mBAAmB;IAAEL;EAAU,CAAC;EACzD,MAAMoB,gBAA6BC,OAAOC,OACxC;IAAEC,UAAU;EAAQ,GACpBJ,iBAAiBI,UACjBX,MACF;EAEA,MAAMY,OAAOX,gBAAgBE,UAAUF,gBAAgB;EACvD,MAAMY,UAAUV,UAAUF,gBAAgB,UAAU;EAEpD,MAAMa,SAAS;IAAExB;IAAeD;IAAYD;IAAWG;EAAM;EAE7D,OACE,mBAACjB;IAAgBwC;IACdC,kBACC,mBAACxC,OAAOyC,KAAP;MACE,GAAGV;MACJP;MACAkB,SAAQ;MACRb,WAAW/B,GAAG,gBAAgB+B,SAAS;MACvCS;MACAnC,MAAK;MACLoC;MACA3B;MACAa,OAAOQ;MACN,GAAGH;IAAA;EACN,CAEJ;AAEJ,CAAC;AAEDR,MAAMqB,cAAc","names":["cx","AnimatePresence","motion","forwardRef","defaultTransition","exit","duration","ease","TRANSITION_EASINGS","easeInOut","enter","type","damping","stiffness","variants","direction","transition","transitionEnd","delay","exitStyles","getSlideTransition","_a","withDelay","enterStyles","Slide","props","ref","style","unmountOnExit","in","isOpen","className","motionProps","rest","transitionStyles","computedStyle","Object","assign","position","show","animate","custom","children","div","initial","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/transition/src/slide.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  AnimatePresence,\n  HTMLMotionProps,\n  motion,\n  MotionStyle,\n  Variants as TVariants,\n} from \"framer-motion\"\nimport { forwardRef } from \"react\"\nimport {\n  SlideDirection,\n  getSlideTransition,\n  TRANSITION_EASINGS,\n  Variants,\n  withDelay,\n  WithTransitionConfig,\n} from \"./transition-utils\"\n\nexport type { SlideDirection }\n\nconst defaultTransition = {\n  exit: {\n    duration: 0.15,\n    ease: TRANSITION_EASINGS.easeInOut,\n  },\n  enter: {\n    type: \"spring\",\n    damping: 25,\n    stiffness: 180,\n  },\n}\n\nconst variants: Variants<SlideOptions> = {\n  exit: ({ direction, transition, transitionEnd, delay }) => {\n    const { exit: exitStyles } = getSlideTransition({ direction })\n    return {\n      ...exitStyles,\n      transition:\n        transition?.exit ?? withDelay.exit(defaultTransition.exit, delay),\n      transitionEnd: transitionEnd?.exit,\n    }\n  },\n  enter: ({ direction, transitionEnd, transition, delay }) => {\n    const { enter: enterStyles } = getSlideTransition({ direction })\n    return {\n      ...enterStyles,\n      transition:\n        transition?.enter ?? withDelay.enter(defaultTransition.enter, delay),\n      transitionEnd: transitionEnd?.enter,\n    }\n  },\n}\n\nexport interface SlideOptions {\n  /**\n   * The direction to slide from\n   * @default \"right\"\n   */\n  direction?: SlideDirection\n}\n\nexport interface SlideProps\n  extends WithTransitionConfig<HTMLMotionProps<\"div\">>,\n    SlideOptions {\n  motionProps?: HTMLMotionProps<\"div\">\n}\n\nexport const Slide = forwardRef<HTMLDivElement, SlideProps>(function Slide(\n  props,\n  ref,\n) {\n  const {\n    direction = \"right\",\n    style,\n    unmountOnExit,\n    in: isOpen,\n    className,\n    transition,\n    transitionEnd,\n    delay,\n    motionProps,\n    ...rest\n  } = props\n\n  const transitionStyles = getSlideTransition({ direction })\n  const computedStyle: MotionStyle = Object.assign(\n    { position: \"fixed\" },\n    transitionStyles.position,\n    style,\n  )\n\n  const show = unmountOnExit ? isOpen && unmountOnExit : true\n  const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\"\n\n  const custom = { transitionEnd, transition, direction, delay }\n\n  return (\n    <AnimatePresence custom={custom}>\n      {show && (\n        <motion.div\n          {...rest}\n          ref={ref}\n          initial=\"exit\"\n          className={cx(\"chakra-slide\", className)}\n          animate={animate}\n          exit=\"exit\"\n          custom={custom}\n          variants={variants as TVariants}\n          style={computedStyle}\n          {...motionProps}\n        />\n      )}\n    </AnimatePresence>\n  )\n})\n\nSlide.displayName = \"Slide\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}