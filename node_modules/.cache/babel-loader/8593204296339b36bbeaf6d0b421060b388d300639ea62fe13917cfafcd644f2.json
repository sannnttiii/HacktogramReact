{"ast":null,"code":"'use client';\n\nimport { Grid } from \"./chunk-JARCRF6W.mjs\";\n\n// src/simple-grid.tsx\nimport { forwardRef, getToken, useTheme } from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(function SimpleGrid2(props, ref) {\n  const {\n    columns,\n    spacingX,\n    spacingY,\n    spacing,\n    minChildWidth,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n  return /* @__PURE__ */jsx(Grid, {\n    ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns,\n    ...rest\n  });\n});\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, value => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(count, value => value === null ? null : `repeat(${value}, minmax(0, 1fr))`);\n}\nexport { SimpleGrid };","map":{"version":3,"mappings":";;;;;AAAA,SACEA,YACAC,UAEAC,gBACK;AACP,SAASC,qBAAqB;AAiDxB;AAXC,IAAMC,aAAaJ,WACxB,SAASI,YAAWC,OAAOC,KAAK;EAC9B,MAAM;IAAEC;IAASC;IAAUC;IAAUC;IAASC;IAAe,GAAGC;EAAK,IACnEP;EAEF,MAAMQ,QAAQX,UAAS;EACvB,MAAMY,kBAAkBH,gBACpBI,eAAeJ,eAAeE,KAAK,IACnCG,eAAeT,OAAO;EAE1B,OACE,mBAACU;IACCX;IACAY,KAAKR;IACLS,WAAWX;IACXY,QAAQX;IACRK;IACC,GAAGF;EAAA,EACN;AAEJ,EACF;AAEAR,WAAWiB,cAAc;AAEzB,SAASC,KAAKC,GAAoB;EAChC,OAAO,OAAOA,MAAM,WAAW,GAAGA,CAAC,OAAOA;AAC5C;AAEA,SAASR,eAAeS,OAAYX,OAA4B;EAC9D,OAAOV,cAAcqB,OAAQC,SAAU;IACrC,MAAMC,SAASzB,SAAS,SAASwB,OAAOH,KAAKG,KAAK,CAAC,EAAEZ,KAAK;IAC1D,OAAOY,UAAU,OAAO,OAAO,2BAA2BC,MAAM;EAClE,CAAC;AACH;AAEA,SAASV,eAAeW,OAAY;EAClC,OAAOxB,cAAcwB,OAAQF,SAC3BA,UAAU,OAAO,OAAO,UAAUA,KAAK,oBACzC;AACF","names":["forwardRef","getToken","useTheme","mapResponsive","SimpleGrid","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","theme","templateColumns","widthToColumns","countToColumns","Grid","gap","columnGap","rowGap","displayName","toPx","n","width","value","_value","count"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"sourcesContent":["import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}