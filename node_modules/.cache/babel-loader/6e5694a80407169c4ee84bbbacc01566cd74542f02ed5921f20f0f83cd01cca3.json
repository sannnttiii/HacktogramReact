{"ast":null,"code":"'use client';\n\nimport { useShortcut } from \"./chunk-YSKACL7R.mjs\";\nimport { getNextItemFromSearch } from \"./chunk-BWUXSGSJ.mjs\";\n\n// src/use-menu.ts\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\";\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { cloneElement, useCallback, useRef, useState, useId, useMemo, useEffect } from \"react\";\nvar [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = createDescendantContext();\nvar [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\nfunction getOwnerDocument(node) {\n  var _a;\n  return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;\n}\nfunction isActiveElement(element) {\n  const doc = getOwnerDocument(element);\n  return doc.activeElement === element;\n}\nfunction useMenu() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props;\n  const menuRef = useRef(null);\n  const buttonRef = useRef(null);\n  const descendants = useMenuDescendants();\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      var _a;\n      (_a = menuRef.current) == null ? void 0 : _a.focus({\n        preventScroll: false\n      });\n    });\n  }, []);\n  const focusFirstItem = useCallback(() => {\n    const id2 = setTimeout(() => {\n      var _a;\n      if (initialFocusRef) {\n        (_a = initialFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        const first = descendants.firstEnabled();\n        if (first) setFocusedIndex(first.index);\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, initialFocusRef]);\n  const focusLastItem = useCallback(() => {\n    const id2 = setTimeout(() => {\n      const last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  const onOpenInternal = useCallback(() => {\n    onOpenProp == null ? void 0 : onOpenProp();\n    if (autoSelect) {\n      focusFirstItem();\n    } else {\n      focusMenu();\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal\n  });\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: event => {\n      var _a;\n      if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  const popper = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction\n  });\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  const animationState = useAnimationState({\n    isOpen,\n    ref: menuRef\n  });\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`);\n  const openAndFocusMenu = useCallback(() => {\n    onOpen();\n    focusMenu();\n  }, [onOpen, focusMenu]);\n  const timeoutIds = useRef( /* @__PURE__ */new Set([]));\n  useEffect(() => {\n    const ids = timeoutIds.current;\n    return () => {\n      ids.forEach(id2 => clearTimeout(id2));\n      ids.clear();\n    };\n  }, []);\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen();\n    focusFirstItem();\n  }, [focusFirstItem, onOpen]);\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen();\n    focusLastItem();\n  }, [onOpen, focusLastItem]);\n  const refocus = useCallback(() => {\n    var _a, _b;\n    const doc = getOwnerDocument(menuRef.current);\n    const hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);\n    const shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    const node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;\n    node == null ? void 0 : node.focus({\n      preventScroll: true\n    });\n  }, [isOpen, focusedIndex, descendants]);\n  const rafId = useRef(null);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId\n  };\n}\nfunction useMenuButton() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const menu = useMenuContext();\n  const {\n    onToggle,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem\n  } = menu;\n  const onKeyDown = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  };\n}\nfunction isTargetMenuItem(target) {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"menuitem\"));\n}\nfunction useMenuList() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const menu = useMenuContext();\n  if (!menu) {\n    throw new Error(`useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`);\n  }\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated\n  } = menu;\n  const descendants = useMenuDescendantsContext();\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: event => event.key !== \" \" && isTargetMenuItem(event.target)\n  });\n  const onKeyDown = useCallback(event => {\n    if (!event.currentTarget.contains(event.target)) return;\n    const eventKey = event.key;\n    const keyMap = {\n      Tab: event2 => event2.preventDefault(),\n      Escape: onClose,\n      ArrowDown: () => {\n        const next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: () => {\n        const prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    const fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    const onTypeahead = createTypeaheadHandler(character => {\n      const nextItem = getNextItemFromSearch(descendants.values(), character, item => {\n        var _a, _b;\n        return (_b = (_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) != null ? _b : \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        const index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  const hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\"\n    },\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  };\n}\nfunction useMenuPositioner() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style\n    }\n  });\n}\nfunction useMenuItem() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props;\n  const menu = useMenuContext();\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId\n  } = menu;\n  const ref = useRef(null);\n  const id = `${menuId}-menuitem-${useId()}`;\n  const {\n    index,\n    register\n  } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  const onMouseEnter = useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  const onMouseMove = useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  const onMouseLeave = useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  const onClick = useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  const onFocus = useCallback(event => {\n    onFocusProp == null ? void 0 : onFocusProp(event);\n    setFocusedIndex(index);\n  }, [setFocusedIndex, onFocusProp, index]);\n  const isFocused = index === focusedIndex;\n  const trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n      rafId.current = requestAnimationFrame(() => {\n        var _a;\n        (_a = ref.current) == null ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        rafId.current = null;\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({\n        preventScroll: true\n      });\n    }\n    return () => {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp != null ? typeProp : clickableProps.type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  };\n}\nfunction useMenuOption() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const {\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props;\n  const ownProps = useMenuItem(rest, ref);\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked\n  };\n}\nfunction useMenuOptionGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props;\n  const isRadio = type === \"radio\";\n  const fallback = isRadio ? \"\" : [];\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const onChange = useCallback(selectedValue => {\n    if (type === \"radio\" && typeof value === \"string\") {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && Array.isArray(value)) {\n      const nextValue = value.includes(selectedValue) ? value.filter(item => item !== selectedValue) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  const validChildren = getValidChildren(children);\n  const clones = validChildren.map(child => {\n    if (child.type.id !== \"MenuItemOption\") return child;\n    const onClick = event => {\n      var _a, _b;\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, event);\n    };\n    const isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return {\n    ...htmlProps,\n    children: clones\n  };\n}\nfunction useMenuState() {\n  const {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}\nfunction isHTMLElement(el) {\n  var _a;\n  if (!isElement(el)) return false;\n  const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;\n  return el instanceof win.HTMLElement;\n}\nfunction isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\nexport { MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant, MenuProvider, useMenuContext, useMenu, useMenuButton, useMenuList, useMenuPositioner, useMenuItem, useMenuOption, useMenuOptionGroup, useMenuState };","map":{"version":3,"mappings":"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","names":["useClickable","createDescendantContext","useFocusOnHide","usePopper","useDisclosure","useOutsideClick","useAnimationState","createContext","getValidChildren","useControllableState","useUpdateEffect","mergeRefs","dataAttr","callAllHandlers","lazyDisclosure","cloneElement","useCallback","useRef","useState","useId","useMemo","useEffect","MenuDescendantsProvider","useMenuDescendantsContext","useMenuDescendants","useMenuDescendant","MenuProvider","useMenuContext","strict","name","useIds","idProp","prefixes","reactId","id","map","prefix","getOwnerDocument","node","_a","ownerDocument","document","isActiveElement","element","doc","activeElement","useMenu","props","closeOnSelect","closeOnBlur","initialFocusRef","autoSelect","isLazy","isOpen","isOpenProp","defaultIsOpen","onClose","onCloseProp","onOpen","onOpenProp","placement","lazyBehavior","direction","computePositionOnMount","popperProps","menuRef","buttonRef","descendants","focusMenu","requestAnimationFrame","current","focus","preventScroll","focusFirstItem","setTimeout","first","firstEnabled","setFocusedIndex","index","timeoutIds","add","focusLastItem","last","lastEnabled","onOpenInternal","onToggle","enabled","ref","handler","event","contains","target","popper","focusedIndex","focusRef","visible","shouldFocus","animationState","buttonId","menuId","openAndFocusMenu","Set","ids","forEach","clearTimeout","clear","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","shouldRefocus","_b","item","rafId","onTransitionEnd","unstable__animationState","forceUpdate","orientation","useMenuButton","externalRef","menu","onKeyDown","eventKey","key","keyMap","Enter","ArrowDown","ArrowUp","action","preventDefault","stopPropagation","referenceRef","onClick","isTargetMenuItem","isHTMLElement","getAttribute","startsWith","useMenuList","Error","animated","createTypeaheadHandler","useShortcut","currentTarget","Tab","Escape","next","nextEnabled","prev","prevEnabled","fn","onTypeahead","character","nextItem","getNextItemFromSearch","values","textContent","indexOf","hasBeenOpened","shouldRenderChildren","wasSelected","mode","isSelected","present","children","tabIndex","role","style","transformOrigin","useMenuPositioner","getPopperProps","visibility","useMenuItem","onMouseEnter","onMouseEnterProp","onMouseMove","onMouseMoveProp","onMouseLeave","onMouseLeaveProp","onClickProp","onFocus","onFocusProp","isDisabled","isFocusable","type","typeProp","htmlProps","menuCloseOnSelect","register","disabled","isFocused","trulyDisabled","cancelAnimationFrame","clickableProps","useMenuOption","isChecked","rest","ownProps","useMenuOptionGroup","value","valueProp","defaultValue","onChange","onChangeProp","isRadio","fallback","setValue","selectedValue","Array","isArray","nextValue","includes","filter","concat","validChildren","clones","child","useMenuState","el","isElement","win","defaultView","window","HTMLElement","nodeType","Node","ELEMENT_NODE"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/menu/src/use-menu.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  useDisclosure,\n  UseDisclosureProps,\n} from \"@chakra-ui/react-use-disclosure\"\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\"\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\n\nimport React, {\n  cloneElement,\n  useCallback,\n  useRef,\n  useState,\n  useId,\n  useMemo,\n  useEffect,\n} from \"react\"\nimport { useShortcut } from \"./use-shortcut\"\nimport { getNextItemFromSearch } from \"./get-next-item-from-search\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps\n  extends Omit<UsePopperProps, \"enabled\">,\n    UseDisclosureProps {\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   *\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\n   * become 'top-left' and vice-verse\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /*\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note 🚨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   *\n   * @default false\n   */\n  computePositionOnMount?: boolean\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\nfunction getOwnerDocument(node?: Element | null): Document {\n  return node?.ownerDocument ?? document\n}\n\nfunction isActiveElement(element: HTMLElement) {\n  const doc = getOwnerDocument(element)\n  return doc.activeElement === (element as HTMLElement)\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      menuRef.current?.focus({ preventScroll: false })\n    })\n  }, [])\n\n  const focusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) {\n        initialFocusRef.current?.focus()\n      } else {\n        const first = descendants.firstEnabled()\n        if (first) setFocusedIndex(first.index)\n      }\n    })\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const focusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [descendants])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n    if (autoSelect) {\n      focusFirstItem()\n    } else {\n      focusMenu()\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp])\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal,\n  })\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper: any = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  const animationState = useAnimationState({ isOpen, ref: menuRef })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    focusMenu()\n  }, [onOpen, focusMenu])\n\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n\n  // clean up timeouts\n  useEffect(() => {\n    const ids = timeoutIds.current\n    return () => {\n      ids.forEach((id) => clearTimeout(id))\n      ids.clear()\n    }\n  }, [])\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    focusFirstItem()\n  }, [focusFirstItem, onOpen])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    focusLastItem()\n  }, [onOpen, focusLastItem])\n\n  const refocus = useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    node?.focus({ preventScroll: true })\n  }, [isOpen, focusedIndex, descendants])\n\n  /**\n   * Track the animation frame which is scheduled to focus\n   * a menu item, so it can be cancelled if another item\n   * is focused before the animation executes. This prevents\n   * infinite rerenders.\n   */\n  const rafId = useRef<number | null>(null)\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target?.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n): React.HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement> {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // ignore events bubbles from portal children\n      if (!event.currentTarget.contains(event.target as Element)) return\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\" | \"disabled\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n  /**\n   * The type of the menuitem.\n   */\n  type?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"]\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = useCallback(\n    (event: any) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = useCallback(\n    (event: any) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = useCallback(\n    (event: any) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const onFocus = useCallback(\n    (event: React.FocusEvent) => {\n      onFocusProp?.(event)\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, onFocusProp, index],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      // Cancel any pending animations\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n      rafId.current = requestAnimationFrame(() => {\n        ref.current?.focus({ preventScroll: true })\n        rafId.current = null\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({ preventScroll: true })\n    }\n\n    return () => {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp ?? (clickableProps as any).type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends Omit<UseMenuItemProps, \"type\">,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && typeof value === \"string\") {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && Array.isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? value.filter((item) => item !== selectedValue)\n          : value.concat(selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n\nfunction isHTMLElement(el: any): el is HTMLElement {\n  if (!isElement(el)) return false\n  const win = el.ownerDocument.defaultView ?? window\n  return el instanceof win.HTMLElement\n}\n\nfunction isElement(el: any): el is Element {\n  return (\n    el != null &&\n    typeof el == \"object\" &&\n    \"nodeType\" in el &&\n    el.nodeType === Node.ELEMENT_NODE\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}