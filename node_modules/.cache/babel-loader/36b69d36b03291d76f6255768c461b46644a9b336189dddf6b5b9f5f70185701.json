{"ast":null,"code":"'use client';\n\n// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    var _a;\n    if (defaultValue == null) return \"\";\n    return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp != null ? precisionProp : decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    var _a;\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    var _a;\n    const nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}\nexport { useCounter };","map":{"version":3,"mappings":"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","names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","_a","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","cast","parseFloat","replace","Math","parsedValue","isNaN"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/counter/src/use-counter.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision,\n} from \"@chakra-ui/number-utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: string | number\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: string | number\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default Number.MIN_SAFE_INTEGER\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<string | number>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: string | number) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: string | number\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: string | number) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: string | number) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: string | number, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}