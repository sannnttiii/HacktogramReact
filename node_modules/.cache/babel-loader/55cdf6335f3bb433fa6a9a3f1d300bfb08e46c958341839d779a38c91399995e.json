{"ast":null,"code":"'use client';\n\nimport { AlertProvider, AlertStylesProvider, getStatusColorScheme } from \"./chunk-XCES3W5V.mjs\";\n\n// src/alert.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Alert = forwardRef(function Alert2(props, ref) {\n  var _a;\n  const {\n    status = \"info\",\n    addRole = true,\n    ...rest\n  } = omitThemingProps(props);\n  const colorScheme = (_a = props.colorScheme) != null ? _a : getStatusColorScheme(status);\n  const styles = useMultiStyleConfig(\"Alert\", {\n    ...props,\n    colorScheme\n  });\n  const alertStyles = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx(AlertProvider, {\n    value: {\n      status\n    },\n    children: /* @__PURE__ */jsx(AlertStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, {\n        \"data-status\": status,\n        role: addRole ? \"alert\" : void 0,\n        ref,\n        ...rest,\n        className: cx(\"chakra-alert\", props.className),\n        __css: alertStyles\n      })\n    })\n  });\n});\nAlert.displayName = \"Alert\";\nexport { Alert };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,UAAU;AACnB,SACEC,QACAC,YAEAC,kBAGAC,2BACK;AAmDC;AAlBD,IAAMC,QAAQH,WAA8B,SAASG,OAAMC,OAAOC,KAAK;EA1C9E;EA2CE,MAAM;IAAEC,SAAS;IAAQC,UAAU;IAAM,GAAGC;EAAK,IAAIP,iBAAiBG,KAAK;EAC3E,MAAMK,eAAcC,WAAMD,gBAAN,YAAqBE,qBAAqBL,MAAM;EAEpE,MAAMM,SAASV,oBAAoB,SAAS;IAAE,GAAGE;IAAOK;EAAY,CAAC;EAErE,MAAMI,cAAiC;IACrCC,OAAO;IACPC,SAAS;IACTC,YAAY;IACZC,UAAU;IACVC,UAAU;IACV,GAAGN,OAAOO;EACZ;EAEA,OACE,mBAACC;IAAcC,OAAO;MAAEf;IAAO;IAC7BgB,6BAACC;MAAoBF,OAAOT;MAC1BU,6BAACvB,OAAOyB,KAAP;QACC,eAAalB;QACbmB,MAAMlB,UAAU,UAAU;QAC1BF;QACC,GAAGG;QACJkB,WAAW5B,GAAG,gBAAgBM,MAAMsB,SAAS;QAC7CC,OAAOd;MAAA;IACT,CACF;EAAA,CACF;AAEJ,CAAC;AAEDV,MAAMyB,cAAc","names":["cx","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","Alert","props","ref","status","addRole","rest","colorScheme","_a","getStatusColorScheme","styles","alertStyles","width","display","alignItems","position","overflow","container","AlertProvider","value","children","AlertStylesProvider","div","role","className","__css","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/alert/src/alert.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport {\n  AlertProvider,\n  AlertStatus,\n  AlertStylesProvider,\n  getStatusColorScheme,\n} from \"./alert-context\"\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   * @default \"info\"\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps<\"Alert\"> {\n  /**\n   * @default false\n   */\n  addRole?: boolean\n}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n *\n * @see Docs https://chakra-ui.com/docs/components/alert\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/alert/\n */\nexport const Alert = forwardRef<AlertProps, \"div\">(function Alert(props, ref) {\n  const { status = \"info\", addRole = true, ...rest } = omitThemingProps(props)\n  const colorScheme = props.colorScheme ?? getStatusColorScheme(status)\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <AlertStylesProvider value={styles}>\n        <chakra.div\n          data-status={status}\n          role={addRole ? \"alert\" : undefined}\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </AlertStylesProvider>\n    </AlertProvider>\n  )\n})\n\nAlert.displayName = \"Alert\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}