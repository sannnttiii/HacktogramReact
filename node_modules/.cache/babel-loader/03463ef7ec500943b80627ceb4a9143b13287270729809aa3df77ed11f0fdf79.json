{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\";\nimport { useEventListener } from \"./chunk-7JEV5YKL.mjs\";\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\";\n\n// src/use-focus-on-show.ts\nimport { contains, focus, getAllFocusable, isRefObject } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nfunction useFocusOnShow(target) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  const element = isRefObject(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef(autoFocusValue);\n  const lastVisibleRef = useRef(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (contains(element, document.activeElement)) return;\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll,\n        nextTick: true\n      });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll,\n          nextTick: true\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\nexport { useFocusOnShow };","map":{"version":3,"mappings":";;;;;;;AAAA,SACEA,UACAC,OAEAC,iBACAC,mBACK;AACP,SAASC,aAAaC,cAAc;AAYpC,IAAMC,iBAAwC;EAC5CC,eAAe;EACfC,aAAa;AACf;AAEO,SAASC,eACdC,QAEA;EAAA,IADAC,8EAAUL;EAEV,MAAM;IAAEM;IAAUL;IAAeC;IAAaK;EAAQ,IAAIF;EAC1D,MAAMG,UAAUX,YAAYO,MAAM,IAAIA,OAAOK,UAAUL;EACvD,MAAMM,iBAAiBR,eAAeK;EACtC,MAAMI,eAAeZ,OAAOW,cAAc;EAC1C,MAAME,iBAAiBb,OAAOQ,OAAO;EAErCM,oBAAoB,MAAM;IACxB,IAAI,CAACD,eAAeH,WAAWF,SAAS;MACtCI,aAAaF,UAAUC;IACzB;IACAE,eAAeH,UAAUF;EAC3B,GAAG,CAACA,SAASG,cAAc,CAAC;EAE5B,MAAMI,UAAUhB,YAAY,MAAM;IAChC,IAAI,CAACS,WAAW,CAACC,WAAW,CAACG,aAAaF,SAAS;IACnDE,aAAaF,UAAU;IAEvB,IAAIf,SAASc,SAASO,SAASC,aAA4B,GAAG;IAE9D,IAAIV,qCAAUG,SAAS;MACrBd,MAAMW,SAASG,SAAS;QAAER;QAAegB,UAAU;MAAK,CAAC;IAC3D,OAAO;MACL,MAAMC,cAActB,gBAAgBY,OAAO;MAC3C,IAAIU,YAAYC,SAAS,GAAG;QAC1BxB,MAAMuB,YAAY,CAAC,GAAG;UAAEjB;UAAegB,UAAU;QAAK,CAAC;MACzD;IACF;EACF,GAAG,CAACV,SAASN,eAAeO,SAASF,QAAQ,CAAC;EAE9Cc,gBAAgB,MAAM;IACpBN,SAAQ;EACV,GAAG,CAACA,OAAO,CAAC;EAEZO,iBAAiB,iBAAiBP,SAASN,OAAO;AACpD","names":["contains","focus","getAllFocusable","isRefObject","useCallback","useRef","defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocusValue","autoFocusRef","lastVisibleRef","useSafeLayoutEffect","onFocus","document","activeElement","nextTick","tabbableEls","length","useUpdateEffect","useEventListener"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-focus-on-show.ts"],"sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useRef } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n  const autoFocusValue = shouldFocus && visible\n  const autoFocusRef = useRef(autoFocusValue)\n  const lastVisibleRef = useRef(visible)\n\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue\n    }\n    lastVisibleRef.current = visible\n  }, [visible, autoFocusValue])\n\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return\n    autoFocusRef.current = false\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll, nextTick: true })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll, nextTick: true })\n      }\n    }\n  }, [visible, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}