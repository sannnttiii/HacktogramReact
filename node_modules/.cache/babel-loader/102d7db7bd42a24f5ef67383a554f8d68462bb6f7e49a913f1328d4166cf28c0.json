{"ast":null,"code":"'use client';\n\nimport { useChakra } from \"./chunk-7FWEOSAE.mjs\";\n\n// src/use-style-config.ts\nimport { resolveStyleConfig } from \"@chakra-ui/styled-system\";\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\";\nimport { filterUndefined, memoizedGet as get, mergeWith, omit } from \"@chakra-ui/utils\";\nimport { useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nfunction useStyleConfigImpl(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  const {\n    styleConfig: styleConfigProp,\n    ...rest\n  } = props;\n  const {\n    theme,\n    colorMode\n  } = useChakra();\n  const themeStyleConfig = themeKey ? get(theme, `components.${themeKey}`) : void 0;\n  const styleConfig = styleConfigProp || themeStyleConfig;\n  const mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_a = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a : {}, filterUndefined(omit(rest, [\"children\"])));\n  const stylesRef = useRef({});\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig);\n    const styles = getStyles(mergedProps);\n    const isStyleEqual = isEqual(stylesRef.current, styles);\n    if (!isStyleEqual) {\n      stylesRef.current = styles;\n    }\n  }\n  return stylesRef.current;\n}\nfunction useStyleConfig(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useStyleConfigImpl(themeKey, props);\n}\nfunction useMultiStyleConfig(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useStyleConfigImpl(themeKey, props);\n}\nfunction useComponentStyles__unstable(themeKey, props) {\n  var _a;\n  const {\n    baseConfig,\n    ...restProps\n  } = props;\n  const {\n    theme\n  } = useChakra();\n  const overrides = (_a = theme.components) == null ? void 0 : _a[themeKey];\n  const styleConfig = overrides ? mergeThemeOverride(overrides, baseConfig) : baseConfig;\n  return useStyleConfigImpl(null, {\n    ...restProps,\n    styleConfig\n  });\n}\nexport { useStyleConfig, useMultiStyleConfig, useComponentStyles__unstable };","map":{"version":3,"mappings":";;;;;AAAA,SACEA,0BAGK;AACP,SAASC,0BAA0B;AACnC,SAEEC,iBACAC,eAAeC,KACfC,WACAC,YACK;AACP,SAASC,cAAc;AACvB,OAAOC,aAAa;AAKpB,SAASC,mBACPC,UAEA;EAAA,IADAC,4EAA6B,CAAC;EArBhC;EAuBE,MAAM;IAAEC,aAAaC;IAAiB,GAAGC;EAAK,IAAIH;EAElD,MAAM;IAAEI;IAAOC;EAAU,IAAIC,WAAU;EAEvC,MAAMC,mBAAmBR,WACrBN,IAAIW,OAAO,cAAcL,QAAQ,EAAE,IACnC;EAEJ,MAAME,cAAcC,mBAAmBK;EAEvC,MAAMC,cAAcd,UAClB;IAAEU;IAAOC;EAAU,IACnBI,gDAAaC,iBAAb,YAA6B,CAAC,GAC9BnB,gBAAgBI,KAAKQ,MAAM,CAAC,UAAU,CAAC,CAAC,EAC1C;EAKA,MAAMQ,YAAYf,OAAkB,CAAC,CAAC;EAEtC,IAAIK,aAAa;IACf,MAAMW,YAAYvB,mBAAmBY,WAAW;IAChD,MAAMY,SAASD,UAAUJ,WAAW;IAEpC,MAAMM,eAAejB,QAAQc,UAAUI,SAASF,MAAM;IAEtD,IAAI,CAACC,cAAc;MACjBH,UAAUI,UAAUF;IACtB;EACF;EAEA,OAAOF,UAAUI;AACnB;AAEO,SAASC,eACdjB,UAEA;EAAA,IADAC,4EAA6B,CAAC;EAE9B,OAAOF,mBAAmBC,UAAUC,KAAK;AAC3C;AAEO,SAASiB,oBACdlB,UAEA;EAAA,IADAC,4EAA6B,CAAC;EAE9B,OAAOF,mBAAmBC,UAAUC,KAAK;AAI3C;AAIO,SAASkB,6BACdnB,UACAC,OACA;EAhFF;EAiFE,MAAM;IAAEmB;IAAY,GAAGC;EAAU,IAAIpB;EACrC,MAAM;IAAEI;EAAM,IAAIE,WAAU;EAE5B,MAAMe,aAAYZ,WAAMa,eAAN,mBAAmBvB;EAErC,MAAME,cAAcoB,YAChB/B,mBAAmB+B,WAAWF,UAAU,IACxCA;EAEJ,OAAOrB,mBAAmB,MAAM;IAC9B,GAAGsB;IACHnB;EACF,CAAC;AACH","names":["resolveStyleConfig","mergeThemeOverride","filterUndefined","memoizedGet","get","mergeWith","omit","useRef","isEqual","useStyleConfigImpl","themeKey","props","styleConfig","styleConfigProp","rest","theme","colorMode","useChakra","themeStyleConfig","mergedProps","_a","defaultProps","stylesRef","getStyles","styles","isStyleEqual","current","useStyleConfig","useMultiStyleConfig","useComponentStyles__unstable","baseConfig","restProps","overrides","components"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/system/src/use-style-config.ts"],"sourcesContent":["import {\n  resolveStyleConfig,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/styled-system\"\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\n\ntype StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n\nfunction useStyleConfigImpl(\n  themeKey: string | null,\n  props: ThemingProps & Dict = {},\n) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = themeKey\n    ? get(theme, `components.${themeKey}`)\n    : undefined\n\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  const stylesRef = useRef<StylesRef>({})\n\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig)\n    const styles = getStyles(mergedProps)\n\n    const isStyleEqual = isEqual(stylesRef.current, styles)\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles\n    }\n  }\n\n  return stylesRef.current\n}\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as SystemStyleObject\n}\n\nexport function useMultiStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as Record<\n    string,\n    SystemStyleObject\n  >\n}\n\ntype MultipartStyles = Record<string, SystemStyleObject>\n\nexport function useComponentStyles__unstable(\n  themeKey: string,\n  props: ThemingProps & { baseConfig: any },\n) {\n  const { baseConfig, ...restProps } = props\n  const { theme } = useChakra()\n\n  const overrides = theme.components?.[themeKey]\n\n  const styleConfig = overrides\n    ? mergeThemeOverride(overrides, baseConfig)\n    : baseConfig\n\n  return useStyleConfigImpl(null, {\n    ...restProps,\n    styleConfig,\n  }) as MultipartStyles\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}