{"ast":null,"code":"// src/color.ts\nimport { getCSSVar } from \"@chakra-ui/styled-system\";\nimport { toHex, parseToRgba, transparentize as setTransparency, mix, darken as reduceLightness, lighten as increaseLightness, getContrast, parseToHsla, hsla, getLuminance } from \"color2k\";\n\n// ../../../node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\nfunction dlv_es_default(t, e, l, n, r) {\n  for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++) t = t ? t[e[n]] : r;\n  return t === r ? l : t;\n}\n\n// src/color.ts\nvar isEmptyObject = obj => Object.keys(obj).length === 0;\nvar getColor = (theme, color, fallback) => {\n  const hex = dlv_es_default(theme, `colors.${color}`, color);\n  try {\n    toHex(hex);\n    return hex;\n  } catch {\n    return fallback != null ? fallback : \"#000000\";\n  }\n};\nvar getColorVar = (theme, color, fallback) => {\n  var _a;\n  return (_a = getCSSVar(theme, \"colors\", color)) != null ? _a : fallback;\n};\nvar getBrightness = color => {\n  const [r, g, b] = parseToRgba(color);\n  return (r * 299 + g * 587 + b * 114) / 1e3;\n};\nvar tone = color => theme => {\n  const hex = getColor(theme, color);\n  const brightness = getBrightness(hex);\n  const isDark2 = brightness < 128;\n  return isDark2 ? \"dark\" : \"light\";\n};\nvar isDark = color => theme => tone(color)(theme) === \"dark\";\nvar isLight = color => theme => tone(color)(theme) === \"light\";\nvar transparentize = (color, opacity) => theme => {\n  const raw = getColor(theme, color);\n  return setTransparency(raw, 1 - opacity);\n};\nvar whiten = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(mix(raw, \"#fff\", amount));\n};\nvar blacken = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(mix(raw, \"#000\", amount / 100));\n};\nvar darken = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(reduceLightness(raw, amount / 100));\n};\nvar lighten = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  toHex(increaseLightness(raw, amount / 100));\n};\nvar contrast = (fg, bg) => theme => getContrast(getColor(theme, bg), getColor(theme, fg));\nvar isAccessible = (textColor, bgColor, options) => theme => isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\nfunction isReadable(color1, color2) {\n  let wcag2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    level: \"AA\",\n    size: \"small\"\n  };\n  var _a, _b;\n  const readabilityLevel = readability(color1, color2);\n  switch (((_a = wcag2.level) != null ? _a : \"AA\") + ((_b = wcag2.size) != null ? _b : \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5;\n    case \"AAlarge\":\n      return readabilityLevel >= 3;\n    case \"AAAsmall\":\n      return readabilityLevel >= 7;\n    default:\n      return false;\n  }\n}\nfunction readability(color1, color2) {\n  return (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) / (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05);\n}\nvar complementary = color => theme => {\n  const raw = getColor(theme, color);\n  const hsl = parseToHsla(raw);\n  const complementHsl = Object.assign(hsl, [(hsl[0] + 180) % 360]);\n  return toHex(hsla(...complementHsl));\n};\nfunction generateStripe() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"1rem\";\n  let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"rgba(255, 255, 255, 0.15)\";\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`\n  };\n}\nvar randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, \"0\")}`;\nfunction randomColor(opts) {\n  const fallback = randomHex();\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n  return fallback;\n}\nfunction randomColorFromString(str) {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  let color = \"#\";\n  for (let j = 0; j < 3; j += 1) {\n    const value = hash >> j * 8 & 255;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n  return color;\n}\nfunction randomColorFromList(str, list) {\n  let index = 0;\n  if (str.length === 0) return list[0];\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\nexport { getColor, getColorVar, tone, isDark, isLight, transparentize, whiten, blacken, darken, lighten, contrast, isAccessible, isReadable, readability, complementary, generateStripe, randomColor };","map":{"version":3,"mappings":"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","names":["getCSSVar","toHex","parseToRgba","transparentize","setTransparency","mix","darken","reduceLightness","lighten","increaseLightness","getContrast","parseToHsla","hsla","getLuminance","obj","key","def","p","undef","split","length","isEmptyObject","Object","keys","getColor","theme","color","fallback","hex","dlv_es_default","getColorVar","_a","getBrightness","r","g","b","tone","brightness","isDark","isLight","opacity","raw","whiten","amount","blacken","contrast","fg","bg","isAccessible","textColor","bgColor","options","isReadable","color1","color2","wcag2","level","size","readabilityLevel","readability","_b","Math","max","min","complementary","hsl","complementHsl","assign","generateStripe","backgroundImage","backgroundSize","randomHex","floor","random","toString","padEnd","randomColor","opts","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","i","charCodeAt","j","value","substr","list","index"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/theme-tools/src/color.ts","/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/index.js"],"sourcesContent":["import { getCSSVar } from \"@chakra-ui/styled-system\"\nimport {\n  toHex,\n  parseToRgba,\n  transparentize as setTransparency,\n  mix,\n  darken as reduceLightness,\n  lighten as increaseLightness,\n  getContrast,\n  parseToHsla,\n  hsla,\n  getLuminance,\n} from \"color2k\"\n\nimport get from \"dlv\"\n\ntype Dict = { [key: string]: any }\nconst isEmptyObject = (obj: any) => Object.keys(obj).length === 0\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  try {\n    toHex(hex)\n    return hex\n  } catch {\n    // returning black to stay consistent with TinyColor behaviour so as to prevent breaking change\n    return fallback ?? \"#000000\"\n  }\n}\n\n/**\n * Get the color css variable from theme\n */\nexport const getColorVar = (theme: Dict, color: string, fallback?: string) => {\n  return getCSSVar(theme, \"colors\", color) ?? fallback\n}\n\nconst getBrightness = (color: string) => {\n  const [r, g, b] = parseToRgba(color)\n  // http://www.w3.org/TR/AERT#color-contrast\n  return (r * 299 + g * 587 + b * 114) / 1000\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const brightness = getBrightness(hex)\n  const isDark = brightness < 128\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const transparentize =\n  (color: string, opacity: number) => (theme: Dict) => {\n    const raw = getColor(theme, color)\n    return setTransparency(raw, 1 - opacity)\n  }\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#fff\", amount))\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#000\", amount / 100))\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(reduceLightness(raw, amount / 100))\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  toHex(increaseLightness(raw, amount / 100))\n}\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  getContrast(getColor(theme, bg), getColor(theme, fg))\n\ninterface WCAG2Params {\n  level?: \"AA\" | \"AAA\"\n  size?: \"large\" | \"small\"\n}\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for contrast ratio.\n *\n * @param textColor - the foreground or text color\n * @param bgColor - the background color\n * @param options\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isAccessible =\n  (textColor: string, bgColor: string, options?: WCAG2Params) =>\n  (theme: Dict) =>\n    isReadable(getColor(theme, bgColor), getColor(theme, textColor), options)\n\nexport function isReadable(\n  color1: string,\n  color2: string,\n  wcag2: WCAG2Params = { level: \"AA\", size: \"small\" },\n): boolean {\n  const readabilityLevel = readability(color1, color2)\n  switch ((wcag2.level ?? \"AA\") + (wcag2.size ?? \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5\n    case \"AAlarge\":\n      return readabilityLevel >= 3\n    case \"AAAsmall\":\n      return readabilityLevel >= 7\n    default:\n      return false\n  }\n}\n\nexport function readability(color1: string, color2: string): number {\n  return (\n    (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) /\n    (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05)\n  )\n}\n/**\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const complementary = (color: string) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  const hsl = parseToHsla(raw)\n  const complementHsl: [number, number, number, number] = Object.assign(hsl, [\n    (hsl[0] + 180) % 360,\n  ])\n  return toHex(hsla(...complementHsl))\n}\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nconst randomHex = () =>\n  `#${Math.floor(Math.random() * 0xffffff)\n    .toString(16)\n    .padEnd(6, \"0\")}`\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = randomHex()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}