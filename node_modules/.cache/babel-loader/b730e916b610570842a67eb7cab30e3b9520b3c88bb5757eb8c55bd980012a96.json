{"ast":null,"code":"'use client';\n\n// src/toast.utils.ts\nvar findById = (arr, id) => arr.find(toast => toast.id === id);\nfunction findToast(toasts, id) {\n  const position = getToastPosition(toasts, id);\n  const index = position ? toasts[position].findIndex(toast => toast.id === id) : -1;\n  return {\n    position,\n    index\n  };\n}\nfunction getToastPosition(toasts, id) {\n  for (const [position, values] of Object.entries(toasts)) {\n    if (findById(values, id)) {\n      return position;\n    }\n  }\n}\nvar isVisible = (toasts, id) => !!getToastPosition(toasts, id);\nfunction getToastStyle(position) {\n  const isRighty = position.includes(\"right\");\n  const isLefty = position.includes(\"left\");\n  let alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems\n  };\n}\nfunction getToastListStyle(position) {\n  const isTopOrBottom = position === \"top\" || position === \"bottom\";\n  const margin = isTopOrBottom ? \"0 auto\" : void 0;\n  const top = position.includes(\"top\") ? \"env(safe-area-inset-top, 0px)\" : void 0;\n  const bottom = position.includes(\"bottom\") ? \"env(safe-area-inset-bottom, 0px)\" : void 0;\n  const right = !position.includes(\"left\") ? \"env(safe-area-inset-right, 0px)\" : void 0;\n  const left = !position.includes(\"right\") ? \"env(safe-area-inset-left, 0px)\" : void 0;\n  return {\n    position: \"fixed\",\n    zIndex: \"var(--toast-z-index, 5500)\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin,\n    top,\n    bottom,\n    right,\n    left\n  };\n}\nexport { findById, findToast, getToastPosition, isVisible, getToastStyle, getToastListStyle };","map":{"version":3,"mappings":";;;AAOO,IAAMA,WAAW,CAACC,KAAqBC,OAC5CD,IAAIE,KAAMC,SAAUA,MAAMF,OAAOA,EAAE;AAM9B,SAASG,UAAUC,QAAoBJ,IAAa;EACzD,MAAMK,WAAWC,iBAAiBF,QAAQJ,EAAE;EAE5C,MAAMO,QAAQF,WACVD,OAAOC,QAAQ,EAAEG,UAAWN,SAAUA,MAAMF,OAAOA,EAAE,IACrD;EAEJ,OAAO;IACLK;IACAE;EACF;AACF;AAMO,SAASD,iBAAiBF,QAAoBJ,IAAa;EAChE,WAAW,CAACK,UAAUI,MAAM,KAAKC,OAAOC,QAAQP,MAAM,GAAG;IACvD,IAAIN,SAASW,QAAQT,EAAE,GAAG;MACxB,OAAOK;IACT;EACF;AACF;AAMO,IAAMO,YAAY,CAACR,QAAoBJ,OAC5C,CAAC,CAACM,iBAAiBF,QAAQJ,EAAE;AAMxB,SAASa,cAAcR,UAA8C;EAC1E,MAAMS,WAAWT,SAASU,SAAS,OAAO;EAC1C,MAAMC,UAAUX,SAASU,SAAS,MAAM;EAExC,IAAIE,aAAa;EACjB,IAAIH,UAAUG,aAAa;EAC3B,IAAID,SAASC,aAAa;EAE1B,OAAO;IACLC,SAAS;IACTC,eAAe;IACfF;EACF;AACF;AAKO,SAASG,kBACdf,UACqB;EACrB,MAAMgB,gBAAgBhB,aAAa,SAASA,aAAa;EACzD,MAAMiB,SAASD,gBAAgB,WAAW;EAE1C,MAAME,MAAMlB,SAASU,SAAS,KAAK,IAC/B,kCACA;EACJ,MAAMS,SAASnB,SAASU,SAAS,QAAQ,IACrC,qCACA;EACJ,MAAMU,QAAQ,CAACpB,SAASU,SAAS,MAAM,IACnC,oCACA;EACJ,MAAMW,OAAO,CAACrB,SAASU,SAAS,OAAO,IACnC,mCACA;EAEJ,OAAO;IACLV,UAAU;IACVsB,QAAQ;IACRC,eAAe;IACfV,SAAS;IACTC,eAAe;IACfG;IACAC;IACAC;IACAC;IACAC;EACF;AACF","names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","values","Object","entries","isVisible","getToastStyle","isRighty","includes","isLefty","alignItems","display","flexDirection","getToastListStyle","isTopOrBottom","margin","top","bottom","right","left","zIndex","pointerEvents"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/toast/src/toast.utils.ts"],"sourcesContent":["import type { ToastPosition } from \"./toast.placement\"\nimport type { ToastId, ToastOptions, ToastState } from \"./toast.types\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport const findById = (arr: ToastOptions[], id: ToastId) =>\n  arr.find((toast) => toast.id === id)\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id === id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport function getToastPosition(toasts: ToastState, id: ToastId) {\n  for (const [position, values] of Object.entries(toasts)) {\n    if (findById(values, id)) {\n      return position as ToastPosition\n    }\n  }\n}\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\nexport const isVisible = (toasts: ToastState, id: ToastId) =>\n  !!getToastPosition(toasts, id)\n\n/**\n * Gets the styles to be applied to a toast's container\n * based on its position in the manager\n */\nexport function getToastStyle(position: ToastPosition): React.CSSProperties {\n  const isRighty = position.includes(\"right\")\n  const isLefty = position.includes(\"left\")\n\n  let alignItems = \"center\"\n  if (isRighty) alignItems = \"flex-end\"\n  if (isLefty) alignItems = \"flex-start\"\n\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems,\n  }\n}\n\n/**\n * Compute the style of a toast based on its position\n */\nexport function getToastListStyle(\n  position: ToastPosition,\n): React.CSSProperties {\n  const isTopOrBottom = position === \"top\" || position === \"bottom\"\n  const margin = isTopOrBottom ? \"0 auto\" : undefined\n\n  const top = position.includes(\"top\")\n    ? \"env(safe-area-inset-top, 0px)\"\n    : undefined\n  const bottom = position.includes(\"bottom\")\n    ? \"env(safe-area-inset-bottom, 0px)\"\n    : undefined\n  const right = !position.includes(\"left\")\n    ? \"env(safe-area-inset-right, 0px)\"\n    : undefined\n  const left = !position.includes(\"right\")\n    ? \"env(safe-area-inset-left, 0px)\"\n    : undefined\n\n  return {\n    position: \"fixed\",\n    zIndex: \"var(--toast-z-index, 5500)\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin,\n    top,\n    bottom,\n    right,\n    left,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}