{"ast":null,"code":"'use client';\n\n// src/providers.tsx\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(EmotionThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\nfunction CSSVars(_ref) {\n  let {\n    root = \":host, :root\"\n  } = _ref;\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = get(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\nexport { ThemeProvider, CSSVars, StylesProvider, useStyles, createStylesContext, GlobalStyle };","map":{"version":3,"mappings":";;;AAAA,SAASA,oBAAoB;AAC7B,SAASC,qBAA0C;AACnD,SAASC,KAAKC,gBAAmC;AACjD,SAASC,eAAeC,KAAKC,eAAe;AAC5C,SACEC,QAEAC,iBAAiBC,4BAEZ;AACP,SAASC,eAAe;AAUpB,SACEC,KADFC;AAJG,SAASJ,cAAcK,OAAwC;EACpE,MAAM;IAAEC;IAAaC;IAAOC;EAAS,IAAIH;EACzC,MAAMI,gBAAgBP,QAAQ,MAAMP,SAASY,KAAK,GAAG,CAACA,KAAK,CAAC;EAC5D,OACE,oBAACN;IAAqBM,OAAOE;IAC3BD,8BAACE;MAAQC,MAAML;IAAA,CAAa,GAC3BE;EAAA,CACH;AAEJ;AAUO,SAASE,cAA8D;EAAA,IAAtD;IAAEC,OAAO;EAAe;EAI9C,MAAMC,WAAW,CAACD,MAAM,cAAc,EAAEE,KAAK,GAAG;EAChD,OAAO,mBAACd;IAAOe,QAASP,UAAgB;MAAE,CAACK,QAAQ,GAAGL,MAAMQ;IAAU;EAAA,CAAI;AAC5E;AAaA,IAAM,CAACC,gBAAgBC,SAAS,IAAIxB,cAElC;EACAyB,MAAM;EACNC,cACE;AACJ,CAAC;AASM,SAASC,oBACdC,eAC0B;EAC1B,OAAO5B,cAAiD;IACtDyB,MAAM,GAAGG,aAAa;IACtBF,cAAc,kFAAkFE,aAAa;EAC/G,CAAC;AACH;AAUO,SAASC,cAA2B;EACzC,MAAM;IAAEC;EAAU,IAAI/B,cAAa;EACnC,OACE,mBAACO;IACCe,QAASP,SAAe;MACtB,MAAMiB,kBAAkB3B,IAAIU,OAAO,eAAe;MAClD,MAAMkB,eAAe3B,QAAQ0B,iBAAiB;QAAEjB;QAAOgB;MAAU,CAAC;MAClE,IAAI,CAACE,cAAc,OAAO;MAC1B,MAAMX,SAASpB,IAAI+B,YAAY,EAAElB,KAAK;MACtC,OAAOO;IACT;EAAA,EACF;AAEJ","names":["useColorMode","createContext","css","toCSSVar","memoizedGet","get","runIfFn","Global","ThemeProvider","EmotionThemeProvider","useMemo","jsx","jsxs","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","selector","join","styles","__cssVars","StylesProvider","useStyles","name","errorMessage","createStylesContext","componentName","GlobalStyle","colorMode","styleObjectOrFn","globalStyles"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/system/src/providers.tsx"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { createContext, CreateContextReturn } from \"@chakra-ui/react-utils\"\nimport { css, toCSSVar, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport { useMemo } from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  cssVarsRoot?: string\n}\n\nexport function ThemeProvider(props: ThemeProviderProps): JSX.Element {\n  const { cssVarsRoot, theme, children } = props\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <CSSVars root={cssVarsRoot} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport interface CSSVarsProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  root?: string\n}\n\nexport function CSSVars({ root = \":host, :root\" }: CSSVarsProps): JSX.Element {\n  /**\n   * Append color mode selector to allow semantic tokens to change according to the color mode\n   */\n  const selector = [root, `[data-theme]`].join(\",\")\n  return <Global styles={(theme: any) => ({ [selector]: theme.__cssVars })} />\n}\n\n/**\n * @deprecated - Prefer to use `createStylesContext` to provide better error messages\n *\n * @example\n *\n * ```jsx\n * import { createStylesContext } from \"@chakra-ui/react\"\n *\n * const [StylesProvider, useStyles] = createStylesContext(\"Component\")\n * ```\n */\nconst [StylesProvider, useStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Helper function that creates context with a standardized errorMessage related to the component\n * @param componentName\n * @returns [StylesProvider, useStyles]\n */\nexport function createStylesContext(\n  componentName: string,\n): CreateStyleContextReturn {\n  return createContext<Record<string, SystemStyleObject>>({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `,\n  })\n}\n\nexport type CreateStyleContextReturn = CreateContextReturn<\n  Record<string, SystemStyleObject>\n>\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport function GlobalStyle(): JSX.Element {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}