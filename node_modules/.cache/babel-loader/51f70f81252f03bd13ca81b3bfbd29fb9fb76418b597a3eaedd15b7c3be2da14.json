{"ast":null,"code":"'use client';\n\nimport { ColorModeContext } from \"./chunk-UQDW7KKV.mjs\";\nimport { getColorModeUtils } from \"./chunk-X7ZBZ4KW.mjs\";\nimport { localStorageManager } from \"./chunk-44OWBZ77.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = () => {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"mappings":"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","names":["useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","localStorageManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","getColorModeUtils","preventTransition","resolvedValue","setColorMode","resolved","set","managerValue","toggleColorMode","context","forced","ColorModeContext","Provider","displayName","DarkMode","LightMode"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/color-mode/src/color-mode-provider.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}