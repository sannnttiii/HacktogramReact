{"ast":null,"code":"import { sizes_default } from \"./chunk-NJCYBKFH.mjs\";\nimport { runIfFn } from \"./chunk-UV3F75RF.mjs\";\n\n// src/components/avatar.ts\nimport { avatarAnatomy as parts } from \"@chakra-ui/anatomy\";\nimport { createMultiStyleConfigHelpers, cssVar, defineStyle } from \"@chakra-ui/styled-system\";\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\";\nvar {\n  definePartsStyle,\n  defineMultiStyleConfig\n} = createMultiStyleConfigHelpers(parts.keys);\nvar $border = cssVar(\"avatar-border-color\");\nvar $bg = cssVar(\"avatar-bg\");\nvar $fs = cssVar(\"avatar-font-size\");\nvar $size = cssVar(\"avatar-size\");\nvar baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\"\n  }\n});\nvar baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\"\n  }\n});\nvar baseStyleContainer = defineStyle(props => {\n  const {\n    name,\n    theme\n  } = props;\n  const bg = name ? randomColor({\n    string: name\n  }) : \"colors.gray.400\";\n  const isBgDark = isDark(bg)(theme);\n  let color = \"white\";\n  if (!isBgDark) color = \"gray.800\";\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\"\n    }\n  };\n});\nvar baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\"\n});\nvar baseStyle = definePartsStyle(props => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel\n}));\nfunction getSize(size) {\n  const themeSize = size !== \"100%\" ? sizes_default[size] : void 0;\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize != null ? themeSize : size,\n      [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`\n    },\n    excessLabel: {\n      [$size.variable]: themeSize != null ? themeSize : size,\n      [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`\n    }\n  });\n}\nvar sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\")\n};\nvar avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\"\n  }\n});\nexport { avatarTheme };","map":{"version":3,"mappings":";;;;AAAA,SAASA,iBAAiBC,aAAa;AACvC,SACEC,+BACAC,QACAC,mBACK;AACP,SAASC,QAAQC,mBAAmB;AAIpC,IAAM;EAAEC;EAAkBC;AAAuB,IAC/CN,8BAA8BD,MAAMQ,IAAI;AAE1C,IAAMC,UAAUP,OAAO,qBAAqB;AAC5C,IAAMQ,MAAMR,OAAO,WAAW;AAC9B,IAAMS,MAAMT,OAAO,kBAAkB;AACrC,IAAMU,QAAQV,OAAO,aAAa;AAElC,IAAMW,iBAAiBV,YAAY;EACjCW,cAAc;EACdC,QAAQ;EACRC,aAAaP,QAAQQ;EACrB,CAACR,QAAQS,QAAQ,GAAG;EACpBC,OAAO;IACL,CAACV,QAAQS,QAAQ,GAAG;EACtB;AACF,CAAC;AAED,IAAME,uBAAuBjB,YAAY;EACvCkB,IAAIX,IAAIO;EACRK,UAAUX,IAAIM;EACdM,OAAOX,MAAMK;EACbO,QAAQZ,MAAMK;EACdQ,YAAY;EACZ,CAACf,IAAIQ,QAAQ,GAAG;EAChBC,OAAO;IACL,CAACT,IAAIQ,QAAQ,GAAG;EAClB;AACF,CAAC;AAED,IAAMQ,qBAAqBvB,YAAawB,SAAU;EAChD,MAAM;IAAEC;IAAMC;EAAM,IAAIF;EACxB,MAAMN,KAAKO,OAAOvB,YAAY;IAAEyB,QAAQF;EAAK,CAAC,IAAI;EAClD,MAAMG,WAAW3B,OAAOiB,EAAE,EAAEQ,KAAK;EAEjC,IAAIG,QAAQ;EACZ,IAAI,CAACD,UAAUC,QAAQ;EAEvB,OAAO;IACLX,IAAIX,IAAIO;IACRK,UAAUX,IAAIM;IACde;IACAhB,aAAaP,QAAQQ;IACrBgB,eAAe;IACfV,OAAOX,MAAMK;IACbO,QAAQZ,MAAMK;IACd,wBAAwB;MACtB,CAACP,IAAIQ,QAAQ,GAAGG;IAClB;IACA,CAACZ,QAAQS,QAAQ,GAAG;IACpBC,OAAO;MACL,CAACV,QAAQS,QAAQ,GAAG;IACtB;EACF;AACF,CAAC;AAED,IAAMgB,iBAAiB/B,YAAY;EACjCmB,UAAUX,IAAIM;EACdQ,YAAY;AACd,CAAC;AAED,IAAMU,YAAY7B,iBAAkBqB,UAAW;EAC7CS,OAAOC,QAAQxB,gBAAgBc,KAAK;EACpCW,aAAaD,QAAQjB,sBAAsBO,KAAK;EAChDY,WAAWF,QAAQX,oBAAoBC,KAAK;EAC5Ca,OAAON;AACT,EAAE;AAEF,SAASO,QAAQC,MAAwC;EACvD,MAAMC,YAAYD,SAAS,SAASE,cAAWF,IAAI,IAAI;EACvD,OAAOpC,iBAAiB;IACtBiC,WAAW;MACT,CAAC3B,MAAMM,QAAQ,GAAGyB,gCAAaD;MAC/B,CAAC/B,IAAIO,QAAQ,GAAG,QAAQyB,gCAAaD,IAAI;IAC3C;IACAJ,aAAa;MACX,CAAC1B,MAAMM,QAAQ,GAAGyB,gCAAaD;MAC/B,CAAC/B,IAAIO,QAAQ,GAAG,QAAQyB,gCAAaD,IAAI;IAC3C;EACF,CAAC;AACH;AAEA,IAAMG,QAAQ;EACZ,OAAOJ,QAAQ,CAAC;EAChBK,IAAIL,QAAQ,CAAC;EACbM,IAAIN,QAAQ,CAAC;EACbO,IAAIP,QAAQ,EAAE;EACdQ,IAAIR,QAAQ,EAAE;EACdS,IAAIT,QAAQ,EAAE;EACd,OAAOA,QAAQ,EAAE;EACjBU,MAAMV,QAAQ,MAAM;AACtB;AAEO,IAAMW,cAAc7C,uBAAuB;EAChD4B;EACAU;EACAQ,cAAc;IACZX,MAAM;EACR;AACF,CAAC","names":["avatarAnatomy","parts","createMultiStyleConfigHelpers","cssVar","defineStyle","isDark","randomColor","definePartsStyle","defineMultiStyleConfig","keys","$border","$bg","$fs","$size","baseStyleBadge","borderRadius","border","borderColor","reference","variable","_dark","baseStyleExcessLabel","bg","fontSize","width","height","lineHeight","baseStyleContainer","props","name","theme","string","isBgDark","color","verticalAlign","baseStyleLabel","baseStyle","badge","runIfFn","excessLabel","container","label","getSize","size","themeSize","sizes_default","sizes","xs","sm","md","lg","xl","full","avatarTheme","defaultProps"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/theme/src/components/avatar.ts"],"sourcesContent":["import { avatarAnatomy as parts } from \"@chakra-ui/anatomy\"\nimport {\n  createMultiStyleConfigHelpers,\n  cssVar,\n  defineStyle,\n} from \"@chakra-ui/styled-system\"\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\nimport { runIfFn } from \"../utils/run-if-fn\"\n\nconst { definePartsStyle, defineMultiStyleConfig } =\n  createMultiStyleConfigHelpers(parts.keys)\n\nconst $border = cssVar(\"avatar-border-color\")\nconst $bg = cssVar(\"avatar-bg\")\nconst $fs = cssVar(\"avatar-font-size\")\nconst $size = cssVar(\"avatar-size\")\n\nconst baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\",\n  },\n})\n\nconst baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\",\n  },\n})\n\nconst baseStyleContainer = defineStyle((props) => {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"colors.gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg,\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\",\n    },\n  }\n})\n\nconst baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\",\n})\n\nconst baseStyle = definePartsStyle((props) => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel,\n}))\n\nfunction getSize(size: keyof typeof themeSizes | \"100%\") {\n  const themeSize = size !== \"100%\" ? themeSizes[size] : undefined\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n  })\n}\n\nconst sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\"),\n}\n\nexport const avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\",\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}