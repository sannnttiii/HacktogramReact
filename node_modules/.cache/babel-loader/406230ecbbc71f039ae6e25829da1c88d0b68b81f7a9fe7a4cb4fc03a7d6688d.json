{"ast":null,"code":"'use client';\n\nimport { useRadioGroupContext } from \"./chunk-FESYGSQT.mjs\";\n\n// src/use-radio.ts\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../visually-hidden/src/visually-hidden.style.ts\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\n\n// src/use-radio.ts\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\nfunction useRadio() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props;\n  const uuid = `radio-${useId()}`;\n  const formControl = useFormControlContext();\n  const group = useRadioGroupContext();\n  const isWithinRadioGroup = !!group || !!dataRadioGroup;\n  const isWithinFormControl = !!formControl;\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  const isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  const isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  const isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  const isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovering] = useState(false);\n  const [isActive, setActive] = useState(false);\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked));\n  const isControlled = typeof isCheckedProp !== \"undefined\";\n  const isChecked = isControlled ? isCheckedProp : isCheckedState;\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  const getRadioProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovering(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovering(false))\n    };\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, isFocusVisible]);\n  const {\n    onFocus,\n    onBlur\n  } = formControl != null ? formControl : {};\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const trulyDisabled = isDisabled && !isFocusable;\n    return {\n      ...props2,\n      id,\n      ref,\n      type: \"radio\",\n      name,\n      value,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props2.onBlur, () => setFocused(false)),\n      onFocus: callAllHandlers(onFocus, props2.onFocus, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-required\": ariaAttr(isRequired),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-describedby\": ariaDescribedBy,\n      style: visuallyHiddenStyle\n    };\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid, ariaDescribedBy]);\n  const getLabelProps = function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  };\n  const getRootProps = function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  };\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nexport { useRadio };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,6BAA6B;AAEtC,SAASC,UAAUC,iBAAiBC,gBAAgB;;;ACE7C,IAAMC,sBAA2C;EACtDC,QAAQ;EACRC,MAAM;EACNC,QAAQ;EACRC,OAAO;EACPC,QAAQ;EACRC,SAAS;EACTC,UAAU;EACVC,YAAY;EACZC,UAAU;AACZ;;;ADVA,SAASC,yBAAyB;AAClC,SAASC,aAAaC,WAAWC,UAAUC,aAAa;AAgGjD,SAASC,WAAoC;EAAA,IAA3BC,4EAAuB,CAAC;EAC/C,MAAM;IACJC;IACAC,WAAWC;IACXC;IACAC,YAAYC;IACZC,YAAYC;IACZC,YAAYC;IACZC;IACAC,WAAWC;IACXC;IACAC;IACAC,IAAIC;IACJ,mBAAmBC;IACnB,oBAAoBC;IACpB,GAAGC;EACL,IAAIpB;EAEJ,MAAMqB,OAAO,SAASvB,OAAO;EAE7B,MAAMwB,cAAc1C,uBAAsB;EAC1C,MAAM2C,QAAQC,sBAAqB;EAEnC,MAAMC,qBAAqB,CAAC,CAACF,SAAS,CAAC,CAACL;EACxC,MAAMQ,sBAAsB,CAAC,CAACJ;EAE9B,IAAIN,KAAKU,uBAAuB,CAACD,qBAAqBH,YAAYN,KAAKK;EACvEL,KAAKC,0BAAUD;EAEf,MAAMX,aAAaC,0CAAkBgB,2CAAajB;EAClD,MAAME,aAAaC,0CAAkBc,2CAAaf;EAClD,MAAME,aAAaC,0CAAkBY,2CAAab;EAClD,MAAMG,YAAYC,wCAAiBS,2CAAaV;EAEhD,MAAM,CAACe,gBAAgBC,iBAAiB,IAAI/B,SAAS,KAAK;EAC1D,MAAM,CAACgC,WAAWC,UAAU,IAAIjC,SAAS,KAAK;EAC9C,MAAM,CAACkC,WAAWC,WAAW,IAAInC,SAAS,KAAK;EAC/C,MAAM,CAACoC,UAAUC,SAAS,IAAIrC,SAAS,KAAK;EAE5C,MAAM,CAACsC,gBAAgBC,UAAU,IAAIvC,SAASwC,QAAQpC,cAAc,CAAC;EAErE,MAAMqC,eAAe,OAAOnC,kBAAkB;EAC9C,MAAMD,YAAYoC,eAAenC,gBAAgBgC;EAEjDvC,UAAU,MAAM;IACd,OAAOF,kBAAkBkC,iBAAiB;EAC5C,GAAG,EAAE;EAEL,MAAMW,eAAe5C,YAClB6C,SAA+C;IAC9C,IAAIjC,cAAcF,YAAY;MAC5BmC,MAAMC,gBAAe;MACrB;IACF;IAEA,IAAI,CAACH,cAAc;MACjBF,WAAWI,MAAME,OAAOC,OAAO;IACjC;IAEAhC,qCAAW6B;EACb,GACA,CAACF,cAAcjC,YAAYE,YAAYI,QAAQ,EACjD;EAEA,MAAMiC,YAAYjD,YACf6C,SAA+B;IAC9B,IAAIA,MAAMK,QAAQ,KAAK;MACrBX,UAAU,IAAI;IAChB;EACF,GACA,CAACA,SAAS,EACZ;EAEA,MAAMY,UAAUnD,YACb6C,SAA+B;IAC9B,IAAIA,MAAMK,QAAQ,KAAK;MACrBX,UAAU,KAAK;IACjB;EACF,GACA,CAACA,SAAS,EACZ;EAEA,MAAMa,gBAA4BpD,YAChC;IAAA,IAACK,6EAAQ,CAAC;IAAA,IAAGgD,0EAAM;IAAA,OAAU;MAC3B,GAAGhD;MACHgD;MACA,eAAejE,SAASkD,QAAQ;MAChC,cAAclD,SAASgD,SAAS;MAChC,iBAAiBhD,SAASsB,UAAU;MACpC,gBAAgBtB,SAAS6B,SAAS;MAClC,gBAAgB7B,SAASmB,SAAS;MAClC,cAAcnB,SAAS8C,SAAS;MAChC,sBAAsB9C,SAAS8C,aAAaF,cAAc;MAC1D,iBAAiB5C,SAASwB,UAAU;MACpC,eAAe;MACf0C,aAAanE,gBAAgBkB,OAAMiD,aAAa,MAAMf,UAAU,IAAI,CAAC;MACrEgB,WAAWpE,gBAAgBkB,OAAMkD,WAAW,MAAMhB,UAAU,KAAK,CAAC;MAClEiB,cAAcrE,gBAAgBkB,OAAMmD,cAAc,MAChDnB,YAAY,IAAI,EAClB;MACAoB,cAActE,gBAAgBkB,OAAMoD,cAAc,MAChDpB,YAAY,KAAK;IAErB;EAAA,GACA,CACEC,UACAF,WACA1B,YACAO,WACAV,WACA2B,WACAtB,YACAoB,eACF,CACF;EAEA,MAAM;IAAE0B;IAASC;EAAO,IAAIhC,oCAAe,CAAC;EAE5C,MAAMiC,gBACJ5D,YACE,YAA4B;IAAA,IAA3BK,6EAAQ,CAAC;IAAA,IAAGgD,0EAAM;IACjB,MAAMQ,gBAAgBnD,cAAc,CAACD;IAErC,OAAO;MACL,GAAGJ;MACHgB;MACAgC;MACAS,MAAM;MACN3C;MACAC;MACAJ,UAAU7B,gBAAgBkB,OAAMW,UAAU4B,YAAY;MACtDe,QAAQxE,gBAAgBwE,QAAQtD,OAAMsD,QAAQ,MAC5CxB,WAAW,KAAK,EAClB;MACAuB,SAASvE,gBAAgBuE,SAASrD,OAAMqD,SAAS,MAC/CvB,WAAW,IAAI,EACjB;MACAc,WAAW9D,gBAAgBkB,OAAM4C,WAAWA,SAAS;MACrDE,SAAShE,gBAAgBkB,OAAM8C,SAASA,OAAO;MAC/CH,SAASzC;MACTwD,UAAUF;MACVG,UAAUpD;MACVqD,UAAUnD;MACV,gBAAgB5B,SAAS+B,SAAS;MAClC,iBAAiB/B,SAAS2E,aAAa;MACvC,iBAAiB3E,SAAS4B,UAAU;MACpC,iBAAiB1B,SAASwB,UAAU;MACpC,oBAAoBY;MACpB0C,OAAO7E;IACT;EACF,GACA,CACEqB,YACAD,aACAY,IACAF,MACAC,OACAwB,cACAe,QACAD,SACAT,WACAE,SACA5C,WACAK,YACAE,YACAG,WACAO,gBACF,CACF;EAEF,MAAM2C,gBAA4B;IAAA,IAAC9D,6EAAQ,CAAC;IAAA,IAAGgD,0EAAM;IAAA,OAAU;MAC7D,GAAGhD;MACHgD;MACAC,aAAanE,gBAAgBkB,OAAMiD,aAAac,SAAS;MACzD,iBAAiBhF,SAASsB,UAAU;MACpC,gBAAgBtB,SAASmB,SAAS;MAClC,gBAAgBnB,SAAS6B,SAAS;IACpC;EAAA;EAEA,MAAMoD,eAA2B,UAAChE;IAAAA,IAAOgD,0EAAM;IAAA,OAAU;MACvD,GAAGhD;MACHgD;MACA,iBAAiBjE,SAASsB,UAAU;MACpC,gBAAgBtB,SAASmB,SAAS;MAClC,gBAAgBnB,SAAS6B,SAAS;IACpC;EAAA;EAEA,MAAMqD,QAAoB;IACxBrD;IACAiB;IACA3B;IACA+B;IACAF;IACA1B;IACAE;IACAE;EACF;EAEA,OAAO;IACLwD;IAAA;AAAA;AAAA;IAIAC,kBAAkBnB;IAClBA;IACAQ;IACAO;IACAE;IACA5C;EACF;AACF;AAKA,SAAS2C,UAAUvB,OAA6B;EAC9CA,MAAMC,gBAAe;EACrBD,MAAM2B,iBAAgB;AACxB","names":["useFormControlContext","ariaAttr","callAllHandlers","dataAttr","visuallyHiddenStyle","border","clip","height","width","margin","padding","overflow","whiteSpace","position","trackFocusVisible","useCallback","useEffect","useState","useId","useRadio","props","defaultChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isDisabledProp","isReadOnly","isReadOnlyProp","isRequired","isRequiredProp","onChange","isInvalid","isInvalidProp","name","value","id","idProp","dataRadioGroup","ariaDescribedBy","htmlProps","uuid","formControl","group","useRadioGroupContext","isWithinRadioGroup","isWithinFormControl","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovering","isActive","setActive","isCheckedState","setChecked","Boolean","isControlled","handleChange","event","preventDefault","target","checked","onKeyDown","key","onKeyUp","getRadioProps","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","trulyDisabled","type","disabled","readOnly","required","style","getLabelProps","stopEvent","getRootProps","state","getCheckboxProps","stopPropagation"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/radio/src/use-radio.ts","/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/visually-hidden/src/visually-hidden.style.ts"],"sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   *\n   * @default false\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @default false\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n  /**\n   * Refers to the `id` of the element that labels the radio element.\n   */\n  \"aria-describedby\"?: string\n}\n\nexport interface RadioState {\n  isInvalid: boolean | undefined\n  isFocused: boolean\n  isChecked: boolean\n  isActive: boolean\n  isHovered: boolean\n  isDisabled: boolean | undefined\n  isReadOnly: boolean | undefined\n  isRequired: boolean | undefined\n}\n\n/**\n * `useRadio` is a custom hook used to provide radio functionality, as well as state and focus management to custom radio components when using it.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio\n */\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const uuid = `radio-${useId()}`\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovering] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const isControlled = typeof isCheckedProp !== \"undefined\"\n  const isChecked = isControlled ? isCheckedProp : isCheckedState\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  const getRadioProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n        setHovering(true),\n      ),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n        setHovering(false),\n      ),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      isFocusVisible,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => {\n        const trulyDisabled = isDisabled && !isFocusable\n\n        return {\n          ...props,\n          id,\n          ref,\n          type: \"radio\",\n          name,\n          value,\n          onChange: callAllHandlers(props.onChange, handleChange),\n          onBlur: callAllHandlers(onBlur, props.onBlur, () =>\n            setFocused(false),\n          ),\n          onFocus: callAllHandlers(onFocus, props.onFocus, () =>\n            setFocused(true),\n          ),\n          onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n          onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n          checked: isChecked,\n          disabled: trulyDisabled,\n          readOnly: isReadOnly,\n          required: isRequired,\n          \"aria-invalid\": ariaAttr(isInvalid),\n          \"aria-disabled\": ariaAttr(trulyDisabled),\n          \"aria-required\": ariaAttr(isRequired),\n          \"data-readonly\": dataAttr(isReadOnly),\n          \"aria-describedby\": ariaDescribedBy,\n          style: visuallyHiddenStyle,\n        }\n      },\n      [\n        isDisabled,\n        isFocusable,\n        id,\n        name,\n        value,\n        handleChange,\n        onBlur,\n        onFocus,\n        onKeyDown,\n        onKeyUp,\n        isChecked,\n        isReadOnly,\n        isRequired,\n        isInvalid,\n        ariaDescribedBy,\n      ],\n    )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const getRootProps: PropGetter = (props, ref = null) => ({\n    ...props,\n    ref,\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const state: RadioState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the radio label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n","/**\n * Styles to visually hide an element\n * but make it accessible to screen-readers\n */\nexport const visuallyHiddenStyle: React.CSSProperties = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}