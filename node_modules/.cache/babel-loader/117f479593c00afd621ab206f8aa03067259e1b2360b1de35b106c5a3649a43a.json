{"ast":null,"code":"'use client';\n\nimport { useEventListener } from \"./chunk-7JEV5YKL.mjs\";\n\n// src/use-animation-state.ts\nimport { getOwnerWindow } from \"@chakra-ui/utils\";\nimport { useEffect, useState } from \"react\";\nfunction useAnimationState(props) {\n  const {\n    isOpen,\n    ref\n  } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(\"animationend\", () => {\n    setMounted(isOpen);\n  }, () => ref.current);\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n    onComplete() {\n      var _a;\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n  };\n}\nexport { useAnimationState };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,sBAAsB;AAC/B,SAASC,WAAWC,gBAAgB;AAQ7B,SAASC,kBAAkBC,OAA+B;EAC/D,MAAM;IAAEC;IAAQC;EAAI,IAAIF;EAExB,MAAM,CAACG,SAASC,UAAU,IAAIN,SAASG,MAAM;EAC7C,MAAM,CAACI,MAAMC,OAAO,IAAIR,SAAS,KAAK;EAEtCD,UAAU,MAAM;IACd,IAAI,CAACQ,MAAM;MACTD,WAAWH,MAAM;MACjBK,QAAQ,IAAI;IACd;EACF,GAAG,CAACL,QAAQI,MAAMF,OAAO,CAAC;EAE1BI,iBACE,gBACA,MAAM;IACJH,WAAWH,MAAM;EACnB,GACA,MAAMC,IAAIM,QACZ;EAEA,MAAMC,SAASR,SAAS,QAAQ,CAACE;EAEjC,OAAO;IACLO,SAAS,CAACD;IACVE,aAAa;MAlCjB;MAmCM,MAAMC,MAAMhB,eAAeM,IAAIM,OAAO;MACtC,MAAMK,MAAM,IAAID,IAAIE,YAAY,gBAAgB;QAAEC,SAAS;MAAK,CAAC;MACjE,UAAIP,YAAJ,mBAAaQ,cAAcH;IAC7B;EACF;AACF","names":["getOwnerWindow","useEffect","useState","useAnimationState","props","isOpen","ref","mounted","setMounted","once","setOnce","useEventListener","current","hidden","present","onComplete","win","evt","CustomEvent","bubbles","dispatchEvent"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-animation-state.ts"],"sourcesContent":["import { getOwnerWindow } from \"@chakra-ui/utils\"\nimport { useEffect, useState } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\n\nexport type UseAnimationStateProps = {\n  isOpen: boolean\n  ref: React.RefObject<HTMLElement>\n}\n\nexport function useAnimationState(props: UseAnimationStateProps) {\n  const { isOpen, ref } = props\n\n  const [mounted, setMounted] = useState(isOpen)\n  const [once, setOnce] = useState(false)\n\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen)\n      setOnce(true)\n    }\n  }, [isOpen, once, mounted])\n\n  useEventListener(\n    \"animationend\",\n    () => {\n      setMounted(isOpen)\n    },\n    () => ref.current,\n  )\n\n  const hidden = isOpen ? false : !mounted\n\n  return {\n    present: !hidden,\n    onComplete() {\n      const win = getOwnerWindow(ref.current)\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true })\n      ref.current?.dispatchEvent(evt)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}