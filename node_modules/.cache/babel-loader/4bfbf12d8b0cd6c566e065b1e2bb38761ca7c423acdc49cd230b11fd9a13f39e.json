{"ast":null,"code":"'use client';\n\nimport { useFormControlContext, useFormControlStyles } from \"./chunk-DFWC5MHP.mjs\";\n\n// src/form-label.tsx\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */jsxs(chakra.label, {\n    ...ownProps,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  const className = cx(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */jsx(chakra.span, {\n    ...(field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\nexport { FormLabel, RequiredIndicator };","map":{"version":3,"mappings":";;;;;AAAA,SACEA,QACAC,YAEAC,kBAEAC,sBACK;AACP,SAASC,UAAU;AAkCK,cASpBC,YAToB;AAVjB,IAAMC,YAAYL,WAAoC,SAASK,WACpEC,aACAC,KACA;EAnCF;EAoCE,MAAMC,SAASN,eAAe,aAAaI,WAAW;EACtD,MAAMG,QAAQR,iBAAiBK,WAAW;EAE1C,MAAM;IACJI;IACAC;IACAC,oBAAoB,mBAACC,qBAAkB;IACvCC,oBAAoB;IACpB,GAAGC;EACL,IAAIN;EAEJ,MAAMO,QAAQC,uBAAsB;EACpC,MAAMC,YAAWC,oCAAOC,cAAcL,MAAMR,SAA3B,YAAmC;IAAEA;IAAK,GAAGQ;EAAK;EAEnE,OACE,oBAAChB,OAAOsB,OAAP;IACE,GAAGH;IACJR,WAAWP,GAAG,sBAAsBM,MAAMC,SAAS;IACnDY,OAAO;MACLC,SAAS;MACTC,WAAW;MACX,GAAGhB;IACL;IAECG,sBACAK,+BAAOS,cAAab,oBAAoBE;EAAA,EAC3C;AAEJ,CAAC;AAEDT,UAAUqB,cAAc;AAQjB,IAAMb,oBAAoBb,WAC/B,SAASa,mBAAkBJ,OAAOF,KAAK;EACrC,MAAMS,QAAQC,uBAAsB;EACpC,MAAMT,SAASmB,sBAAqB;EAEpC,IAAI,EAACX,+BAAOS,aAAY,OAAO;EAE/B,MAAMf,YAAYP,GAAG,mCAAmCM,MAAMC,SAAS;EAEvE,OACE,mBAACX,OAAO6B,MAAP;IACE,IAAGZ,+BAAOa,0BAA0BpB,OAAOF;IAC5Ce,OAAOd,OAAOI;IACdF;EAAA,EACF;AAEJ,EACF;AAEAG,kBAAkBa,cAAc","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","jsxs","FormLabel","passedProps","ref","styles","props","className","children","requiredIndicator","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","_a","getLabelProps","label","__css","display","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/form-control/src/form-label.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}