{"ast":null,"code":"'use client';\n\n// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"mappings":";;;AAAA,SAASA,sBAAsB;AAC/B,SAASC,4BAA4B;AACrC,SAASC,gBAAgB;AACzB,SAASC,mBAAmB;AAG5B,SAASC,aAAaC,OAAmD;EACvE,OAAOA,SAASH,SAASG,KAAK,KAAKH,SAASG,MAAMC,MAAM;AAC1D;AAWO,SAASC,mBAAoD;EAAA,IAAnCC,4EAA+B,CAAC;EAC/D,MAAM;IACJC;IACAJ,OAAOK;IACPC;IACAC;IACAC;EACF,IAAIL;EAEJ,MAAMM,eAAed,eAAeW,QAAQ;EAE5C,MAAM,CAACN,OAAOU,QAAQ,IAAId,qBAAqB;IAC7CI,OAAOK;IACPD,cAAcA,gBAAgB,EAAC;IAC/BE,UAAUG;EACZ,CAAC;EAED,MAAME,eAAeb,YAClBc,gBAA+B;IAC9B,IAAI,CAACZ,OAAO;IAEZ,MAAMa,YAAYd,aAAaa,YAAY,IACvCA,aAAaX,OAAOa,UACpB,CAACd,MAAMe,SAASH,YAAY;IAEhC,MAAMI,gBAAgBjB,aAAaa,YAAY,IAC3CA,aAAaX,OAAOD,QACpBY;IAEJ,MAAMK,YAAYJ,YACd,CAAC,GAAGb,OAAOgB,aAAa,IACxBhB,MAAMkB,OAAQC,KAAMC,OAAOD,CAAC,MAAMC,OAAOJ,aAAa,CAAC;IAE3DN,SAASO,SAAS;EACpB,GACA,CAACP,UAAUV,KAAK,EAClB;EAEA,MAAMqB,mBAAmBvB,YACvB,YAAqC;IAAA,IAApCK,6EAA6B,CAAC;IAC7B,MAAMmB,aAAad,WAAW,YAAY;IAC1C,OAAO;MACL,GAAGL;MACH,CAACmB,UAAU,GAAGtB,MAAMuB,KAAMC,OAAQJ,OAAOjB,OAAMH,KAAK,MAAMoB,OAAOI,GAAG,CAAC;MACrElB,UAAUK;IACZ;EACF,GACA,CAACA,cAAcH,UAAUR,KAAK,EAChC;EAEA,OAAO;IACLA;IACAO;IACAD,UAAUK;IACVD;IACAW;EACF;AACF","names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","checkedKey","some","val"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/checkbox/src/use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useCallback } from \"react\"\nimport { EventOrValue, UseCheckboxGroupProps } from \"./checkbox-types\"\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Record<string, any> = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.some((val) => String(props.value) === String(val)),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}