{"ast":null,"code":"'use client';\n\nimport { useFormControlContext } from \"./chunk-DFWC5MHP.mjs\";\n\n// src/use-form-control.ts\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nfunction useFormControl(props) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props);\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  };\n}\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n  const field = useFormControlContext();\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props;\n  const labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  };\n}\nexport { useFormControl, useFormControlProps };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,UAAUC,uBAAuB;AAuBnC,SAASC,eACdC,OACA;EACA,MAAM;IAAEC;IAAYC;IAAWC;IAAYC;IAAY,GAAGC;EAAK,IAC7DC,oBAAoBN,KAAK;EAE3B,OAAO;IACL,GAAGK;IACHE,UAAUN;IACVO,UAAUL;IACVM,UAAUL;IACV,gBAAgBP,SAASK,SAAS;IAClC,iBAAiBL,SAASO,UAAU;IACpC,iBAAiBP,SAASM,UAAU;EACtC;AACF;AAKO,SAASG,oBACdN,OACA;EA7CF;EA8CE,MAAMU,QAAQC,uBAAsB;EAEpC,MAAM;IACJC;IACAL;IACAC;IACAC;IACAL;IACAF;IACAC;IACAF;IACAY;IACAC;IACA,GAAGT;EACL,IAAIL;EAEJ,MAAMe,WAAqBf,MAAM,kBAAkB,IAC/C,CAACA,MAAM,kBAAkB,CAAC,IAC1B,EAAC;EAGL,KAAIU,+BAAOM,qBAAmBN,+BAAOR,YAAW;IAC9Ca,SAASE,KAAKP,MAAMQ,UAAU;EAChC;EAEA,IAAIR,+BAAOS,aAAa;IACtBJ,SAASE,KAAKP,MAAMU,UAAU;EAChC;EAEA,OAAO;IACL,GAAGf;IACH,oBAAoBU,SAASM,KAAK,GAAG,KAAK;IAC1CT,IAAIA,kBAAMF,+BAAOE;IACjBX,aAAYqB,mCAAYrB,eAAZ,YAA0BS,+BAAOT;IAC7CE,aAAYoB,mCAAYpB,eAAZ,YAA0BO,+BAAOP;IAC7CC,aAAYoB,mCAAYpB,eAAZ,YAA0BM,+BAAON;IAC7CF,WAAWA,gCAAaQ,+BAAOR;IAC/BW,SAASf,gBAAgBY,+BAAOG,SAASA,OAAO;IAChDC,QAAQhB,gBAAgBY,+BAAOI,QAAQA,MAAM;EAC/C;AACF","names":["ariaAttr","callAllHandlers","useFormControl","props","isDisabled","isInvalid","isReadOnly","isRequired","rest","useFormControlProps","disabled","readOnly","required","field","useFormControlContext","id","onFocus","onBlur","labelIds","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","join","_a","_b","_c"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/form-control/src/use-form-control.ts"],"sourcesContent":["import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}