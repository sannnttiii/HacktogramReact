{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return node => {\n    refs.forEach(ref => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport { assignRef, mergeRefs, useMergeRefs };","map":{"version":3,"mappings":";;;AAAA,SAASA,eAAe;AAIjB,SAASC,UACdC,KACAC,OACA;EACA,IAAID,OAAO,MAAM;EAEjB,IAAI,OAAOA,QAAQ,YAAY;IAC7BA,IAAIC,KAAK;IACT;EACF;EAEA,IAAI;IACFD,IAAIE,UAAUD;EAChB,SAASE,OAAP;IACA,MAAM,IAAIC,MAAM,wBAAwBH,kBAAkBD,MAAM;EAClE;AACF;AAEO,SAASK,YAA0D;EAAA,kCAA1CC;IAAAA;EAAA;EAC9B,OAAQC,QAAmB;IACzBD,KAAKE,QAASR,OAAQ;MACpBD,UAAUC,KAAKO,IAAI;IACrB,CAAC;EACH;AACF;AAEO,SAASE,eAA6D;EAAA,mCAA1CH;IAAAA;EAAA;EAEjC,OAAOR,QAAQ,MAAMO,UAAU,GAAGC,IAAI,GAAGA,IAAI;AAC/C","names":["useMemo","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}