{"ast":null,"code":"'use client';\n\n// src/slider-utils.ts\nfunction getIds(id) {\n  return {\n    root: `slider-root-${id}`,\n    getThumb: i => `slider-thumb-${id}-${i}`,\n    getInput: i => `slider-input-${id}-${i}`,\n    track: `slider-track-${id}`,\n    innerTrack: `slider-filled-track-${id}`,\n    getMarker: i => `slider-marker-${id}-${i}`,\n    output: `slider-output-${id}`\n  };\n}\nfunction orient(options) {\n  const {\n    orientation,\n    vertical,\n    horizontal\n  } = options;\n  return orientation === \"vertical\" ? vertical : horizontal;\n}\nvar zeroSize = {\n  width: 0,\n  height: 0\n};\nvar normalize = a => a || zeroSize;\nfunction getStyles(options) {\n  const {\n    orientation,\n    thumbPercents,\n    thumbRects,\n    isReversed\n  } = options;\n  const getThumbStyle = i => {\n    var _a;\n    const rect = (_a = thumbRects[i]) != null ? _a : zeroSize;\n    return {\n      position: \"absolute\",\n      userSelect: \"none\",\n      WebkitUserSelect: \"none\",\n      MozUserSelect: \"none\",\n      msUserSelect: \"none\",\n      touchAction: \"none\",\n      ...orient({\n        orientation,\n        vertical: {\n          bottom: `calc(${thumbPercents[i]}% - ${rect.height / 2}px)`\n        },\n        horizontal: {\n          left: `calc(${thumbPercents[i]}% - ${rect.width / 2}px)`\n        }\n      })\n    };\n  };\n  const size = orientation === \"vertical\" ? thumbRects.reduce((a, b) => normalize(a).height > normalize(b).height ? a : b, zeroSize) : thumbRects.reduce((a, b) => normalize(a).width > normalize(b).width ? a : b, zeroSize);\n  const rootStyle = {\n    position: \"relative\",\n    touchAction: \"none\",\n    WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\n    userSelect: \"none\",\n    outline: 0,\n    ...orient({\n      orientation,\n      vertical: size ? {\n        paddingLeft: size.width / 2,\n        paddingRight: size.width / 2\n      } : {},\n      horizontal: size ? {\n        paddingTop: size.height / 2,\n        paddingBottom: size.height / 2\n      } : {}\n    })\n  };\n  const trackStyle = {\n    position: \"absolute\",\n    ...orient({\n      orientation,\n      vertical: {\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        height: \"100%\"\n      },\n      horizontal: {\n        top: \"50%\",\n        transform: \"translateY(-50%)\",\n        width: \"100%\"\n      }\n    })\n  };\n  const isSingleThumb = thumbPercents.length === 1;\n  const fallback = [0, isReversed ? 100 - thumbPercents[0] : thumbPercents[0]];\n  const range = isSingleThumb ? fallback : thumbPercents;\n  let start = range[0];\n  if (!isSingleThumb && isReversed) {\n    start = 100 - start;\n  }\n  const percent = Math.abs(range[range.length - 1] - range[0]);\n  const innerTrackStyle = {\n    ...trackStyle,\n    ...orient({\n      orientation,\n      vertical: isReversed ? {\n        height: `${percent}%`,\n        top: `${start}%`\n      } : {\n        height: `${percent}%`,\n        bottom: `${start}%`\n      },\n      horizontal: isReversed ? {\n        width: `${percent}%`,\n        right: `${start}%`\n      } : {\n        width: `${percent}%`,\n        left: `${start}%`\n      }\n    })\n  };\n  return {\n    trackStyle,\n    innerTrackStyle,\n    rootStyle,\n    getThumbStyle\n  };\n}\nfunction getIsReversed(options) {\n  const {\n    isReversed,\n    direction,\n    orientation\n  } = options;\n  if (direction === \"ltr\" || orientation === \"vertical\") {\n    return isReversed;\n  }\n  return !isReversed;\n}\nexport { getIds, orient, getStyles, getIsReversed };","map":{"version":3,"mappings":";;;AAAO,SAASA,OAAOC,IAAqB;EAC1C,OAAO;IACLC,MAAM,eAAeD;IACrBE,UAAWC,KAAc,gBAAgBH,MAAMG;IAC/CC,UAAWD,KAAc,gBAAgBH,MAAMG;IAC/CE,OAAO,gBAAgBL;IACvBM,YAAY,uBAAuBN;IACnCO,WAAYJ,KAAc,iBAAiBH,MAAMG;IACjDK,QAAQ,iBAAiBR;EAC3B;AACF;AAIO,SAASS,OAAOC,SAIpB;EACD,MAAM;IAAEC;IAAaC;IAAUC;EAAW,IAAIH;EAC9C,OAAOC,gBAAgB,aAAaC,WAAWC;AACjD;AAIA,IAAMC,WAAiB;EAAEC,OAAO;EAAGC,QAAQ;AAAE;AAE7C,IAAMC,YAAaC,KAAwBA,KAAKJ;AAEzC,SAASK,UAAUT,SAKvB;EACD,MAAM;IAAEC;IAAaS;IAAeC;IAAYC;EAAW,IAAIZ;EAE/D,MAAMa,gBAAiBpB,KAAmC;IArC5D;IAsCI,MAAMqB,QAAOC,gBAAWtB,CAAC,MAAZ,YAAiBW;IAC9B,OAAO;MACLY,UAAU;MACVC,YAAY;MACZC,kBAAkB;MAClBC,eAAe;MACfC,cAAc;MACdC,aAAa;MACb,GAAGtB,OAAO;QACRE;QACAC,UAAU;UACRoB,QAAQ,QAAQZ,cAAcjB,CAAC,QAAQqB,KAAKR,SAAS;QACvD;QACAH,YAAY;UACVoB,MAAM,QAAQb,cAAcjB,CAAC,QAAQqB,KAAKT,QAAQ;QACpD;MACF,CAAC;IACH;EACF;EAEA,MAAMmB,OACJvB,gBAAgB,aACZU,WAAWc,OACT,CAACjB,GAAGkB,MAAOnB,UAAUC,CAAC,EAAEF,SAASC,UAAUmB,CAAC,EAAEpB,SAASE,IAAIkB,GAC3DtB,SACF,GACAO,WAAWc,OACT,CAACjB,GAAGkB,MAAOnB,UAAUC,CAAC,EAAEH,QAAQE,UAAUmB,CAAC,EAAErB,QAAQG,IAAIkB,GACzDtB,SACF;EAEN,MAAMuB,YAAiC;IACrCX,UAAU;IACVK,aAAa;IACbO,yBAAyB;IACzBX,YAAY;IACZY,SAAS;IACT,GAAG9B,OAAO;MACRE;MACAC,UAAUsB,OACN;QACEM,aAAaN,KAAKnB,QAAQ;QAC1B0B,cAAcP,KAAKnB,QAAQ;MAC7B,IACA,CAAC;MACLF,YAAYqB,OACR;QACEQ,YAAYR,KAAKlB,SAAS;QAC1B2B,eAAeT,KAAKlB,SAAS;MAC/B,IACA,CAAC;IACP,CAAC;EACH;EAEA,MAAM4B,aAAkC;IACtClB,UAAU;IACV,GAAGjB,OAAO;MACRE;MACAC,UAAU;QACRqB,MAAM;QACNY,WAAW;QACX7B,QAAQ;MACV;MACAH,YAAY;QACViC,KAAK;QACLD,WAAW;QACX9B,OAAO;MACT;IACF,CAAC;EACH;EAEA,MAAMgC,gBAAgB3B,cAAc4B,WAAW;EAC/C,MAAMC,WAAW,CAAC,GAAG3B,aAAa,MAAMF,cAAc,CAAC,IAAIA,cAAc,CAAC,CAAC;EAC3E,MAAM8B,QAAQH,gBAAgBE,WAAW7B;EAEzC,IAAI+B,QAAQD,MAAM,CAAC;EACnB,IAAI,CAACH,iBAAiBzB,YAAY;IAChC6B,QAAQ,MAAMA;EAChB;EACA,MAAMC,UAAUC,KAAKC,IAAIJ,MAAMA,MAAMF,SAAS,CAAC,IAAIE,MAAM,CAAC,CAAC;EAE3D,MAAMK,kBAAuC;IAC3C,GAAGX;IACH,GAAGnC,OAAO;MACRE;MACAC,UAAUU,aACN;QAAEN,QAAQ,GAAGoC;QAAYN,KAAK,GAAGK;MAAS,IAC1C;QAAEnC,QAAQ,GAAGoC;QAAYpB,QAAQ,GAAGmB;MAAS;MACjDtC,YAAYS,aACR;QAAEP,OAAO,GAAGqC;QAAYI,OAAO,GAAGL;MAAS,IAC3C;QAAEpC,OAAO,GAAGqC;QAAYnB,MAAM,GAAGkB;MAAS;IAChD,CAAC;EACH;EAEA,OAAO;IAAEP;IAAYW;IAAiBlB;IAAWd;EAAc;AACjE;AAEO,SAASkC,cAAc/C,SAI3B;EACD,MAAM;IAAEY;IAAYoC;IAAW/C;EAAY,IAAID;EAE/C,IAAIgD,cAAc,SAAS/C,gBAAgB,YAAY;IACrD,OAAOW;EACT;EAGA,OAAO,CAACA;AACV","names":["getIds","id","root","getThumb","i","getInput","track","innerTrack","getMarker","output","orient","options","orientation","vertical","horizontal","zeroSize","width","height","normalize","a","getStyles","thumbPercents","thumbRects","isReversed","getThumbStyle","rect","_a","position","userSelect","WebkitUserSelect","MozUserSelect","msUserSelect","touchAction","bottom","left","size","reduce","b","rootStyle","WebkitTapHighlightColor","outline","paddingLeft","paddingRight","paddingTop","paddingBottom","trackStyle","transform","top","isSingleThumb","length","fallback","range","start","percent","Math","abs","innerTrackStyle","right","getIsReversed","direction"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/slider/src/slider-utils.ts"],"sourcesContent":["export function getIds(id: string | number) {\n  return {\n    root: `slider-root-${id}`,\n    getThumb: (i: number) => `slider-thumb-${id}-${i}`,\n    getInput: (i: number) => `slider-input-${id}-${i}`,\n    track: `slider-track-${id}`,\n    innerTrack: `slider-filled-track-${id}`,\n    getMarker: (i: number) => `slider-marker-${id}-${i}`,\n    output: `slider-output-${id}`,\n  }\n}\n\ntype Orientation = \"vertical\" | \"horizontal\"\n\nexport function orient(options: {\n  orientation: Orientation\n  vertical: React.CSSProperties\n  horizontal: React.CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\ntype Size = { height: number; width: number }\n\nconst zeroSize: Size = { width: 0, height: 0 }\n\nconst normalize = (a: Size | undefined) => a || zeroSize\n\nexport function getStyles(options: {\n  orientation: Orientation\n  thumbPercents: number[]\n  thumbRects: Array<Size | undefined>\n  isReversed?: boolean\n}) {\n  const { orientation, thumbPercents, thumbRects, isReversed } = options\n\n  const getThumbStyle = (i: number): React.CSSProperties => {\n    const rect = thumbRects[i] ?? zeroSize\n    return {\n      position: \"absolute\",\n      userSelect: \"none\",\n      WebkitUserSelect: \"none\",\n      MozUserSelect: \"none\",\n      msUserSelect: \"none\",\n      touchAction: \"none\",\n      ...orient({\n        orientation,\n        vertical: {\n          bottom: `calc(${thumbPercents[i]}% - ${rect.height / 2}px)`,\n        },\n        horizontal: {\n          left: `calc(${thumbPercents[i]}% - ${rect.width / 2}px)`,\n        },\n      }),\n    }\n  }\n\n  const size =\n    orientation === \"vertical\"\n      ? thumbRects.reduce(\n          (a, b) => (normalize(a).height > normalize(b).height ? a : b),\n          zeroSize,\n        )\n      : thumbRects.reduce(\n          (a, b) => (normalize(a).width > normalize(b).width ? a : b),\n          zeroSize,\n        )\n\n  const rootStyle: React.CSSProperties = {\n    position: \"relative\",\n    touchAction: \"none\",\n    WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\n    userSelect: \"none\",\n    outline: 0,\n    ...orient({\n      orientation,\n      vertical: size\n        ? {\n            paddingLeft: size.width / 2,\n            paddingRight: size.width / 2,\n          }\n        : {},\n      horizontal: size\n        ? {\n            paddingTop: size.height / 2,\n            paddingBottom: size.height / 2,\n          }\n        : {},\n    }),\n  }\n\n  const trackStyle: React.CSSProperties = {\n    position: \"absolute\",\n    ...orient({\n      orientation,\n      vertical: {\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        height: \"100%\",\n      },\n      horizontal: {\n        top: \"50%\",\n        transform: \"translateY(-50%)\",\n        width: \"100%\",\n      },\n    }),\n  }\n\n  const isSingleThumb = thumbPercents.length === 1\n  const fallback = [0, isReversed ? 100 - thumbPercents[0] : thumbPercents[0]]\n  const range = isSingleThumb ? fallback : thumbPercents\n\n  let start = range[0]\n  if (!isSingleThumb && isReversed) {\n    start = 100 - start\n  }\n  const percent = Math.abs(range[range.length - 1] - range[0])\n\n  const innerTrackStyle: React.CSSProperties = {\n    ...trackStyle,\n    ...orient({\n      orientation,\n      vertical: isReversed\n        ? { height: `${percent}%`, top: `${start}%` }\n        : { height: `${percent}%`, bottom: `${start}%` },\n      horizontal: isReversed\n        ? { width: `${percent}%`, right: `${start}%` }\n        : { width: `${percent}%`, left: `${start}%` },\n    }),\n  }\n\n  return { trackStyle, innerTrackStyle, rootStyle, getThumbStyle }\n}\n\nexport function getIsReversed(options: {\n  isReversed?: boolean\n  direction: \"ltr\" | \"rtl\"\n  orientation?: \"horizontal\" | \"vertical\"\n}) {\n  const { isReversed, direction, orientation } = options\n\n  if (direction === \"ltr\" || orientation === \"vertical\") {\n    return isReversed\n  }\n  // only flip for horizontal RTL\n  // if isReserved 🔜  otherwise  🔚\n  return !isReversed\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}