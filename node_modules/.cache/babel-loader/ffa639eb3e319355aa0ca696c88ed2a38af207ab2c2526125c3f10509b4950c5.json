{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useEffect, useRef } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useOutsideClick(props) {\n  const {\n    ref,\n    handler,\n    enabled = true\n  } = props;\n  const savedHandler = useCallbackRef(handler);\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  const state = stateRef.current;\n  useEffect(() => {\n    if (!enabled) return;\n    const onPointerDown = e => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n    const onMouseUp = event => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    const onTouchEnd = event => {\n      state.ignoreEmulatedMouseEvents = true;\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    const doc = getOwnerDocument(ref.current);\n    doc.addEventListener(\"mousedown\", onPointerDown, true);\n    doc.addEventListener(\"mouseup\", onMouseUp, true);\n    doc.addEventListener(\"touchstart\", onPointerDown, true);\n    doc.addEventListener(\"touchend\", onTouchEnd, true);\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true);\n      doc.removeEventListener(\"mouseup\", onMouseUp, true);\n      doc.removeEventListener(\"touchstart\", onPointerDown, true);\n      doc.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state, enabled]);\n}\nfunction isValidEvent(event, ref) {\n  var _a;\n  const target = event.target;\n  if (target) {\n    const doc = getOwnerDocument(target);\n    if (!doc.contains(target)) return false;\n  }\n  return !((_a = ref.current) == null ? void 0 : _a.contains(target));\n}\nfunction getOwnerDocument(node) {\n  var _a;\n  return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;\n}\nexport { useOutsideClick };","map":{"version":3,"mappings":";;;AAAA,SAASA,WAAWC,cAAc;AAClC,SAASC,sBAAsB;AAqBxB,SAASC,gBAAgBC,OAA6B;EAC3D,MAAM;IAAEC;IAAKC;IAASC,UAAU;EAAK,IAAIH;EACzC,MAAMI,eAAeN,eAAeI,OAAO;EAE3C,MAAMG,WAAWR,OAAO;IACtBS,eAAe;IACfC,2BAA2B;EAC7B,CAAC;EAED,MAAMC,QAAQH,SAASI;EAEvBb,UAAU,MAAM;IACd,IAAI,CAACO,SAAS;IACd,MAAMO,gBAAsBC,KAAoB;MAC9C,IAAIC,aAAaD,GAAGV,GAAG,GAAG;QACxBO,MAAMF,gBAAgB;MACxB;IACF;IAEA,MAAMO,YAAkBC,SAAsB;MAC5C,IAAIN,MAAMD,2BAA2B;QACnCC,MAAMD,4BAA4B;QAClC;MACF;MAEA,IAAIC,MAAMF,iBAAiBJ,WAAWU,aAAaE,OAAOb,GAAG,GAAG;QAC9DO,MAAMF,gBAAgB;QACtBF,aAAaU,KAAK;MACpB;IACF;IAEA,MAAMC,aAAcD,SAAsB;MACxCN,MAAMD,4BAA4B;MAClC,IAAIL,WAAWM,MAAMF,iBAAiBM,aAAaE,OAAOb,GAAG,GAAG;QAC9DO,MAAMF,gBAAgB;QACtBF,aAAaU,KAAK;MACpB;IACF;IAEA,MAAME,MAAMC,iBAAiBhB,IAAIQ,OAAO;IACxCO,IAAIE,iBAAiB,aAAaR,eAAe,IAAI;IACrDM,IAAIE,iBAAiB,WAAWL,WAAW,IAAI;IAC/CG,IAAIE,iBAAiB,cAAcR,eAAe,IAAI;IACtDM,IAAIE,iBAAiB,YAAYH,YAAY,IAAI;IAEjD,OAAO,MAAM;MACXC,IAAIG,oBAAoB,aAAaT,eAAe,IAAI;MACxDM,IAAIG,oBAAoB,WAAWN,WAAW,IAAI;MAClDG,IAAIG,oBAAoB,cAAcT,eAAe,IAAI;MACzDM,IAAIG,oBAAoB,YAAYJ,YAAY,IAAI;IACtD;EACF,GAAG,CAACb,SAASD,KAAKG,cAAcI,OAAOL,OAAO,CAAC;AACjD;AAEA,SAASS,aAAaE,OAAcb,KAAmC;EA5EvE;EA6EE,MAAMmB,SAASN,MAAMM;EAErB,IAAIA,QAAQ;IACV,MAAMJ,MAAMC,iBAAiBG,MAAM;IACnC,IAAI,CAACJ,IAAIK,SAASD,MAAM,GAAG,OAAO;EACpC;EAEA,OAAO,GAACE,SAAIb,YAAJ,mBAAaY,SAASD;AAChC;AAEA,SAASH,iBAAiBM,MAAiC;EAvF3D;EAwFE,QAAOD,kCAAME,kBAAN,YAAuBC;AAChC","names":["useEffect","useRef","useCallbackRef","useOutsideClick","props","ref","handler","enabled","savedHandler","stateRef","isPointerDown","ignoreEmulatedMouseEvents","state","current","onPointerDown","e","isValidEvent","onMouseUp","event","onTouchEnd","doc","getOwnerDocument","addEventListener","removeEventListener","target","contains","_a","node","ownerDocument","document"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-use-outside-click/src/index.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\nexport interface UseOutsideClickProps {\n  /**\n   * Whether the hook is enabled\n   */\n  enabled?: boolean\n  /**\n   * The reference to a DOM element.\n   */\n  ref: React.RefObject<HTMLElement>\n  /**\n   * Function invoked when a click is triggered outside the referenced element.\n   */\n  handler?: (e: Event) => void\n}\n\n/**\n * Example, used in components like Dialogs and Popovers, so they can close\n * when a user clicks outside them.\n */\nexport function useOutsideClick(props: UseOutsideClickProps) {\n  const { ref, handler, enabled = true } = props\n  const savedHandler = useCallbackRef(handler)\n\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n  })\n\n  const state = stateRef.current\n\n  useEffect(() => {\n    if (!enabled) return\n    const onPointerDown: any = (e: PointerEvent) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true\n      }\n    }\n\n    const onMouseUp: any = (event: MouseEvent) => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false\n        return\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const onTouchEnd = (event: TouchEvent) => {\n      state.ignoreEmulatedMouseEvents = true\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const doc = getOwnerDocument(ref.current)\n    doc.addEventListener(\"mousedown\", onPointerDown, true)\n    doc.addEventListener(\"mouseup\", onMouseUp, true)\n    doc.addEventListener(\"touchstart\", onPointerDown, true)\n    doc.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true)\n      doc.removeEventListener(\"mouseup\", onMouseUp, true)\n      doc.removeEventListener(\"touchstart\", onPointerDown, true)\n      doc.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [handler, ref, savedHandler, state, enabled])\n}\n\nfunction isValidEvent(event: Event, ref: React.RefObject<HTMLElement>) {\n  const target = event.target as HTMLElement\n\n  if (target) {\n    const doc = getOwnerDocument(target)\n    if (!doc.contains(target)) return false\n  }\n\n  return !ref.current?.contains(target)\n}\n\nfunction getOwnerDocument(node?: Element | null): Document {\n  return node?.ownerDocument ?? document\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}