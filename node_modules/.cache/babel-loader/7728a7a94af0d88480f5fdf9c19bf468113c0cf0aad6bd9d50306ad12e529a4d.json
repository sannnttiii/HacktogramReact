{"ast":null,"code":"'use client';\n\n// src/use-const.ts\nimport { useRef } from \"react\";\nfunction useConst(init) {\n  const ref = useRef(null);\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n  return ref.current;\n}\nexport { useConst };","map":{"version":3,"mappings":";;;AAAA,SAASA,cAAc;AAWhB,SAASC,SAAwBC,MAAwB;EAI9D,MAAMC,MAAMH,OAAiB,IAAI;EAEjC,IAAIG,IAAIC,YAAY,MAAM;IACxBD,IAAIC,UAAU,OAAOF,SAAS,aAAcA,MAAmB,GAAIA;EACrE;EAEA,OAAOC,IAAIC;AACb","names":["useRef","useConst","init","ref","current"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-const.ts"],"sourcesContent":["import { useRef } from \"react\"\n\ntype InitFn<T> = () => T\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConst`\n * you can ensure that initializers don't execute twice or more.\n */\nexport function useConst<T extends any>(init: T | InitFn<T>): T {\n  // Use useRef to store the value because it's the least expensive built-in\n  // hook that works here. We could also use `useState` but that's more\n  // expensive internally due to reducer handling which we don't need.\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? (init as InitFn<T>)() : init\n  }\n\n  return ref.current as T\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}