{"ast":null,"code":"'use client';\n\n// src/use-event-listeners.ts\nimport { useCallback, useEffect, useRef } from \"react\";\nfunction useEventListeners() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\nexport { useEventListeners };","map":{"version":3,"mappings":";;;AAAA,SAASA,aAAaC,WAAWC,cAAc;AA6BxC,SAASC,oBAAoC;EAClD,MAAMC,YAAYF,QAAO,mBAAIG,KAAK;EAClC,MAAMC,mBAAmBF,UAAUG;EAEnC,MAAMC,MAAMR,YAAY,CAACS,IAASC,MAAWC,UAAeC,YAAiB;IAC3ER,UAAUG,QAAQM,IAAIF,UAAU;MAAED;MAAMD;MAAIG;IAAQ,CAAC;IACrDH,GAAGK,iBAAiBJ,MAAMC,UAAUC,OAAO;EAC7C,GAAG,EAAE;EAEL,MAAMG,SAASf,YACb,CAACS,IAASC,MAAWC,UAAeC,YAAiB;IACnDH,GAAGO,oBAAoBN,MAAMC,UAAUC,OAAO;IAC9CR,UAAUG,QAAQU,OAAON,QAAQ;EACnC,GACA,EAAC,CACH;EAEAV,UACE,MAAM,MAAM;IACVK,iBAAiBY,QAAQ,CAACC,OAAOC,QAAQ;MACvCL,OAAOI,MAAMV,IAAIU,MAAMT,MAAMU,KAAKD,MAAMP,OAAO;IACjD,CAAC;EACH,GACA,CAACG,QAAQT,gBAAgB,EAC3B;EAEA,OAAO;IAAEE;IAAKO;EAAO;AACvB","names":["useCallback","useEffect","useRef","useEventListeners","listeners","Map","currentListeners","current","add","el","type","listener","options","set","addEventListener","remove","removeEventListener","delete","forEach","value","key"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/clickable/src/use-event-listeners.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      el.removeEventListener(type, listener, options)\n      listeners.current.delete(listener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}