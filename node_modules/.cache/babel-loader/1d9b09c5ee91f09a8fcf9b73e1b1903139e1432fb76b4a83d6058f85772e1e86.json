{"ast":null,"code":"'use client';\n\n// src/use-media-query.ts\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\nfunction useMediaQuery(query) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    ssr = true,\n    fallback\n  } = options;\n  const {\n    getWindow\n  } = useEnvironment();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(v => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n    }));\n  });\n  useEffect(() => {\n    const win = getWindow();\n    setValue(queries.map(query2 => ({\n      media: query2,\n      matches: win.matchMedia(query2).matches\n    })));\n    const mql = queries.map(query2 => win.matchMedia(query2));\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return {\n            ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n    mql.forEach(mql2 => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach(mql2 => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(item => item.matches);\n}\nexport { useMediaQuery };","map":{"version":3,"mappings":";;;AAAA,SAASA,sBAAsB;AAC/B,SAASC,WAAWC,gBAAgB;AAe7B,SAASC,cACdC,OAEW;EAAA,IADXC,8EAAgC,CAAC;EAEjC,MAAM;IAAEC,MAAM;IAAMC;EAAS,IAAIF;EAEjC,MAAM;IAAEG;EAAU,IAAIR,gBAAe;EAErC,MAAMS,UAAUC,MAAMC,QAAQP,KAAK,IAAIA,QAAQ,CAACA,KAAK;EAErD,IAAIQ,iBAAiBF,MAAMC,QAAQJ,QAAQ,IAAIA,WAAW,CAACA,QAAQ;EACnEK,iBAAiBA,eAAeC,OAAQC,KAAMA,KAAK,IAAI;EAEvD,MAAM,CAACC,OAAOC,QAAQ,IAAId,SAAS,MAAM;IACvC,OAAOO,QAAQQ,IAAI,CAACb,QAAOc,WAAW;MACpCC,OAAOf;MACPgB,SAASd,MACL,CAAC,CAACM,eAAeM,KAAK,IACtBV,WAAU,CAAEa,WAAWjB,MAAK,EAAEgB;IACpC,EAAE;EACJ,CAAC;EAEDnB,UAAU,MAAM;IACd,MAAMqB,MAAMd,WAAU;IACtBQ,SACEP,QAAQQ,IAAKb,WAAW;MACtBe,OAAOf;MACPgB,SAASE,IAAID,WAAWjB,MAAK,EAAEgB;IACjC,EAAE,EACJ;IAEA,MAAMG,MAAMd,QAAQQ,IAAKb,UAAUkB,IAAID,WAAWjB,MAAK,CAAC;IAExD,MAAMoB,UAAWC,OAA6B;MAC5CT,SAAUU,QAAS;QACjB,OAAOA,KAAKC,OAAM,CAAEV,IAAKW,QAAS;UAChC,IAAIA,KAAKT,UAAUM,IAAIN,OAAO,OAAO;YAAE,GAAGS;YAAMR,SAASK,IAAIL;UAAQ;UACrE,OAAOQ;QACT,CAAC;MACH,CAAC;IACH;IAEAL,IAAIM,QAASN,QAAQ;MACnB,IAAI,OAAOA,KAAIO,gBAAgB,YAAY;QACzCP,KAAIO,YAAYN,OAAO;MACzB,OAAO;QACLD,KAAIQ,iBAAiB,UAAUP,OAAO;MACxC;IACF,CAAC;IAED,OAAO,MAAM;MACXD,IAAIM,QAASN,QAAQ;QACnB,IAAI,OAAOA,KAAIS,mBAAmB,YAAY;UAC5CT,KAAIS,eAAeR,OAAO;QAC5B,OAAO;UACLD,KAAIU,oBAAoB,UAAUT,OAAO;QAC3C;MACF,CAAC;IACH;EAEF,GAAG,CAAChB,SAAS,CAAC;EAEd,OAAOO,MAAME,IAAKW,QAASA,KAAKR,OAAO;AACzC","names":["useEnvironment","useEffect","useState","useMediaQuery","query","options","ssr","fallback","getWindow","queries","Array","isArray","fallbackValues","filter","v","value","setValue","map","index","media","matches","matchMedia","win","mql","handler","evt","prev","slice","item","forEach","addListener","addEventListener","removeListener","removeEventListener"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/media-query/src/use-media-query.ts"],"sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}