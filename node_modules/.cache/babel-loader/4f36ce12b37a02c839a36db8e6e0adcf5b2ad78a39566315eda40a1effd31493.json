{"ast":null,"code":"'use client';\n\nimport { usePopoverContext, usePopoverStyles } from \"./chunk-Z3POGKNI.mjs\";\n\n// src/popover-arrow.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar resolveVar = (scale, value) => value ? `${scale}.${value}, ${value}` : void 0;\nfunction PopoverArrow(props) {\n  var _a;\n  const {\n    bg,\n    bgColor,\n    backgroundColor,\n    shadow,\n    boxShadow,\n    shadowColor\n  } = props;\n  const {\n    getArrowProps,\n    getArrowInnerProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  const arrowBg = (_a = bg != null ? bg : bgColor) != null ? _a : backgroundColor;\n  const arrowShadow = shadow != null ? shadow : boxShadow;\n  return /* @__PURE__ */jsx(chakra.div, {\n    ...getArrowProps(),\n    className: \"chakra-popover__arrow-positioner\",\n    children: /* @__PURE__ */jsx(chakra.div, {\n      className: cx(\"chakra-popover__arrow\", props.className),\n      ...getArrowInnerProps(props),\n      __css: {\n        \"--popper-arrow-shadow-color\": resolveVar(\"colors\", shadowColor),\n        \"--popper-arrow-bg\": resolveVar(\"colors\", arrowBg),\n        \"--popper-arrow-shadow\": resolveVar(\"shadows\", arrowShadow),\n        ...styles.arrow\n      }\n    })\n  });\n}\nPopoverArrow.displayName = \"PopoverArrow\";\nexport { PopoverArrow };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,cAA4C;AACrD,SAASC,UAAU;AAwBb;AAdN,IAAMC,aAAa,CAACC,OAAeC,UACjCA,QAAQ,GAAGD,KAAK,IAAIC,KAAK,KAAKA,KAAK,KAAK;AAEnC,SAASC,aAAaC,OAA0B;EAdvD;EAeE,MAAM;IAAEC;IAAIC;IAASC;IAAiBC;IAAQC;IAAWC;EAAY,IAAIN;EACzE,MAAM;IAAEO;IAAeC;EAAmB,IAAIC,mBAAkB;EAChE,MAAMC,SAASC,kBAAiB;EAChC,MAAMC,WAAUC,uBAAMX,YAAN,YAAiBC;EACjC,MAAMW,cAAcV,0BAAUC;EAC9B,OACE,mBAACX,OAAOqB,KAAP;IACE,GAAGR,eAAc;IAClBS,WAAU;IAEVC,6BAACvB,OAAOqB,KAAP;MACCC,WAAWrB,GAAG,yBAAyBK,MAAMgB,SAAS;MACrD,GAAGR,mBAAmBR,KAAK;MAC5BkB,OAAO;QACL,+BAA+BtB,WAAW,UAAUU,WAAW;QAC/D,qBAAqBV,WAAW,UAAUgB,OAAO;QACjD,yBAAyBhB,WAAW,WAAWkB,WAAW;QAC1D,GAAGJ,OAAOS;MACZ;IAAA;EACF,EACF;AAEJ;AAEApB,aAAaqB,cAAc","names":["chakra","cx","resolveVar","scale","value","PopoverArrow","props","bg","bgColor","backgroundColor","shadow","boxShadow","shadowColor","getArrowProps","getArrowInnerProps","usePopoverContext","styles","usePopoverStyles","arrowBg","_a","arrowShadow","div","className","children","__css","arrow","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/popover/src/popover-arrow.tsx"],"sourcesContent":["import { chakra, HTMLChakraProps, SystemProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The color of the arrow's shadow\n   */\n  shadowColor?: SystemProps[\"color\"]\n}\n\nconst resolveVar = (scale: string, value: unknown) =>\n  value ? `${scale}.${value}, ${value}` : undefined\n\nexport function PopoverArrow(props: PopoverArrowProps) {\n  const { bg, bgColor, backgroundColor, shadow, boxShadow, shadowColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = usePopoverStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  const arrowShadow = shadow ?? boxShadow\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          \"--popper-arrow-shadow-color\": resolveVar(\"colors\", shadowColor),\n          \"--popper-arrow-bg\": resolveVar(\"colors\", arrowBg),\n          \"--popper-arrow-shadow\": resolveVar(\"shadows\", arrowShadow),\n          ...styles.arrow,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nPopoverArrow.displayName = \"PopoverArrow\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}