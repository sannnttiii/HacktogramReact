{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(next => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\nexport { useControllableProp, useControllableState };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAASC,gBAAgB;AAClC,SAASC,sBAAsB;AAOxB,SAASC,oBAAuBC,MAAqBC,OAAU;EACpE,MAAMC,aAAa,OAAOF,SAAS;EACnC,MAAMG,QAAQD,aAAaF,OAAOC;EAClC,OAAOL,QAAsB,MAAM,CAACM,YAAYC,KAAK,GAAG,CAACD,YAAYC,KAAK,CAAC;AAC7E;AAcO,SAASC,qBAAwBC,OAAqC;EAC3E,MAAM;IACJF,OAAOG;IACPC;IACAC;IACAC,eAAe,CAACC,MAAMC,SAASD,SAASC;EAC1C,IAAIN;EAEJ,MAAMO,eAAed,eAAeU,QAAQ;EAC5C,MAAMK,mBAAmBf,eAAeW,YAAY;EAEpD,MAAM,CAACK,mBAAmBC,oBAAoB,IAAIlB,SAASU,YAAiB;EAC5E,MAAML,aAAaI,cAAc;EACjC,MAAMH,QAAQD,aAAaI,YAAYQ;EAEvC,MAAME,WAAWlB,eACda,QAAkC;IACjC,MAAMM,SAASN;IACf,MAAMO,YAAY,OAAOP,SAAS,aAAaM,OAAOd,KAAK,IAAIQ;IAE/D,IAAI,CAACE,iBAAiBV,OAAOe,SAAS,GAAG;MACvC;IACF;IAEA,IAAI,CAAChB,YAAY;MACfa,qBAAqBG,SAAS;IAChC;IAEAN,aAAaM,SAAS;EACxB,GACA,CAAChB,YAAYU,cAAcT,OAAOU,gBAAgB,EACpD;EAEA,OAAO,CAACV,OAAOa,QAAQ;AACzB","names":["useMemo","useState","useCallbackRef","useControllableProp","prop","state","controlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","uncontrolledState","setUncontrolledState","setValue","setter","nextValue"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-use-controllable-state/src/index.ts"],"sourcesContent":["import { useMemo, useState } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\n/**\n * Given a prop value and state value, the useControllableProp hook is used to determine whether a component is controlled or uncontrolled, and also returns the computed value.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollableprop\n */\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const controlled = typeof prop !== \"undefined\"\n  const value = controlled ? prop : state\n  return useMemo<[boolean, T]>(() => [controlled, value], [controlled, value])\n}\n\nexport interface UseControllableStateProps<T> {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * The `useControllableState` hook returns the state and function that updates the state, just like React.useState does.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollablestate\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue as T)\n  const controlled = valueProp !== undefined\n  const value = controlled ? valueProp : uncontrolledState\n\n  const setValue = useCallbackRef(\n    (next: React.SetStateAction<T>) => {\n      const setter = next as (prevState?: T) => T\n      const nextValue = typeof next === \"function\" ? setter(value) : next\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!controlled) {\n        setUncontrolledState(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [controlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, setValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}