{"ast":null,"code":"'use client';\n\n// src/use-steps.ts\nimport { useState } from \"react\";\nfunction useSteps() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    index = 0,\n    count\n  } = props;\n  const [activeStep, setActiveStep] = useState(index);\n  const maxStep = typeof count === \"number\" ? count - 1 : 0;\n  const activeStepPercent = activeStep / maxStep;\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n    isActiveStep(step) {\n      return step === activeStep;\n    },\n    isCompleteStep(step) {\n      return step < activeStep;\n    },\n    isIncompleteStep(step) {\n      return step > activeStep;\n    },\n    getStatus(step) {\n      if (step < activeStep) return \"complete\";\n      if (step > activeStep) return \"incomplete\";\n      return \"active\";\n    },\n    goToNext() {\n      setActiveStep(step => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1;\n      });\n    },\n    goToPrevious() {\n      setActiveStep(step => Math.max(0, step - 1));\n    }\n  };\n}\nexport { useSteps };","map":{"version":3,"mappings":";;;AAAA,SAASA,gBAAgB;AASlB,SAASC,WAAoC;EAAA,IAA3BC,4EAAuB,CAAC;EAC/C,MAAM;IAAEC,QAAQ;IAAGC;EAAM,IAAIF;EAE7B,MAAM,CAACG,YAAYC,aAAa,IAAIN,SAASG,KAAK;EAElD,MAAMI,UAAU,OAAOH,UAAU,WAAWA,QAAQ,IAAI;EACxD,MAAMI,oBAAoBH,aAAaE;EAEvC,OAAO;IACLF;IACAC;IACAE;IACAC,aAAaC,MAAc;MACzB,OAAOA,SAASL;IAClB;IACAM,eAAeD,MAAc;MAC3B,OAAOA,OAAOL;IAChB;IACAO,iBAAiBF,MAAc;MAC7B,OAAOA,OAAOL;IAChB;IACAQ,UAAUH,MAA0B;MAClC,IAAIA,OAAOL,YAAY,OAAO;MAC9B,IAAIK,OAAOL,YAAY,OAAO;MAC9B,OAAO;IACT;IACAS,WAAW;MACTR,cAAeI,QAAS;QACtB,OAAO,OAAON,UAAU,WAAWW,KAAKC,IAAIZ,OAAOM,OAAO,CAAC,IAAIA,OAAO;MACxE,CAAC;IACH;IACAO,eAAe;MACbX,cAAeI,QAASK,KAAKG,IAAI,GAAGR,OAAO,CAAC,CAAC;IAC/C;EACF;AACF","names":["useState","useSteps","props","index","count","activeStep","setActiveStep","maxStep","activeStepPercent","isActiveStep","step","isCompleteStep","isIncompleteStep","getStatus","goToNext","Math","min","goToPrevious","max"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/stepper/src/use-steps.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport type UseStepsProps = {\n  index?: number\n  count?: number\n}\n\nexport type StepStatus = \"complete\" | \"active\" | \"incomplete\"\n\nexport function useSteps(props: UseStepsProps = {}) {\n  const { index = 0, count } = props\n\n  const [activeStep, setActiveStep] = useState(index)\n\n  const maxStep = typeof count === \"number\" ? count - 1 : 0\n  const activeStepPercent = activeStep / maxStep\n\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n    isActiveStep(step: number) {\n      return step === activeStep\n    },\n    isCompleteStep(step: number) {\n      return step < activeStep\n    },\n    isIncompleteStep(step: number) {\n      return step > activeStep\n    },\n    getStatus(step: number): StepStatus {\n      if (step < activeStep) return \"complete\"\n      if (step > activeStep) return \"incomplete\"\n      return \"active\"\n    },\n    goToNext() {\n      setActiveStep((step) => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1\n      })\n    },\n    goToPrevious() {\n      setActiveStep((step) => Math.max(0, step - 1))\n    },\n  }\n}\n\nexport type UseStepsReturn = ReturnType<typeof useSteps>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}