{"ast":null,"code":"'use client';\n\nimport { usePortalManager } from \"./chunk-HK66PB7M.mjs\";\n\n// src/portal.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { createPortal } from \"react-dom\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = `.chakra-portal`;\nvar Container = props => /* @__PURE__ */jsx(\"div\", {\n  className: \"chakra-portal-zIndex\",\n  style: {\n    position: \"absolute\",\n    zIndex: props.zIndex,\n    top: 0,\n    left: 0,\n    right: 0\n    // NB: Don't add `bottom: 0`, it makes the entire app unusable\n    // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n  },\n\n  children: props.children\n});\nvar DefaultPortal = props => {\n  const {\n    appendToParentPortal,\n    children\n  } = props;\n  const [tempNode, setTempNode] = useState(null);\n  const portal = useRef(null);\n  const [, forceUpdate] = useState({});\n  useEffect(() => forceUpdate({}), []);\n  const parentPortal = usePortalContext();\n  const manager = usePortalManager();\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return;\n    const doc = tempNode.ownerDocument;\n    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate({});\n    const portalNode = portal.current;\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, [tempNode]);\n  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */jsx(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex,\n    children\n  }) : children;\n  return portal.current ? createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n    value: portal.current,\n    children: _children\n  }), portal.current) : /* @__PURE__ */jsx(\"span\", {\n    ref: el => {\n      if (el) setTempNode(el);\n    }\n  });\n};\nvar ContainerPortal = props => {\n  const {\n    children,\n    containerRef,\n    appendToParentPortal\n  } = props;\n  const containerEl = containerRef.current;\n  const host = containerEl != null ? containerEl : typeof window !== \"undefined\" ? document.body : void 0;\n  const portal = useMemo(() => {\n    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  const [, forceUpdate] = useState({});\n  useSafeLayoutEffect(() => forceUpdate({}), []);\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return () => {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n  if (host && portal) {\n    return createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null,\n      children\n    }), portal);\n  }\n  return null;\n};\nfunction Portal(props) {\n  const portalProps = {\n    appendToParentPortal: true,\n    ...props\n  };\n  const {\n    containerRef,\n    ...rest\n  } = portalProps;\n  return containerRef ? /* @__PURE__ */jsx(ContainerPortal, {\n    containerRef,\n    ...rest\n  }) : /* @__PURE__ */jsx(DefaultPortal, {\n    ...rest\n  });\n}\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\nPortal.displayName = \"Portal\";\nexport { Portal };","map":{"version":3,"mappings":"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","names":["useSafeLayoutEffect","createContext","createPortal","useEffect","useMemo","useRef","useState","PortalContextProvider","usePortalContext","strict","name","PORTAL_CLASSNAME","PORTAL_SELECTOR","Container","props","className","style","position","zIndex","top","left","right","children","DefaultPortal","appendToParentPortal","tempNode","setTempNode","portal","forceUpdate","parentPortal","manager","usePortalManager","doc","ownerDocument","host","body","current","createElement","appendChild","portalNode","contains","removeChild","_children","value","ref","el","ContainerPortal","containerRef","containerEl","window","document","node","Portal","portalProps","rest","selector","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/portal/src/portal.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { createPortal } from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\nimport { useEffect, useMemo, useRef, useState } from \"react\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nconst PORTAL_CLASSNAME = \"chakra-portal\"\nconst PORTAL_SELECTOR = `.chakra-portal`\n\nconst Container = (props: React.PropsWithChildren<{ zIndex: number }>) => (\n  <div\n    className=\"chakra-portal-zIndex\"\n    style={{\n      position: \"absolute\",\n      zIndex: props.zIndex,\n      top: 0,\n      left: 0,\n      right: 0,\n      // NB: Don't add `bottom: 0`, it makes the entire app unusable\n      // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n    }}\n  >\n    {props.children}\n  </div>\n)\n\n/**\n * Portal that uses `document.body` as container\n */\nconst DefaultPortal = (\n  props: React.PropsWithChildren<{ appendToParentPortal?: boolean }>,\n) => {\n  const { appendToParentPortal, children } = props\n\n  const [tempNode, setTempNode] = useState<HTMLElement | null>(null)\n  const portal = useRef<HTMLDivElement | null>(null)\n\n  const [, forceUpdate] = useState({})\n  useEffect(() => forceUpdate({}), [])\n\n  const parentPortal = usePortalContext()\n  const manager = usePortalManager()\n\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return\n\n    const doc = tempNode.ownerDocument\n    const host = appendToParentPortal ? parentPortal ?? doc.body : doc.body\n\n    if (!host) return\n\n    portal.current = doc.createElement(\"div\")\n    portal.current.className = PORTAL_CLASSNAME\n\n    host.appendChild(portal.current)\n    forceUpdate({})\n\n    const portalNode = portal.current\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode)\n      }\n    }\n  }, [tempNode])\n\n  const _children = manager?.zIndex ? (\n    <Container zIndex={manager?.zIndex}>{children}</Container>\n  ) : (\n    children\n  )\n\n  return portal.current ? (\n    createPortal(\n      <PortalContextProvider value={portal.current}>\n        {_children}\n      </PortalContextProvider>,\n      portal.current,\n    )\n  ) : (\n    <span\n      ref={(el) => {\n        if (el) setTempNode(el)\n      }}\n    />\n  )\n}\n\ninterface ContainerPortalProps extends React.PropsWithChildren<{}> {\n  containerRef: React.RefObject<HTMLElement | null>\n  /**\n   * @default false\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal that uses a custom container\n */\nconst ContainerPortal = (props: ContainerPortalProps) => {\n  const { children, containerRef, appendToParentPortal } = props\n  const containerEl = containerRef.current\n  const host =\n    containerEl ?? (typeof window !== \"undefined\" ? document.body : undefined)\n\n  const portal = useMemo(() => {\n    const node = containerEl?.ownerDocument.createElement(\"div\")\n    if (node) node.className = PORTAL_CLASSNAME\n    return node\n  }, [containerEl])\n\n  const [, forceUpdate] = useState({})\n  useSafeLayoutEffect(() => forceUpdate({}), [])\n\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return\n    host.appendChild(portal)\n    return () => {\n      host.removeChild(portal)\n    }\n  }, [portal, host])\n\n  if (host && portal) {\n    return createPortal(\n      <PortalContextProvider value={appendToParentPortal ? portal : null}>\n        {children}\n      </PortalContextProvider>,\n      portal,\n    )\n  }\n\n  return null\n}\n\nexport interface PortalProps {\n  /**\n   * The `ref` to the component where the portal will be attached to.\n   */\n  containerRef?: React.RefObject<HTMLElement | null>\n  /**\n   * The content or node you'll like to portal\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, the portal will check if it is within a parent portal\n   * and append itself to the parent's portal node.\n   * This provides nesting for portals.\n   *\n   * If `false`, the portal will always append to `document.body`\n   * regardless of nesting. It is used to opt out of portal nesting.\n   *\n   * @default true\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/portal\n */\n\nexport function Portal(props: PortalProps) {\n  const portalProps: PortalProps = {\n    appendToParentPortal: true,\n    ...props,\n  }\n\n  const { containerRef, ...rest } = portalProps\n  return containerRef ? (\n    <ContainerPortal containerRef={containerRef} {...rest} />\n  ) : (\n    <DefaultPortal {...rest} />\n  )\n}\n\nPortal.className = PORTAL_CLASSNAME\nPortal.selector = PORTAL_SELECTOR\n\nPortal.displayName = \"Portal\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}