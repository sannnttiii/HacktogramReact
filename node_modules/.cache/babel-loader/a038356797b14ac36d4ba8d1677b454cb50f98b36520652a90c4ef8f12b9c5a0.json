{"ast":null,"code":"'use client';\n\nimport { getToastStyle } from \"./chunk-LDADOVIM.mjs\";\n\n// src/toast.component.tsx\nimport { useTimeout } from \"@chakra-ui/react-use-timeout\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { runIfFn } from \"@chakra-ui/shared-utils\";\nimport { motion, useIsPresent } from \"framer-motion\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { memo, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar toastMotionVariants = {\n  initial: props => {\n    const {\n      position\n    } = props;\n    const dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\";\n    let factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1;\n    if (position === \"bottom\") factor = 1;\n    return {\n      opacity: 0,\n      [dir]: factor * 24\n    };\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1]\n    }\n  }\n};\nvar ToastComponent = memo(props => {\n  const {\n    id,\n    message,\n    onCloseComplete,\n    onRequestRemove,\n    requestClose = false,\n    position = \"bottom\",\n    duration = 5e3,\n    containerStyle,\n    motionVariants = toastMotionVariants,\n    toastSpacing = \"0.5rem\"\n  } = props;\n  const [delay, setDelay] = useState(duration);\n  const isPresent = useIsPresent();\n  useUpdateEffect(() => {\n    if (!isPresent) {\n      onCloseComplete == null ? void 0 : onCloseComplete();\n    }\n  }, [isPresent]);\n  useUpdateEffect(() => {\n    setDelay(duration);\n  }, [duration]);\n  const onMouseEnter = () => setDelay(null);\n  const onMouseLeave = () => setDelay(duration);\n  const close = () => {\n    if (isPresent) onRequestRemove();\n  };\n  useEffect(() => {\n    if (isPresent && requestClose) {\n      onRequestRemove();\n    }\n  }, [isPresent, requestClose, onRequestRemove]);\n  useTimeout(close, delay);\n  const containerStyles = useMemo(() => ({\n    pointerEvents: \"auto\",\n    maxWidth: 560,\n    minWidth: 300,\n    margin: toastSpacing,\n    ...containerStyle\n  }), [containerStyle, toastSpacing]);\n  const toastStyle = useMemo(() => getToastStyle(position), [position]);\n  return /* @__PURE__ */jsx(motion.div, {\n    layout: true,\n    className: \"chakra-toast\",\n    variants: motionVariants,\n    initial: \"initial\",\n    animate: \"animate\",\n    exit: \"exit\",\n    onHoverStart: onMouseEnter,\n    onHoverEnd: onMouseLeave,\n    custom: {\n      position\n    },\n    style: toastStyle,\n    children: /* @__PURE__ */jsx(chakra.div, {\n      role: \"status\",\n      \"aria-atomic\": \"true\",\n      className: \"chakra-toast__inner\",\n      __css: containerStyles,\n      children: runIfFn(message, {\n        id,\n        onClose: close\n      })\n    })\n  });\n});\nToastComponent.displayName = \"ToastComponent\";\nexport { ToastComponent };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,kBAAkB;AAC3B,SAASC,uBAAuB;AAChC,SAASC,eAAe;AACxB,SAASC,QAAQC,oBAA8B;AAC/C,SAASC,cAAc;AAIvB,SAASC,MAAMC,WAAWC,SAASC,gBAAgB;AA4G7C;AA1GN,IAAMC,sBAAgC;EACpCC,SAAUC,SAAU;IAClB,MAAM;MAAEC;IAAS,IAAID;IAErB,MAAME,MAAM,CAAC,OAAO,QAAQ,EAAEC,SAASF,QAAQ,IAAI,MAAM;IAEzD,IAAIG,SAAS,CAAC,aAAa,cAAc,EAAED,SAASF,QAAQ,IAAI,IAAI;IACpE,IAAIA,aAAa,UAAUG,SAAS;IAEpC,OAAO;MACLC,SAAS;MACT,CAACH,GAAG,GAAGE,SAAS;IAClB;EACF;EACAE,SAAS;IACPD,SAAS;IACTE,GAAG;IACHC,GAAG;IACHC,OAAO;IACPC,YAAY;MACVC,UAAU;MACVC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB;EACF;EACAC,MAAM;IACJR,SAAS;IACTI,OAAO;IACPC,YAAY;MACVC,UAAU;MACVC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;IACrB;EACF;AACF;AAMO,IAAME,iBAAiBpB,KAAMM,SAA+B;EACjE,MAAM;IACJe;IACAC;IACAC;IACAC;IACAC,eAAe;IACflB,WAAW;IACXU,WAAW;IACXS;IACAC,iBAAiBvB;IACjBwB,eAAe;EACjB,IAAItB;EAEJ,MAAM,CAACuB,OAAOC,QAAQ,IAAI3B,SAASc,QAAQ;EAC3C,MAAMc,YAAYjC,cAAa;EAE/BH,gBAAgB,MAAM;IACpB,IAAI,CAACoC,WAAW;MACdR;IACF;EACF,GAAG,CAACQ,SAAS,CAAC;EAEdpC,gBAAgB,MAAM;IACpBmC,SAASb,QAAQ;EACnB,GAAG,CAACA,QAAQ,CAAC;EAEb,MAAMe,eAAe,MAAMF,SAAS,IAAI;EACxC,MAAMG,eAAe,MAAMH,SAASb,QAAQ;EAE5C,MAAMiB,QAAQ,MAAM;IAClB,IAAIH,WAAWP,iBAAgB;EACjC;EAEAvB,UAAU,MAAM;IACd,IAAI8B,aAAaN,cAAc;MAC7BD,iBAAgB;IAClB;EACF,GAAG,CAACO,WAAWN,cAAcD,eAAe,CAAC;EAE7C9B,WAAWwC,OAAOL,KAAK;EAEvB,MAAMM,kBAAkBjC,QACtB,OAAO;IACLkC,eAAe;IACfC,UAAU;IACVC,UAAU;IACVC,QAAQX;IACR,GAAGF;EACL,IACA,CAACA,gBAAgBE,YAAY,EAC/B;EAEA,MAAMY,aAAatC,QAAQ,MAAMuC,cAAclC,QAAQ,GAAG,CAACA,QAAQ,CAAC;EAEpE,OACE,mBAACV,OAAO6C,KAAP;IACCC,QAAM;IACNC,WAAU;IACVC,UAAUlB;IACVtB,SAAQ;IACRO,SAAQ;IACRO,MAAK;IACL2B,cAAcd;IACde,YAAYd;IACZe,QAAQ;MAAEzC;IAAS;IACnB0C,OAAOT;IAEPU,6BAACnD,OAAO2C,KAAP;MACCS,MAAK;MACL,eAAY;MACZP,WAAU;MACVQ,OAAOjB;MAENe,kBAAQ5B,SAAS;QAAED;QAAIgC,SAASnB;MAAM,CAAC;IAAA;EAC1C,EACF;AAEJ,CAAC;AAEDd,eAAekC,cAAc","names":["useTimeout","useUpdateEffect","runIfFn","motion","useIsPresent","chakra","memo","useEffect","useMemo","useState","toastMotionVariants","initial","props","position","dir","includes","factor","opacity","animate","y","x","scale","transition","duration","ease","exit","ToastComponent","id","message","onCloseComplete","onRequestRemove","requestClose","containerStyle","motionVariants","toastSpacing","delay","setDelay","isPresent","onMouseEnter","onMouseLeave","close","containerStyles","pointerEvents","maxWidth","minWidth","margin","toastStyle","getToastStyle","div","layout","className","variants","onHoverStart","onHoverEnd","custom","style","children","role","__css","onClose","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/toast/src/toast.component.tsx"],"sourcesContent":["import { useTimeout } from \"@chakra-ui/react-use-timeout\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { motion, useIsPresent, Variants } from \"framer-motion\"\nimport { chakra } from \"@chakra-ui/system\"\nimport type { ToastOptions } from \"./toast.types\"\nimport { getToastStyle } from \"./toast.utils\"\nimport { ToastProviderProps } from \"./toast.provider\"\nimport { memo, useEffect, useMemo, useState } from \"react\"\n\nconst toastMotionVariants: Variants = {\n  initial: (props) => {\n    const { position } = props\n\n    const dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\"\n\n    let factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1\n    if (position === \"bottom\") factor = 1\n\n    return {\n      opacity: 0,\n      [dir]: factor * 24,\n    }\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n}\n\nexport interface ToastComponentProps\n  extends ToastOptions,\n    Pick<ToastProviderProps, \"motionVariants\" | \"toastSpacing\"> {}\n\nexport const ToastComponent = memo((props: ToastComponentProps) => {\n  const {\n    id,\n    message,\n    onCloseComplete,\n    onRequestRemove,\n    requestClose = false,\n    position = \"bottom\",\n    duration = 5000,\n    containerStyle,\n    motionVariants = toastMotionVariants,\n    toastSpacing = \"0.5rem\",\n  } = props\n\n  const [delay, setDelay] = useState(duration)\n  const isPresent = useIsPresent()\n\n  useUpdateEffect(() => {\n    if (!isPresent) {\n      onCloseComplete?.()\n    }\n  }, [isPresent])\n\n  useUpdateEffect(() => {\n    setDelay(duration)\n  }, [duration])\n\n  const onMouseEnter = () => setDelay(null)\n  const onMouseLeave = () => setDelay(duration)\n\n  const close = () => {\n    if (isPresent) onRequestRemove()\n  }\n\n  useEffect(() => {\n    if (isPresent && requestClose) {\n      onRequestRemove()\n    }\n  }, [isPresent, requestClose, onRequestRemove])\n\n  useTimeout(close, delay)\n\n  const containerStyles = useMemo(\n    () => ({\n      pointerEvents: \"auto\",\n      maxWidth: 560,\n      minWidth: 300,\n      margin: toastSpacing,\n      ...containerStyle,\n    }),\n    [containerStyle, toastSpacing],\n  )\n\n  const toastStyle = useMemo(() => getToastStyle(position), [position])\n\n  return (\n    <motion.div\n      layout\n      className=\"chakra-toast\"\n      variants={motionVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      onHoverStart={onMouseEnter}\n      onHoverEnd={onMouseLeave}\n      custom={{ position }}\n      style={toastStyle}\n    >\n      <chakra.div\n        role=\"status\"\n        aria-atomic=\"true\"\n        className=\"chakra-toast__inner\"\n        __css={containerStyles}\n      >\n        {runIfFn(message, { id, onClose: close })}\n      </chakra.div>\n    </motion.div>\n  )\n})\n\nToastComponent.displayName = \"ToastComponent\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}