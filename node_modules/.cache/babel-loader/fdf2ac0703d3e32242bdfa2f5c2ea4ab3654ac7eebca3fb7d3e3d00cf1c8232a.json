{"ast":null,"code":"// src/index.ts\nimport { isDom } from \"@zag-js/dom-query\";\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar hasBlurredWindowRecently = false;\nvar handlers = /* @__PURE__ */new Set();\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\nfunction isValidKey(e) {\n  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\n    let matches = false;\n    try {\n      matches = target.matches(\":focus-visible\");\n    } catch {}\n    if (matches) return;\n    trigger(\"pointer\", event);\n  }\n}\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\nfunction onClickEvent(e) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    modality = \"virtual\";\n  }\n}\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\";\n    trigger(\"virtual\", event);\n  }\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return;\n  }\n  const {\n    focus\n  } = HTMLElement.prototype;\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    focus.apply(this, args);\n  };\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  document.addEventListener(\"click\", onClickEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n  hasSetup = true;\n}\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n  const handler = () => fn(isFocusVisible());\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\nfunction trackInteractionModality(fn) {\n  setupGlobalFocusEvents();\n  fn(modality);\n  const handler = () => fn(modality);\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\nfunction setInteractionModality(value) {\n  modality = value;\n  trigger(value, null);\n}\nfunction getInteractionModality() {\n  return modality;\n}\nexport { getInteractionModality, setInteractionModality, trackFocusVisible, trackInteractionModality };","map":{"version":3,"mappings":"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","names":["isDom","hasSetup","modality","hasEventBeforeFocus","hasBlurredWindowRecently","handlers","Set","trigger","event","forEach","handler","isMac","window","navigator","test","platform","isValidKey","e","metaKey","altKey","ctrlKey","key","onKeyboardEvent","onPointerEvent","type","target","composedPath","matches","isVirtualClick","mozInputSource","isTrusted","detail","pointerType","onClickEvent","onWindowFocus","document","onWindowBlur","isFocusVisible","setupGlobalFocusEvents","focus","HTMLElement","prototype","focusElement","args","apply","addEventListener","PointerEvent","trackFocusVisible","fn","add","delete","trackInteractionModality","setInteractionModality","value","getInteractionModality"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@zag-js/focus-visible/src/index.ts"],"sourcesContent":["import { isDom } from \"@zag-js/dom-query\"\n\ntype Modality = \"keyboard\" | \"pointer\" | \"virtual\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent | null) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\nlet hasBlurredWindowRecently = false\n\nconst handlers = new Set<Handler>()\n\nfunction trigger(modality: Modality, event: HandlerEvent | null) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(e: KeyboardEvent) {\n  return !(\n    e.metaKey ||\n    (!isMac && e.altKey) ||\n    e.ctrlKey ||\n    e.key === \"Control\" ||\n    e.key === \"Shift\" ||\n    e.key === \"Meta\"\n  )\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    const target = event.composedPath ? event.composedPath()[0] : event.target\n\n    let matches = false\n    try {\n      matches = (target as any).matches(\":focus-visible\")\n    } catch {}\n\n    if (matches) return\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) return true\n  return event.detail === 0 && !(event as PointerEvent).pointerType\n}\n\nfunction onClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true\n    modality = \"virtual\"\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\"\n    trigger(\"virtual\", event)\n  }\n\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = true\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n  document.addEventListener(\"click\", onClickEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function trackInteractionModality(fn: (value: Modality | null) => void) {\n  setupGlobalFocusEvents()\n\n  fn(modality)\n  const handler = () => fn(modality)\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function setInteractionModality(value: Modality) {\n  modality = value\n  trigger(value, null)\n}\n\nexport function getInteractionModality() {\n  return modality\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}