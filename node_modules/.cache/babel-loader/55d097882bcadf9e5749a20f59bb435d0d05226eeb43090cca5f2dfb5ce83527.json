{"ast":null,"code":"'use client';\n\n// src/env.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext, useContext, useMemo, useReducer, useRef } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar EnvironmentContext = createContext({\n  getDocument() {\n    return document;\n  },\n  getWindow() {\n    return window;\n  }\n});\nEnvironmentContext.displayName = \"EnvironmentContext\";\nfunction useEnvironment() {\n  let {\n    defer\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [, forceUpdate] = useReducer(c => c + 1, 0);\n  useSafeLayoutEffect(() => {\n    if (!defer) return;\n    forceUpdate();\n  }, [defer]);\n  return useContext(EnvironmentContext);\n}\nfunction EnvironmentProvider(props) {\n  const {\n    children,\n    environment: environmentProp,\n    disabled\n  } = props;\n  const ref = useRef(null);\n  const context = useMemo(() => {\n    if (environmentProp) return environmentProp;\n    return {\n      getDocument: () => {\n        var _a, _b;\n        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n      },\n      getWindow: () => {\n        var _a, _b;\n        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument.defaultView) != null ? _b : window;\n      }\n    };\n  }, [environmentProp]);\n  const showSpan = !disabled || !environmentProp;\n  return /* @__PURE__ */jsxs(EnvironmentContext.Provider, {\n    value: context,\n    children: [children, showSpan && /* @__PURE__ */jsx(\"span\", {\n      id: \"__chakra_env\",\n      hidden: true,\n      ref\n    })]\n  });\n}\nEnvironmentProvider.displayName = \"EnvironmentProvider\";\nexport { useEnvironment, EnvironmentProvider };","map":{"version":3,"mappings":";;;AAAA,SAASA,2BAA2B;AACpC,SAASC,eAAeC,YAAYC,SAASC,YAAYC,cAAc;AAkDnE,SAEeC,KAFfC;AA3CJ,IAAMC,qBAAqBP,cAA2B;EACpDQ,cAAc;IACZ,OAAOC;EACT;EACAC,YAAY;IACV,OAAOC;EACT;AACF,CAAC;AAEDJ,mBAAmBK,cAAc;AAE1B,SAASC,iBAAoD;EAAA,IAArC;IAAEC;EAAM,wEAAyB,CAAC;EAC/D,MAAM,GAAGC,WAAW,IAAIZ,WAAYa,KAAMA,IAAI,GAAG,CAAC;EAElDjB,oBAAoB,MAAM;IACxB,IAAI,CAACe,OAAO;IACZC,aAAY;EACd,GAAG,CAACD,KAAK,CAAC;EAEV,OAAOb,WAAWM,kBAAkB;AACtC;AAQO,SAASU,oBAAoBC,OAAiC;EACnE,MAAM;IAAEC;IAAUC,aAAaC;IAAiBC;EAAS,IAAIJ;EAC7D,MAAMK,MAAMnB,OAAwB,IAAI;EAExC,MAAMoB,UAAUtB,QAAqB,MAAM;IACzC,IAAImB,iBAAiB,OAAOA;IAC5B,OAAO;MACLb,aAAa,MAAG;QA3CtB;QA2CyB,uBAAIiB,YAAJ,mBAAaC,kBAAb,YAA8BjB;MAAA;MACjDC,WAAW,MAAG;QA5CpB;QA4CuB,uBAAIe,YAAJ,mBAAaC,cAAcC,gBAA3B,YAA0ChB;MAAA;IAC7D;EACF,GAAG,CAACU,eAAe,CAAC;EAEpB,MAAMO,WAAW,CAACN,YAAY,CAACD;EAE/B,OACE,oBAACd,mBAAmBsB,UAAnB;IAA4BC,OAAON;IACjCL,qBACAS,YAAY,mBAAC;MAAKG,IAAG;MAAeC,QAAM;MAACT;IAAA,CAAU;EAAA,CACxD;AAEJ;AAEAN,oBAAoBL,cAAc","names":["useSafeLayoutEffect","createContext","useContext","useMemo","useReducer","useRef","jsx","jsxs","EnvironmentContext","getDocument","document","getWindow","window","displayName","useEnvironment","defer","forceUpdate","c","EnvironmentProvider","props","children","environment","environmentProp","disabled","ref","context","current","ownerDocument","defaultView","showSpan","Provider","value","id","hidden"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-env/src/env.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { createContext, useContext, useMemo, useReducer, useRef } from \"react\"\n\ninterface Environment {\n  getWindow: () => Window\n  getDocument: () => Document\n}\n\nconst EnvironmentContext = createContext<Environment>({\n  getDocument() {\n    return document\n  },\n  getWindow() {\n    return window\n  },\n})\n\nEnvironmentContext.displayName = \"EnvironmentContext\"\n\nexport function useEnvironment({ defer }: { defer?: boolean } = {}) {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0)\n\n  useSafeLayoutEffect(() => {\n    if (!defer) return\n    forceUpdate()\n  }, [defer])\n\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  disabled?: boolean\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp, disabled } = props\n  const ref = useRef<HTMLSpanElement>(null)\n\n  const context = useMemo<Environment>(() => {\n    if (environmentProp) return environmentProp\n    return {\n      getDocument: () => ref.current?.ownerDocument ?? document,\n      getWindow: () => ref.current?.ownerDocument.defaultView ?? window,\n    }\n  }, [environmentProp])\n\n  const showSpan = !disabled || !environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n      {showSpan && <span id=\"__chakra_env\" hidden ref={ref} />}\n    </EnvironmentContext.Provider>\n  )\n}\n\nEnvironmentProvider.displayName = \"EnvironmentProvider\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}