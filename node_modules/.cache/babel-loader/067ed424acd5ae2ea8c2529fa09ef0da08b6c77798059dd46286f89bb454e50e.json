{"ast":null,"code":"'use client';\n\n// src/utils.ts\nvar toVar = (value, fallback) => ({\n  var: value,\n  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`\n});\nvar cssVars = {\n  arrowShadowColor: toVar(\"--popper-arrow-shadow-color\"),\n  arrowSize: toVar(\"--popper-arrow-size\", \"8px\"),\n  arrowSizeHalf: toVar(\"--popper-arrow-size-half\"),\n  arrowBg: toVar(\"--popper-arrow-bg\"),\n  transformOrigin: toVar(\"--popper-transform-origin\"),\n  arrowOffset: toVar(\"--popper-arrow-offset\")\n};\nfunction getBoxShadow(placement) {\n  if (placement.includes(\"top\")) return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"bottom\")) return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"right\")) return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"left\")) return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`;\n}\nvar transforms = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\"\n};\nvar toTransformOrigin = placement => transforms[placement];\nvar defaultEventListeners = {\n  scroll: true,\n  resize: true\n};\nfunction getEventListenerOptions(value) {\n  let eventListeners;\n  if (typeof value === \"object\") {\n    eventListeners = {\n      enabled: true,\n      options: {\n        ...defaultEventListeners,\n        ...value\n      }\n    };\n  } else {\n    eventListeners = {\n      enabled: value,\n      options: defaultEventListeners\n    };\n  }\n  return eventListeners;\n}\nexport { cssVars, getBoxShadow, toTransformOrigin, getEventListenerOptions };","map":{"version":3,"mappings":";;;AAEA,IAAMA,QAAQ,CAACC,OAAeC,cAAuB;EACnDC,KAAKF;EACLG,QAAQF,WAAW,OAAOD,UAAUC,cAAc,OAAOD;AAC3D;AAEO,IAAMI,UAAU;EACrBC,kBAAkBN,MAAM,6BAA6B;EACrDO,WAAWP,MAAM,uBAAuB,KAAK;EAC7CQ,eAAeR,MAAM,0BAA0B;EAC/CS,SAAST,MAAM,mBAAmB;EAClCU,iBAAiBV,MAAM,2BAA2B;EAClDW,aAAaX,MAAM,uBAAuB;AAC5C;AAEO,SAASY,aAAaC,WAAsB;EACjD,IAAIA,UAAUC,SAAS,KAAK,GAC1B,OAAO;EACT,IAAID,UAAUC,SAAS,QAAQ,GAC7B,OAAO;EACT,IAAID,UAAUC,SAAS,OAAO,GAC5B,OAAO;EACT,IAAID,UAAUC,SAAS,MAAM,GAC3B,OAAO;AACX;AAEA,IAAMC,aAAqC;EACzCC,KAAK;EACL,aAAa;EACb,WAAW;EAEXC,QAAQ;EACR,gBAAgB;EAChB,cAAc;EAEdC,MAAM;EACN,cAAc;EACd,YAAY;EAEZC,OAAO;EACP,eAAe;EACf,aAAa;AACf;AAEO,IAAMC,oBAAqBP,aAAyBE,WAAWF,SAAS;AAE/E,IAAMQ,wBAAwB;EAC5BC,QAAQ;EACRC,QAAQ;AACV;AAEO,SAASC,wBACdvB,OACA;EACA,IAAIwB;EAIJ,IAAI,OAAOxB,UAAU,UAAU;IAC7BwB,iBAAiB;MACfC,SAAS;MACTC,SAAS;QAAE,GAAGN;QAAuB,GAAGpB;MAAM;IAChD;EACF,OAAO;IACLwB,iBAAiB;MACfC,SAASzB;MACT0B,SAASN;IACX;EACF;EACA,OAAOI;AACT","names":["toVar","value","fallback","var","varRef","cssVars","arrowShadowColor","arrowSize","arrowSizeHalf","arrowBg","transformOrigin","arrowOffset","getBoxShadow","placement","includes","transforms","top","bottom","left","right","toTransformOrigin","defaultEventListeners","scroll","resize","getEventListenerOptions","eventListeners","enabled","options"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/popper/src/utils.ts"],"sourcesContent":["import { Placement } from \"@popperjs/core\"\n\nconst toVar = (value: string, fallback?: string) => ({\n  var: value,\n  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`,\n})\n\nexport const cssVars = {\n  arrowShadowColor: toVar(\"--popper-arrow-shadow-color\"),\n  arrowSize: toVar(\"--popper-arrow-size\", \"8px\"),\n  arrowSizeHalf: toVar(\"--popper-arrow-size-half\"),\n  arrowBg: toVar(\"--popper-arrow-bg\"),\n  transformOrigin: toVar(\"--popper-transform-origin\"),\n  arrowOffset: toVar(\"--popper-arrow-offset\"),\n} as const\n\nexport function getBoxShadow(placement: Placement) {\n  if (placement.includes(\"top\"))\n    return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"bottom\"))\n    return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"right\"))\n    return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"left\"))\n    return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`\n}\n\nconst transforms: Record<string, string> = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\",\n}\n\nexport const toTransformOrigin = (placement: Placement) => transforms[placement]\n\nconst defaultEventListeners = {\n  scroll: true,\n  resize: true,\n}\n\nexport function getEventListenerOptions(\n  value?: boolean | Partial<typeof defaultEventListeners>,\n) {\n  let eventListeners: {\n    enabled?: boolean\n    options?: typeof defaultEventListeners\n  }\n  if (typeof value === \"object\") {\n    eventListeners = {\n      enabled: true,\n      options: { ...defaultEventListeners, ...value },\n    }\n  } else {\n    eventListeners = {\n      enabled: value,\n      options: defaultEventListeners,\n    }\n  }\n  return eventListeners\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}