{"ast":null,"code":"'use client';\n\nimport { getClosestValue } from \"./chunk-C53CKZDP.mjs\";\nimport { useBreakpoint } from \"./chunk-6KW5I77S.mjs\";\n\n// src/use-breakpoint-value.ts\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\";\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  const opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint) return;\n  const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    let [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\nexport { useBreakpointValue };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,gBAAgB;AACzB,SAASC,gBAAgB;AACzB,SAASC,6BAA6B;AAgB/B,SAASC,mBACdC,QACAC,KACe;EArBjB;EAsBE,MAAMC,OAAOL,SAASI,GAAG,IAAIA,MAAM;IAAEE,UAAUF,oBAAO;EAAO;EAC7D,MAAMG,aAAaC,cAAcH,IAAI;EACrC,MAAMI,QAAQV,UAAS;EAEvB,IAAI,CAACQ,YAAY;EAKjB,MAAMG,cAAcC,MAAMC,OAAKC,WAAMC,kBAAN,mBAAqBC,SAAQ,EAAE;EAE9D,MAAMC,MAAML,MAAMM,QAAQd,MAAM,IAC5Be,OAAOC,YACLD,OAAOE,QAAQnB,sBAAsBE,QAAQO,WAAW,CAAC,EAAEW,IACzD;IAAA,IAAC,CAACC,KAAKC,KAAK;IAAA,OAAM,CAACD,KAAKC,KAAK;EAAA,EAC/B,CACF,GACApB;EAEJ,OAAOqB,gBAAgBR,KAAKT,YAAYG,WAAW;AACrD","names":["useTheme","isObject","arrayToObjectNotation","useBreakpointValue","values","arg","opts","fallback","breakpoint","useBreakpoint","theme","breakpoints","Array","from","_a","__breakpoints","keys","obj","isArray","Object","fromEntries","entries","map","key","value","getClosestValue"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/media-query/src/use-breakpoint-value.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}