{"ast":null,"code":"'use client';\n\nimport { TRANSITION_EASINGS, withDelay } from \"./chunk-6NHXDBFO.mjs\";\n\n// src/collapse.tsx\nimport { cx, warn } from \"@chakra-ui/shared-utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar isNumeric = value => value != null && parseInt(value.toString(), 10) > 0;\nvar defaultTransitions = {\n  exit: {\n    height: {\n      duration: 0.2,\n      ease: TRANSITION_EASINGS.ease\n    },\n    opacity: {\n      duration: 0.3,\n      ease: TRANSITION_EASINGS.ease\n    }\n  },\n  enter: {\n    height: {\n      duration: 0.3,\n      ease: TRANSITION_EASINGS.ease\n    },\n    opacity: {\n      duration: 0.4,\n      ease: TRANSITION_EASINGS.ease\n    }\n  }\n};\nvar variants = {\n  exit: _ref => {\n    let {\n      animateOpacity,\n      startingHeight,\n      transition,\n      transitionEnd,\n      delay\n    } = _ref;\n    var _a;\n    return {\n      ...(animateOpacity && {\n        opacity: isNumeric(startingHeight) ? 1 : 0\n      }),\n      height: startingHeight,\n      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,\n      transition: (_a = transition == null ? void 0 : transition.exit) != null ? _a : withDelay.exit(defaultTransitions.exit, delay)\n    };\n  },\n  enter: _ref2 => {\n    let {\n      animateOpacity,\n      endingHeight,\n      transition,\n      transitionEnd,\n      delay\n    } = _ref2;\n    var _a;\n    return {\n      ...(animateOpacity && {\n        opacity: 1\n      }),\n      height: endingHeight,\n      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,\n      transition: (_a = transition == null ? void 0 : transition.enter) != null ? _a : withDelay.enter(defaultTransitions.enter, delay)\n    };\n  }\n};\nvar Collapse = forwardRef((props, ref) => {\n  const {\n    in: isOpen,\n    unmountOnExit,\n    animateOpacity = true,\n    startingHeight = 0,\n    endingHeight = \"auto\",\n    style,\n    className,\n    transition,\n    transitionEnd,\n    ...rest\n  } = props;\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setMounted(true);\n    });\n    return () => clearTimeout(timeout);\n  }, []);\n  warn({\n    condition: Number(startingHeight) > 0 && !!unmountOnExit,\n    message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`\n  });\n  const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;\n  const custom = {\n    startingHeight,\n    endingHeight,\n    animateOpacity,\n    transition: !mounted ? {\n      enter: {\n        duration: 0\n      }\n    } : transition,\n    transitionEnd: {\n      enter: transitionEnd == null ? void 0 : transitionEnd.enter,\n      exit: unmountOnExit ? transitionEnd == null ? void 0 : transitionEnd.exit : {\n        ...(transitionEnd == null ? void 0 : transitionEnd.exit),\n        display: hasStartingHeight ? \"block\" : \"none\"\n      }\n    }\n  };\n  const show = unmountOnExit ? isOpen : true;\n  const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\";\n  return /* @__PURE__ */jsx(AnimatePresence, {\n    initial: false,\n    custom,\n    children: show && /* @__PURE__ */jsx(motion.div, {\n      ref,\n      ...rest,\n      className: cx(\"chakra-collapse\", className),\n      style: {\n        overflow: \"hidden\",\n        display: \"block\",\n        ...style\n      },\n      custom,\n      variants,\n      initial: unmountOnExit ? \"exit\" : false,\n      animate,\n      exit: \"exit\"\n    })\n  });\n});\nCollapse.displayName = \"Collapse\";\nexport { Collapse };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,IAAIC,YAAY;AACzB,SACEC,iBAEAC,cAEK;AACP,SAASC,YAAYC,WAAWC,gBAAgB;AAqItC;AA7HV,IAAMC,YAAaC,SACjBA,SAAS,QAAQC,SAASD,MAAME,UAAS,EAAG,EAAE,IAAI;AAoBpD,IAAMC,qBAAqB;EACzBC,MAAM;IACJC,QAAQ;MAAEC,UAAU;MAAKC,MAAMC,mBAAmBD;IAAK;IACvDE,SAAS;MAAEH,UAAU;MAAKC,MAAMC,mBAAmBD;IAAK;EAC1D;EACAG,OAAO;IACLL,QAAQ;MAAEC,UAAU;MAAKC,MAAMC,mBAAmBD;IAAK;IACvDE,SAAS;MAAEH,UAAU;MAAKC,MAAMC,mBAAmBD;IAAK;EAC1D;AACF;AAEA,IAAMI,WAAsC;EAC1CP,MAAM,QAMH;IAAA,IANI;MACLQ;MACAC;MACAC;MACAC;MACAC;IACF;IAtDF;IAsDS;MACL,IAAIJ,kBAAkB;QAAEH,SAASV,UAAUc,cAAc,IAAI,IAAI;MAAE;MACnER,QAAQQ;MACRE,eAAeA,+CAAeX;MAC9BU,aACEG,8CAAYb,SAAZ,YAAoBc,UAAUd,KAAKD,mBAAmBC,MAAMY,KAAK;IACrE;EAAA;EACAN,OAAO,SAMJ;IAAA,IANK;MACNE;MACAO;MACAL;MACAC;MACAC;IACF;IAnEF;IAmES;MACL,IAAIJ,kBAAkB;QAAEH,SAAS;MAAE;MACnCJ,QAAQc;MACRJ,eAAeA,+CAAeL;MAC9BI,aACEG,8CAAYP,UAAZ,YAAqBQ,UAAUR,MAAMP,mBAAmBO,OAAOM,KAAK;IACxE;EAAA;AACF;AAQO,IAAMI,WAAWxB,WACtB,CAACyB,OAAOC,QAAQ;EACd,MAAM;IACJC,IAAIC;IACJC;IACAb,iBAAiB;IACjBC,iBAAiB;IACjBM,eAAe;IACfO;IACAC;IACAb;IACAC;IACA,GAAGa;EACL,IAAIP;EAEJ,MAAM,CAACQ,SAASC,UAAU,IAAIhC,SAAS,KAAK;EAC5CD,UAAU,MAAM;IACd,MAAMkC,UAAUC,WAAW,MAAM;MAC/BF,WAAW,IAAI;IACjB,CAAC;IACD,OAAO,MAAMG,aAAaF,OAAO;EACnC,GAAG,EAAE;EAQLtC,KAAK;IACHyC,WAAWC,OAAOtB,cAAc,IAAI,KAAK,CAAC,CAACY;IAC3CW,SAAS;EACX,CAAC;EAED,MAAMC,oBAAoBC,WAAWzB,eAAeX,UAAU,IAAI;EAElE,MAAMqC,SAAS;IACb1B;IACAM;IACAP;IACAE,YAAY,CAACe,UAAU;MAAEnB,OAAO;QAAEJ,UAAU;MAAE;IAAE,IAAIQ;IACpDC,eAAe;MACbL,OAAOK,+CAAeL;MACtBN,MAAMqB,gBACFV,+CAAeX,OACf;QACE,IAAGW,+CAAeX;QAClBoC,SAASH,oBAAoB,UAAU;MACzC;IACN;EACF;EAEA,MAAMI,OAAOhB,gBAAgBD,SAAS;EACtC,MAAMkB,UAAUlB,UAAUC,gBAAgB,UAAU;EAEpD,OACE,mBAAC/B;IAAgBiD,SAAS;IAAOJ;IAC9BK,kBACC,mBAACjD,OAAOkD,KAAP;MACCvB;MACC,GAAGM;MACJD,WAAWnC,GAAG,mBAAmBmC,SAAS;MAC1CD,OAAO;QACLoB,UAAU;QACVN,SAAS;QACT,GAAGd;MACL;MACAa;MACA5B;MACAgC,SAASlB,gBAAgB,SAAS;MAClCiB;MACAtC,MAAK;IAAA;EACP,CAEJ;AAEJ,EACF;AAEAgB,SAAS2B,cAAc","names":["cx","warn","AnimatePresence","motion","forwardRef","useEffect","useState","isNumeric","value","parseInt","toString","defaultTransitions","exit","height","duration","ease","TRANSITION_EASINGS","opacity","enter","variants","animateOpacity","startingHeight","transition","transitionEnd","delay","_a","withDelay","endingHeight","Collapse","props","ref","in","isOpen","unmountOnExit","style","className","rest","mounted","setMounted","timeout","setTimeout","clearTimeout","condition","Number","message","hasStartingHeight","parseFloat","custom","display","show","animate","initial","children","div","overflow","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/transition/src/collapse.tsx"],"sourcesContent":["import { cx, warn } from \"@chakra-ui/shared-utils\"\nimport {\n  AnimatePresence,\n  HTMLMotionProps,\n  motion,\n  Variants as _Variants,\n} from \"framer-motion\"\nimport { forwardRef, useEffect, useState } from \"react\"\nimport {\n  TRANSITION_EASINGS,\n  Variants,\n  withDelay,\n  WithTransitionConfig,\n} from \"./transition-utils\"\n\nconst isNumeric = (value?: string | number) =>\n  value != null && parseInt(value.toString(), 10) > 0\n\nexport interface CollapseOptions {\n  /**\n   * If `true`, the opacity of the content will be animated\n   * @default true\n   */\n  animateOpacity?: boolean\n  /**\n   * The height you want the content in its collapsed state.\n   * @default 0\n   */\n  startingHeight?: number | string\n  /**\n   * The height you want the content in its expanded state.\n   * @default \"auto\"\n   */\n  endingHeight?: number | string\n}\n\nconst defaultTransitions = {\n  exit: {\n    height: { duration: 0.2, ease: TRANSITION_EASINGS.ease },\n    opacity: { duration: 0.3, ease: TRANSITION_EASINGS.ease },\n  },\n  enter: {\n    height: { duration: 0.3, ease: TRANSITION_EASINGS.ease },\n    opacity: { duration: 0.4, ease: TRANSITION_EASINGS.ease },\n  },\n}\n\nconst variants: Variants<CollapseOptions> = {\n  exit: ({\n    animateOpacity,\n    startingHeight,\n    transition,\n    transitionEnd,\n    delay,\n  }) => ({\n    ...(animateOpacity && { opacity: isNumeric(startingHeight) ? 1 : 0 }),\n    height: startingHeight,\n    transitionEnd: transitionEnd?.exit,\n    transition:\n      transition?.exit ?? withDelay.exit(defaultTransitions.exit, delay),\n  }),\n  enter: ({\n    animateOpacity,\n    endingHeight,\n    transition,\n    transitionEnd,\n    delay,\n  }) => ({\n    ...(animateOpacity && { opacity: 1 }),\n    height: endingHeight,\n    transitionEnd: transitionEnd?.enter,\n    transition:\n      transition?.enter ?? withDelay.enter(defaultTransitions.enter, delay),\n  }),\n}\n\nexport type ICollapse = CollapseProps\n\nexport interface CollapseProps\n  extends WithTransitionConfig<HTMLMotionProps<\"div\">>,\n    CollapseOptions {}\n\nexport const Collapse = forwardRef<HTMLDivElement, CollapseProps>(\n  (props, ref) => {\n    const {\n      in: isOpen,\n      unmountOnExit,\n      animateOpacity = true,\n      startingHeight = 0,\n      endingHeight = \"auto\",\n      style,\n      className,\n      transition,\n      transitionEnd,\n      ...rest\n    } = props\n\n    const [mounted, setMounted] = useState(false)\n    useEffect(() => {\n      const timeout = setTimeout(() => {\n        setMounted(true)\n      })\n      return () => clearTimeout(timeout)\n    }, [])\n\n    /**\n     * Warn ðŸš¨: `startingHeight` and `unmountOnExit` are mutually exclusive\n     *\n     * If you specify a starting height, the collapsed needs to be mounted\n     * for the height to take effect.\n     */\n    warn({\n      condition: Number(startingHeight) > 0 && !!unmountOnExit,\n      message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`,\n    })\n\n    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0\n\n    const custom = {\n      startingHeight,\n      endingHeight,\n      animateOpacity,\n      transition: !mounted ? { enter: { duration: 0 } } : transition,\n      transitionEnd: {\n        enter: transitionEnd?.enter,\n        exit: unmountOnExit\n          ? transitionEnd?.exit\n          : {\n              ...transitionEnd?.exit,\n              display: hasStartingHeight ? \"block\" : \"none\",\n            },\n      },\n    }\n\n    const show = unmountOnExit ? isOpen : true\n    const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\"\n\n    return (\n      <AnimatePresence initial={false} custom={custom}>\n        {show && (\n          <motion.div\n            ref={ref}\n            {...rest}\n            className={cx(\"chakra-collapse\", className)}\n            style={{\n              overflow: \"hidden\",\n              display: \"block\",\n              ...style,\n            }}\n            custom={custom}\n            variants={variants as _Variants}\n            initial={unmountOnExit ? \"exit\" : false}\n            animate={animate}\n            exit=\"exit\"\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nCollapse.displayName = \"Collapse\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}