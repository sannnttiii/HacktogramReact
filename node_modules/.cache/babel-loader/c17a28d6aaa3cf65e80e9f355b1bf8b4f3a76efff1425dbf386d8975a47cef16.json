{"ast":null,"code":"'use client';\n\nimport { useDrawerContext } from \"./chunk-MCHDHFCQ.mjs\";\nimport { ModalFocusScope } from \"./chunk-NABYTFTG.mjs\";\nimport { useModalContext, useModalStyles } from \"./chunk-MSA2NPQT.mjs\";\n\n// src/drawer-content.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MotionDiv = chakra(Slide);\nvar DrawerContent = forwardRef((props, ref) => {\n  const {\n    className,\n    children,\n    motionProps,\n    containerProps: rootProps,\n    ...rest\n  } = props;\n  const {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  const dialogProps = getDialogProps(rest, ref);\n  const containerProps = getDialogContainerProps(rootProps);\n  const _className = cx(\"chakra-modal__content\", className);\n  const styles = useModalStyles();\n  const dialogStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.dialog\n  };\n  const dialogContainerStyles = {\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"$100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    ...styles.dialogContainer\n  };\n  const {\n    placement\n  } = useDrawerContext();\n  return /* @__PURE__ */jsx(ModalFocusScope, {\n    children: /* @__PURE__ */jsx(chakra.div, {\n      ...containerProps,\n      className: \"chakra-modal__content-container\",\n      __css: dialogContainerStyles,\n      children: /* @__PURE__ */jsx(MotionDiv, {\n        motionProps,\n        direction: placement,\n        in: isOpen,\n        className: _className,\n        ...dialogProps,\n        __css: dialogStyles,\n        children\n      })\n    })\n  });\n});\nDrawerContent.displayName = \"DrawerContent\";\nexport { DrawerContent };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,UAAU;AACnB,SACEC,QACAC,kBAGK;AACP,SAASC,aAAa;AAwEZ;AAjEV,IAAMC,YAAYH,OAAOE,KAAK;AAiBvB,IAAME,gBAAgBH,WAC3B,CAACI,OAAOC,QAAQ;EACd,MAAM;IACJC;IACAC;IACAC;IACAC,gBAAgBC;IAChB,GAAGC;EACL,IAAIP;EAEJ,MAAM;IAAEQ;IAAgBC;IAAyBC;EAAO,IACtDC,iBAAgB;EAElB,MAAMC,cAAcJ,eAAeD,MAAMN,GAAG;EAC5C,MAAMI,iBAAiBI,wBAAwBH,SAAS;EAExD,MAAMO,aAAanB,GAAG,yBAAyBQ,SAAS;EAExD,MAAMY,SAASC,gBAAe;EAE9B,MAAMC,eAAkC;IACtCC,SAAS;IACTC,eAAe;IACfC,UAAU;IACVC,OAAO;IACPC,SAAS;IACT,GAAGP,OAAOQ;EACZ;EAEA,MAAMC,wBAA2C;IAC/CN,SAAS;IACTG,OAAO;IACPI,QAAQ;IACRL,UAAU;IACVM,MAAM;IACNC,KAAK;IACL,GAAGZ,OAAOa;EACZ;EAEA,MAAM;IAAEC;EAAU,IAAIC,kBAAiB;EAEvC,OACE,mBAACC;IACC3B,6BAACR,OAAOoC,KAAP;MACE,GAAG1B;MACJH,WAAU;MACV8B,OAAOT;MAEPpB,6BAACL;QACCM;QACA6B,WAAWL;QACXM,IAAIxB;QACJR,WAAWW;QACV,GAAGD;QACJoB,OAAOhB;QAENb;MAAA;IACH;EACF,CACF;AAEJ,EACF;AAEAJ,cAAcoC,cAAc","names":["cx","chakra","forwardRef","Slide","MotionDiv","DrawerContent","props","ref","className","children","motionProps","containerProps","rootProps","rest","getDialogProps","getDialogContainerProps","isOpen","useModalContext","dialogProps","_className","styles","useModalStyles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","placement","useDrawerContext","ModalFocusScope","div","__css","direction","in","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/modal/src/drawer-content.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { Slide } from \"@chakra-ui/transition\"\nimport type { HTMLMotionProps } from \"framer-motion\"\n\nimport { useDrawerContext } from \"./drawer\"\nimport { useModalContext, useModalStyles } from \"./modal\"\nimport { ModalFocusScope } from \"./modal-focus\"\n\nconst MotionDiv = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {\n  /**\n   * The props to forward to the modal's content wrapper\n   */\n  containerProps?: HTMLChakraProps<\"div\">\n  /**\n   * The custom framer-motion transition to use for the modal\n   */\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      motionProps,\n      containerProps: rootProps,\n      ...rest\n    } = props\n\n    const { getDialogProps, getDialogContainerProps, isOpen } =\n      useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps(rootProps)\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useModalStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"$100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          __css={dialogContainerStyles}\n        >\n          <MotionDiv\n            motionProps={motionProps}\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </MotionDiv>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nDrawerContent.displayName = \"DrawerContent\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}