{"ast":null,"code":"'use client';\n\n// src/use-tooltip.ts\nimport { getScrollParent } from \"@chakra-ui/dom-utils\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useId, useRef } from \"react\";\nvar getDoc = ref => {\n  var _a;\n  return ((_a = ref.current) == null ? void 0 : _a.ownerDocument) || document;\n};\nvar getWin = ref => {\n  var _a, _b;\n  return ((_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) == null ? void 0 : _b.defaultView) || window;\n};\nfunction useTooltip() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props;\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  const {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps\n  } = usePopper({\n    enabled: isOpen,\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n    direction\n  });\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const tooltipId = `tooltip-${uid}`;\n  const ref = useRef(null);\n  const enterTimeout = useRef();\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n      enterTimeout.current = void 0;\n    }\n  }, []);\n  const exitTimeout = useRef();\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current);\n      exitTimeout.current = void 0;\n    }\n  }, []);\n  const closeNow = useCallback(() => {\n    clearExitTimeout();\n    onClose();\n  }, [onClose, clearExitTimeout]);\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow);\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent();\n      const win = getWin(ref);\n      enterTimeout.current = win.setTimeout(onOpen, openDelay);\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay]);\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout();\n    const win = getWin(ref);\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay);\n  }, [closeDelay, closeNow, clearEnterTimeout]);\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay, isOpen]);\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay();\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen]);\n  const onKeyDown = useCallback(event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  }, [isOpen, closeWithDelay]);\n  useEventListener(() => getDoc(ref), \"keydown\", closeOnEsc ? onKeyDown : void 0);\n  useEventListener(() => {\n    if (!closeOnScroll) return null;\n    const node = ref.current;\n    if (!node) return null;\n    const scrollParent = getScrollParent(node);\n    return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent;\n  }, \"scroll\", () => {\n    if (isOpen && closeOnScroll) {\n      closeNow();\n    }\n  }, {\n    passive: true,\n    capture: true\n  });\n  useEffect(() => {\n    if (!isDisabled) return;\n    clearEnterTimeout();\n    if (isOpen) onClose();\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout]);\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout();\n      clearExitTimeout();\n    };\n  }, [clearEnterTimeout, clearExitTimeout]);\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const triggerProps = {\n      ...props2,\n      ref: mergeRefs(ref, _ref, referenceRef),\n      onPointerEnter: callAllHandlers(props2.onPointerEnter, e => {\n        if (e.pointerType === \"touch\") return;\n        openWithDelay();\n      }),\n      onClick: callAllHandlers(props2.onClick, onClick),\n      onPointerDown: callAllHandlers(props2.onPointerDown, onPointerDown),\n      onFocus: callAllHandlers(props2.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props2.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : void 0\n    };\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onPointerDown, isOpen, tooltipId, onClick, referenceRef]);\n  const getTooltipPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({\n      ...props2,\n      style: {\n        ...props2.style,\n        [popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      }\n    }, forwardedRef);\n  }, [getPopperProps, arrowSize, arrowShadowColor]);\n  const getTooltipProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const styles = {\n      ...props2.style,\n      position: \"relative\",\n      transformOrigin: popperCSSVars.transformOrigin.varRef\n    };\n    return {\n      ref: ref2,\n      ...htmlProps,\n      ...props2,\n      id: tooltipId,\n      role: \"tooltip\",\n      style: styles\n    };\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps\n  };\n}\nvar closeEventName = \"chakra-ui:close-tooltip\";\nfunction useCloseEvent(ref, close) {\n  useEffect(() => {\n    const doc = getDoc(ref);\n    doc.addEventListener(closeEventName, close);\n    return () => doc.removeEventListener(closeEventName, close);\n  }, [close, ref]);\n  return () => {\n    const doc = getDoc(ref);\n    const win = getWin(ref);\n    doc.dispatchEvent(new win.CustomEvent(closeEventName));\n  };\n}\nexport { useTooltip };","map":{"version":3,"mappings":"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","names":["getScrollParent","popperCSSVars","usePopper","useDisclosure","useEventListener","mergeRefs","callAllHandlers","useCallback","useEffect","useId","useRef","getDoc","ref","current","ownerDocument","document","getWin","defaultView","window","useTooltip","props","openDelay","closeDelay","closeOnClick","closeOnMouseDown","closeOnScroll","closeOnPointerDown","closeOnEsc","onOpen","onOpenProp","onClose","onCloseProp","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","direction","htmlProps","referenceRef","getPopperProps","getArrowInnerProps","getArrowProps","enabled","uuid","uid","tooltipId","enterTimeout","clearEnterTimeout","clearTimeout","exitTimeout","clearExitTimeout","closeNow","dispatchCloseEvent","useCloseEvent","openWithDelay","win","setTimeout","closeWithDelay","onClick","onPointerDown","onKeyDown","event","key","node","scrollParent","localName","passive","capture","getTriggerProps","_ref","triggerProps","onPointerEnter","e","pointerType","onFocus","onBlur","getTooltipPositionerProps","forwardedRef","style","var","getTooltipProps","styles","position","transformOrigin","varRef","role","show","hide","closeEventName","close","doc","addEventListener","removeEventListener","dispatchEvent","CustomEvent"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/tooltip/src/use-tooltip.ts"],"sourcesContent":["import { getScrollParent } from \"@chakra-ui/dom-utils\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport React, {\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  type RefObject,\n} from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowPadding\"\n    | \"direction\"\n    | \"placement\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   * @default true\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse is down\n   * @deprecated - use `closeOnPointerDown` instead\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * If `true`, the tooltip will hide while the pointer is down\n   * @default true\n   */\n  closeOnPointerDown?: boolean\n  /**\n   * If `true`, the tooltip will hide on pressing Esc key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   * @default false\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   * @default false\n   */\n  defaultIsOpen?: boolean\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * @default false\n   */\n  closeOnScroll?: boolean\n  /**\n   * @default 10\n   */\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nconst getDoc = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument || document\n\nconst getWin = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument?.defaultView || window\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } =\n    usePopper({\n      enabled: isOpen,\n      placement,\n      arrowPadding,\n      modifiers,\n      gutter,\n      offset,\n      direction,\n    })\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const tooltipId = `tooltip-${uid}`\n\n  const ref = useRef<HTMLElement>(null)\n\n  const enterTimeout = useRef<number>()\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n      enterTimeout.current = undefined\n    }\n  }, [])\n\n  const exitTimeout = useRef<number>()\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current)\n      exitTimeout.current = undefined\n    }\n  }, [])\n\n  const closeNow = useCallback(() => {\n    clearExitTimeout()\n    onClose()\n  }, [onClose, clearExitTimeout])\n\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow)\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent()\n      const win = getWin(ref)\n      enterTimeout.current = win.setTimeout(onOpen, openDelay)\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout()\n    const win = getWin(ref)\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay)\n  }, [closeDelay, closeNow, clearEnterTimeout])\n\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay, isOpen])\n\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay()\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (isOpen && event.key === \"Escape\") {\n        closeWithDelay()\n      }\n    },\n    [isOpen, closeWithDelay],\n  )\n\n  useEventListener(\n    () => getDoc(ref),\n    \"keydown\",\n    closeOnEsc ? onKeyDown : undefined,\n  )\n\n  useEventListener(\n    () => {\n      if (!closeOnScroll) return null\n      const node = ref.current\n      if (!node) return null\n      const scrollParent = getScrollParent(node)\n      return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent\n    },\n    \"scroll\",\n    () => {\n      if (isOpen && closeOnScroll) {\n        closeNow()\n      }\n    },\n    { passive: true, capture: true },\n  )\n\n  useEffect(() => {\n    if (!isDisabled) return\n    clearEnterTimeout()\n    if (isOpen) onClose()\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout])\n\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout()\n      clearExitTimeout()\n    }\n  }, [clearEnterTimeout, clearExitTimeout])\n\n  /**\n   * This allows for catching pointerleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onPointerLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay)\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onPointerEnter: callAllHandlers(props.onPointerEnter, (e) => {\n          if (e.pointerType === \"touch\") return\n          openWithDelay()\n        }),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onPointerDown: callAllHandlers(props.onPointerDown, onPointerDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onPointerDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? `${arrowSize}px`\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const styles: React.CSSProperties = {\n        ...props.style,\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n      }\n\n      return {\n        ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: styles,\n      }\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n\nconst closeEventName = \"chakra-ui:close-tooltip\"\n\nfunction useCloseEvent(ref: RefObject<Element>, close: () => void) {\n  useEffect(() => {\n    const doc = getDoc(ref)\n    doc.addEventListener(closeEventName, close)\n    return () => doc.removeEventListener(closeEventName, close)\n  }, [close, ref])\n\n  return () => {\n    const doc = getDoc(ref)\n    const win = getWin(ref)\n    doc.dispatchEvent(new win.CustomEvent(closeEventName))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}