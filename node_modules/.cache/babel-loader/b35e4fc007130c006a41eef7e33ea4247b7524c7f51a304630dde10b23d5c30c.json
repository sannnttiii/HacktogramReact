{"ast":null,"code":"'use client';\n\nimport { AvatarImage } from \"./chunk-V2ATFO44.mjs\";\nimport { initials } from \"./chunk-O25PJXSD.mjs\";\nimport { AvatarStylesProvider } from \"./chunk-RD3LQCU3.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\";\n\n// src/avatar.tsx\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles,\n    children: /* @__PURE__ */jsxs(AvatarStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */jsx(AvatarImage, {\n        src,\n        srcSet,\n        loading,\n        onLoad: callAllHandlers(onLoadProp, () => {\n          setIsLoaded(true);\n        }),\n        onError,\n        getInitials,\n        name,\n        borderRadius,\n        icon,\n        iconLabel,\n        ignoreFallback,\n        crossOrigin,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nAvatar.displayName = \"Avatar\";\nexport { baseStyle, Avatar };","map":{"version":3,"mappings":";;;;;;;;AAAA,SACEA,QACAC,YAEAC,kBAGAC,2BACK;AACP,SAASC,iBAAiBC,IAAIC,gBAAgB;AAM9C,SAASC,gBAAgB;AA6Cd,cA8BLC,YA9BK;AA3CJ,IAAMC,YAA+B;EAC1CC,SAAS;EACTC,YAAY;EACZC,gBAAgB;EAChBC,WAAW;EACXC,eAAe;EACfC,YAAY;EACZC,UAAU;EACVC,YAAY;AACd;AAqBO,IAAMC,SAASjB,WAAgC,CAACkB,OAAOC,QAAQ;EACpE,MAAMC,SAASlB,oBAAoB,UAAUgB,KAAK;EAClD,MAAM,CAACG,UAAUC,WAAW,IAAIhB,SAAS,KAAK;EAE9C,MAAM;IACJiB;IACAC;IACAC;IACAC;IACAC,eAAe;IACfC;IACAC,QAAQC;IACRC,cAAcC;IACdC,OAAO,mBAACC,qBAAkB;IAC1BC,YAAY;IACZC;IACAC;IACAC;IACAC;IACAC;IACAC;IACA,GAAGC;EACL,IAAIzC,iBAAiBiB,KAAK;EAE1B,MAAMyB,eAAkC;IACtChB;IACAiB,aAAalB,aAAa,QAAQ;IAClC,GAAGlB;IACH,GAAGY,OAAOyB;EACZ;EAEA,IAAIP,aAAa;IACfK,aAAaL,cAAcA;EAC7B;EAEA,OACE,mBAACvC,OAAO+C,MAAP;IACC3B;IACC,GAAGuB;IACJK,WAAW3C,GAAG,iBAAiBc,MAAM6B,SAAS;IAC9C,eAAa1C,SAASgB,QAAQ;IAC9B2B,OAAOL;IAEPN,8BAACY;MAAqBC,OAAO9B;MAC3BiB,8BAACc;QACC5B;QACAC;QACAY;QACAP,QAAQ1B,gBAAgB2B,YAAY,MAAM;UACxCR,YAAY,IAAI;QAClB,CAAC;QACDM;QACAG;QACAN;QACAE;QACAM;QACAE;QACAI;QACAC;QACAC;MAAA,EACF,EACCJ;IAAA,CACH;EAAA,EACF;AAEJ,CAAC;AAEDpB,OAAOmC,cAAc","names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAllHandlers","cx","dataAttr","useState","jsxs","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","fontWeight","position","flexShrink","Avatar","props","ref","styles","isLoaded","setIsLoaded","src","srcSet","name","showBorder","borderRadius","onError","onLoad","onLoadProp","getInitials","initials","icon","GenericAvatarIcon","iconLabel","loading","children","borderColor","ignoreFallback","crossOrigin","referrerPolicy","rest","avatarStyles","borderWidth","container","span","className","__css","AvatarStylesProvider","value","AvatarImage","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/avatar/src/avatar.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}