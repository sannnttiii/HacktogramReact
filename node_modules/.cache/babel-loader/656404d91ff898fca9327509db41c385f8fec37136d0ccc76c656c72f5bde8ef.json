{"ast":null,"code":"'use client';\n\nimport { useId } from \"./chunk-6B2YUEGK.mjs\";\nimport { useControllableProp } from \"./chunk-7JSBRQFI.mjs\";\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ...props2,\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      };\n    },\n    getDisclosureProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ...props2,\n        hidden: !isOpen,\n        id\n      };\n    }\n  };\n}\nexport { useDisclosure };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,uBAAuB;AAIhC,SAASC,aAAaC,gBAAgB;AAU/B,SAASC,gBAA8C;EAAA,IAAhCC,4EAA4B,CAAC;EACzD,MAAM;IACJC,SAASC;IACTC,QAAQC;IACRC,QAAQC;IACRC,IAAIC;EACN,IAAIR;EAEJ,MAAMS,wBAAwBC,eAAeN,UAAU;EACvD,MAAMO,yBAAyBD,eAAeR,WAAW;EACzD,MAAM,CAACU,aAAaC,SAAS,IAAIf,SAASE,MAAMc,iBAAiB,KAAK;EACtE,MAAM,CAACC,cAAcV,MAAM,IAAIW,oBAAoBV,YAAYM,WAAW;EAE1E,MAAML,KAAKU,MAAMT,QAAQ,YAAY;EAErC,MAAMP,UAAUJ,YAAY,MAAM;IAChC,IAAI,CAACkB,cAAc;MACjBF,UAAU,KAAK;IACjB;IACAF;EACF,GAAG,CAACI,cAAcJ,sBAAsB,CAAC;EAEzC,MAAMR,SAASN,YAAY,MAAM;IAC/B,IAAI,CAACkB,cAAc;MACjBF,UAAU,IAAI;IAChB;IACAJ;EACF,GAAG,CAACM,cAAcN,qBAAqB,CAAC;EAExC,MAAMS,WAAWrB,YAAY,MAAM;IACjC,MAAMsB,SAASd,SAASJ,UAAUE;IAClCgB,QAAO;EACT,GAAG,CAACd,QAAQF,QAAQF,OAAO,CAAC;EAE5B,OAAO;IACLI,QAAQ,CAAC,CAACA;IACVF;IACAF;IACAiB;IACAH;IACAK,gBAAgB;MAAA,IAACpB,6EAAa,CAAC;MAAA,OAAO;QACpC,GAAGA;QACH,iBAAiBK;QACjB,iBAAiBE;QACjBc,SAASzB,gBAAgBI,OAAMqB,SAASH,QAAQ;MAClD;IAAA;IACAI,oBAAoB;MAAA,IAACtB,6EAAa,CAAC;MAAA,OAAO;QACxC,GAAGA;QACHuB,QAAQ,CAAClB;QACTE;MACF;IAAA;EACF;AACF","names":["callAllHandlers","useCallback","useState","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","onOpenPropCallbackRef","useCallbackRef","onClosePropCallbackRef","isOpenState","setIsOpen","defaultIsOpen","isControlled","useControllableProp","useId","onToggle","action","getButtonProps","onClick","getDisclosureProps","hidden"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}