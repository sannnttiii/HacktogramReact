{"ast":null,"code":"'use client';\n\nimport { ToastProvider } from \"./chunk-3Y4YXCR2.mjs\";\nimport { createToastFn } from \"./chunk-HYCJNCPE.mjs\";\n\n// src/create-standalone-toast.tsx\nimport { ColorModeContext, ThemeProvider } from \"@chakra-ui/system\";\nimport { theme as defaultTheme } from \"@chakra-ui/theme\";\nimport { jsx } from \"react/jsx-runtime\";\nvar defaults = {\n  duration: 5e3,\n  variant: \"solid\"\n};\nvar defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: () => {},\n  setColorMode: () => {},\n  defaultOptions: defaults,\n  forced: false\n};\nfunction createStandaloneToast() {\n  let {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions,\n    motionVariants,\n    toastSpacing,\n    component,\n    forced\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultStandaloneParam;\n  const colorModeContextValue = {\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    forced\n  };\n  const ToastContainer = () => /* @__PURE__ */jsx(ThemeProvider, {\n    theme,\n    children: /* @__PURE__ */jsx(ColorModeContext.Provider, {\n      value: colorModeContextValue,\n      children: /* @__PURE__ */jsx(ToastProvider, {\n        defaultOptions,\n        motionVariants,\n        toastSpacing,\n        component\n      })\n    })\n  });\n  return {\n    ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions)\n  };\n}\nexport { defaultStandaloneParam, createStandaloneToast };","map":{"version":3,"mappings":";;;;;;AAAA,SAEEA,kBACAC,qBAEK;AACP,SAASC,SAASC,oBAAoB;AAyD9B;AApDR,IAAMC,WAA4B;EAChCC,UAAU;EACVC,SAAS;AACX;AAWO,IAAMC,yBAC4D;EACvEL,OAAOC;EACPK,WAAW;EACXC,iBAAiB,MAAM,CAAC;EACxBC,cAAc,MAAM,CAAC;EACrBC,gBAAgBP;EAChBQ,QAAQ;AACV;AAUO,SAASC,wBAUqE;EAAA,IAV/C;IACpCX,QAAQK,uBAAuBL;IAC/BM,YAAYD,uBAAuBC;IACnCC,kBAAkBF,uBAAuBE;IACzCC,eAAeH,uBAAuBG;IACtCC,iBAAiBJ,uBAAuBI;IACxCG;IACAC;IACAC;IACAJ;EACF,wEAAgCL;EAC9B,MAAMU,wBAAwB;IAC5BT;IACAE;IACAD;IACAG;EACF;EACA,MAAMM,iBAAiB,MACrB,mBAACjB;IAAcC;IACbiB,6BAACnB,iBAAiBoB,UAAjB;MAA0BC,OAAOJ;MAChCE,6BAACG;QACCX;QACAG;QACAC;QACAC;MAAA;IACF,CACF;EAAA,CACF;EAGF,OAAO;IACLE;IACAK,OAAOC,cAActB,MAAMuB,WAAWd,cAAc;EACtD;AACF","names":["ColorModeContext","ThemeProvider","theme","defaultTheme","defaults","duration","variant","defaultStandaloneParam","colorMode","toggleColorMode","setColorMode","defaultOptions","forced","createStandaloneToast","motionVariants","toastSpacing","component","colorModeContextValue","ToastContainer","children","Provider","value","ToastProvider","toast","createToastFn","direction"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/toast/src/create-standalone-toast.tsx"],"sourcesContent":["import {\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport { theme as defaultTheme } from \"@chakra-ui/theme\"\nimport { ToastProvider, ToastProviderProps } from \"./toast.provider\"\nimport { UseToastOptions } from \"./use-toast\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\n\nconst defaults: UseToastOptions = {\n  duration: 5000,\n  variant: \"solid\",\n}\n\nexport interface CreateStandAloneToastParam\n  extends Partial<\n      ReturnType<typeof useChakra> & {\n        setColorMode: (value: ColorMode) => void\n        defaultOptions: UseToastOptions\n      }\n    >,\n    Omit<ToastProviderProps, \"children\"> {}\n\nexport const defaultStandaloneParam: CreateStandAloneToastParam &\n  Required<Omit<CreateStandAloneToastParam, keyof ToastProviderProps>> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: () => {},\n  setColorMode: () => {},\n  defaultOptions: defaults,\n  forced: false,\n}\n\nexport type CreateStandaloneToastReturn = {\n  ToastContainer: () => JSX.Element\n  toast: CreateToastFnReturn\n}\n\n/**\n * Create a toast\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n  motionVariants,\n  toastSpacing,\n  component,\n  forced,\n}: CreateStandAloneToastParam = defaultStandaloneParam): CreateStandaloneToastReturn {\n  const colorModeContextValue = {\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    forced,\n  }\n  const ToastContainer = () => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider value={colorModeContextValue}>\n        <ToastProvider\n          defaultOptions={defaultOptions}\n          motionVariants={motionVariants}\n          toastSpacing={toastSpacing}\n          component={component}\n        />\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  return {\n    ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions),\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}