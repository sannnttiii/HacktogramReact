{"ast":null,"code":"'use client';\n\nimport { useEditable } from \"./chunk-TXN5ELBN.mjs\";\nimport { EditableProvider, EditableStylesProvider } from \"./chunk-WYY72ITE.mjs\";\n\n// src/editable.tsx\nimport { cx, runIfFn } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Editable = forwardRef(function Editable2(props, ref) {\n  const styles = useMultiStyleConfig(\"Editable\", props);\n  const ownProps = omitThemingProps(props);\n  const {\n    htmlProps,\n    ...context\n  } = useEditable(ownProps);\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  } = context;\n  const _className = cx(\"chakra-editable\", props.className);\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  });\n  return /* @__PURE__ */jsx(EditableProvider, {\n    value: context,\n    children: /* @__PURE__ */jsx(EditableStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, {\n        ref,\n        ...htmlProps,\n        className: _className,\n        children\n      })\n    })\n  });\n});\nEditable.displayName = \"Editable\";\nexport { Editable };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,IAAIC,eAAe;AAC5B,SACEC,QACAC,YAEAC,kBAEAC,2BACK;AA2DC;AAvBD,IAAMC,WAAWH,WAAiC,SAASG,UAChEC,OACAC,KACA;EACA,MAAMC,SAASJ,oBAAoB,YAAYE,KAAK;EAEpD,MAAMG,WAAWN,iBAAiBG,KAAK;EACvC,MAAM;IAAEI;IAAW,GAAGC;EAAQ,IAAIC,YAAYH,QAAQ;EAEtD,MAAM;IAAEI;IAAWC;IAAUC;IAAUC;EAAO,IAAIL;EAElD,MAAMM,aAAalB,GAAG,mBAAmBO,MAAMY,SAAS;EAExD,MAAMC,WAAWnB,QAAQM,MAAMa,UAAU;IACvCN;IACAC;IACAC;IACAC;EACF,CAAC;EAED,OACE,mBAACI;IAAiBC,OAAOV;IACvBQ,6BAACG;MAAuBD,OAAOb;MAC7BW,6BAAClB,OAAOsB,KAAP;QACChB;QACC,GAAIG;QACLQ,WAAWD;QAEVE;MAAA;IACH,CACF;EAAA,CACF;AAEJ,CAAC;AAEDd,SAASmB,cAAc","names":["cx","runIfFn","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","Editable","props","ref","styles","ownProps","htmlProps","context","useEditable","isEditing","onSubmit","onCancel","onEdit","_className","className","children","EditableProvider","value","EditableStylesProvider","div","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/editable/src/editable.tsx"],"sourcesContent":["import { cx, runIfFn } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { EditableProvider, EditableStylesProvider } from \"./editable-context\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode)\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\" | \"onBlur\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    Omit<BaseEditableProps, \"children\">,\n    ThemingProps<\"Editable\"> {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n *\n * @see Docs https://chakra-ui.com/docs/components/editable\n */\nexport const Editable = forwardRef<EditableProps, \"div\">(function Editable(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <EditableStylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...(htmlProps as HTMLChakraProps<\"div\">)}\n          className={_className}\n        >\n          {children}\n        </chakra.div>\n      </EditableStylesProvider>\n    </EditableProvider>\n  )\n})\n\nEditable.displayName = \"Editable\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}