{"ast":null,"code":"'use client';\n\nimport { __publicField } from \"./chunk-5WQ4PXEV.mjs\";\n\n// src/modal-manager.ts\nimport { useEffect, useState } from \"react\";\nvar ModalManager = class {\n  constructor() {\n    __publicField(this, \"modals\");\n    this.modals = /* @__PURE__ */new Map();\n  }\n  add(modal) {\n    this.modals.set(modal, this.modals.size + 1);\n    return this.modals.size;\n  }\n  remove(modal) {\n    this.modals.delete(modal);\n  }\n  isTopModal(modal) {\n    if (!modal) return false;\n    return this.modals.get(modal) === this.modals.size;\n  }\n};\nvar modalManager = new ModalManager();\nfunction useModalManager(ref, isOpen) {\n  const [index, setIndex] = useState(0);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (isOpen) {\n      const index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n    return () => {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\nexport { modalManager, useModalManager };","map":{"version":3,"mappings":";;;;;AAAA,SAAoBA,WAAWC,gBAAgB;AAM/C,IAAMC,eAAN,MAAmB;EAEjBC,cAAc;IADdC;IAEE,KAAKC,SAAS,mBAAIC,KAAI;EACxB;EAEAC,IAAIC,OAAoB;IACtB,KAAKH,OAAOI,IAAID,OAAO,KAAKH,OAAOK,OAAO,CAAC;IAC3C,OAAO,KAAKL,OAAOK;EACrB;EAEAC,OAAOH,OAAoB;IACzB,KAAKH,OAAOO,OAAOJ,KAAK;EAC1B;EAEAK,WAAWL,OAA2B;IACpC,IAAI,CAACA,OAAO,OAAO;IACnB,OAAO,KAAKH,OAAOS,IAAIN,KAAK,MAAM,KAAKH,OAAOK;EAChD;AACF;AAEO,IAAMK,eAAe,IAAIb,cAAa;AAEtC,SAASc,gBAAgBC,KAA6BC,QAAkB;EAC7E,MAAM,CAACC,OAAOC,QAAQ,IAAInB,SAAS,CAAC;EAEpCD,UAAU,MAAM;IACd,MAAMqB,OAAOJ,IAAIK;IAEjB,IAAI,CAACD,MAAM;IAEX,IAAIH,QAAQ;MACV,MAAMC,SAAQJ,aAAaR,IAAIc,IAAI;MACnCD,SAASD,MAAK;IAChB;IAEA,OAAO,MAAM;MACXJ,aAAaJ,OAAOU,IAAI;MACxBD,SAAS,CAAC;IACZ;EACF,GAAG,CAACF,QAAQD,GAAG,CAAC;EAEhB,OAAOE;AACT","names":["useEffect","useState","ModalManager","constructor","__publicField","modals","Map","add","modal","set","size","remove","delete","isTopModal","get","modalManager","useModalManager","ref","isOpen","index","setIndex","node","current"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/modal/src/modal-manager.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}