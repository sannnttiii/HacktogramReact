{"ast":null,"code":"// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = function (operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\n};\nvar add = function () {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return `calc(${toExpr(\"+\", ...operands)})`;\n};\nvar subtract = function () {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return `calc(${toExpr(\"-\", ...operands)})`;\n};\nvar multiply = function () {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return `calc(${toExpr(\"*\", ...operands)})`;\n};\nvar divide = function () {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return `calc(${toExpr(\"/\", ...operands)})`;\n};\nvar negate = x => {\n  const value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\nvar calc = Object.assign(x => ({\n  add: function () {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n    return calc(add(x, ...operands));\n  },\n  subtract: function () {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n    return calc(subtract(x, ...operands));\n  },\n  multiply: function () {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n    return calc(multiply(x, ...operands));\n  },\n  divide: function () {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n    return calc(divide(x, ...operands));\n  },\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"mappings":";AAAA,SAASA,gBAAgB;AAQzB,SAASC,MAAMC,SAA0B;EACvC,IAAIF,SAASE,OAAO,KAAKA,QAAQC,WAAW;IAC1C,OAAOD,QAAQC;EACjB;EACA,OAAOC,OAAOF,OAAO;AACvB;AAEA,IAAMG,SAAS,UAACC;EAAA,kCAAuBC;IAAAA;EAAA;EAAA,OACrCA,SAASC,IAAIP,KAAK,EAAEQ,KAAK,IAAIH,QAAQ,GAAG,EAAEI,QAAQ,SAAS,EAAE;AAAA;AAE/D,IAAMC,MAAM;EAAA,mCAAIJ;IAAAA;EAAA;EAAA,OAAuB,QAAQF,OAAO,KAAK,GAAGE,QAAQ,CAAC;AAAA;AAEvE,IAAMK,WAAW;EAAA,mCAAIL;IAAAA;EAAA;EAAA,OAAuB,QAAQF,OAAO,KAAK,GAAGE,QAAQ,CAAC;AAAA;AAE5E,IAAMM,WAAW;EAAA,mCAAIN;IAAAA;EAAA;EAAA,OAAuB,QAAQF,OAAO,KAAK,GAAGE,QAAQ,CAAC;AAAA;AAE5E,IAAMO,SAAS;EAAA,mCAAIP;IAAAA;EAAA;EAAA,OAAuB,QAAQF,OAAO,KAAK,GAAGE,QAAQ,CAAC;AAAA;AAE1E,IAAMQ,SAAUC,KAAe;EAC7B,MAAMC,QAAQhB,MAAMe,CAAC;EAErB,IAAIC,SAAS,QAAQ,CAACC,OAAOC,MAAMC,WAAWH,KAAK,CAAC,GAAG;IACrD,OAAOb,OAAOa,KAAK,EAAEI,WAAW,GAAG,IAAIjB,OAAOa,KAAK,EAAEK,MAAM,CAAC,IAAI,IAAIL,KAAK;EAC3E;EAEA,OAAOJ,SAASI,OAAO,EAAE;AAC3B;AAWO,IAAMM,OAAOC,OAAOC,OACxBT,MAA2B;EAC1BL,KAAK;IAAA,mCAAIJ;MAAAA;IAAA;IAAA,OAAagB,KAAKZ,IAAIK,GAAG,GAAGT,QAAQ,CAAC;EAAA;EAC9CK,UAAU;IAAA,mCAAIL;MAAAA;IAAA;IAAA,OAAagB,KAAKX,SAASI,GAAG,GAAGT,QAAQ,CAAC;EAAA;EACxDM,UAAU;IAAA,mCAAIN;MAAAA;IAAA;IAAA,OAAagB,KAAKV,SAASG,GAAG,GAAGT,QAAQ,CAAC;EAAA;EACxDO,QAAQ;IAAA,mCAAIP;MAAAA;IAAA;IAAA,OAAagB,KAAKT,OAAOE,GAAG,GAAGT,QAAQ,CAAC;EAAA;EACpDQ,QAAQ,MAAMQ,KAAKR,OAAOC,CAAC,CAAC;EAC5BU,UAAU,MAAMV,EAAEU;AACpB,IACA;EACEf;EACAC;EACAC;EACAC;EACAC;AACF,EACF","names":["isObject","toRef","operand","reference","String","toExpr","operator","operands","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","toString"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/theme-tools/src/css-calc.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}