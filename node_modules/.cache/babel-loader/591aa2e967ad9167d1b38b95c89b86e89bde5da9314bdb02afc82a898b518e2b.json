{"ast":null,"code":"'use client';\n\n// src/text.tsx\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const {\n    className,\n    align,\n    decoration,\n    casing,\n    ...rest\n  } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */jsx(chakra.p, {\n    ref,\n    className: cx(\"chakra-text\", props.className),\n    ...aliasedProps,\n    ...rest,\n    __css: styles\n  });\n});\nText.displayName = \"Text\";\nexport { Text };","map":{"version":3,"mappings":";;;AAAA,SACEA,QACAC,YACAC,kBAGAC,sBAEK;AACP,SAASC,UAAU;AACnB,SAASC,eAAe;AAqCpB;AAZG,IAAMC,OAAOL,WAA2B,SAASK,MAAKC,OAAOC,KAAK;EACvE,MAAMC,SAASN,eAAe,QAAQI,KAAK;EAC3C,MAAM;IAAEG;IAAWC;IAAOC;IAAYC;IAAQ,GAAGC;EAAK,IACpDZ,iBAAiBK,KAAK;EAExB,MAAMQ,eAAeV,QAAQ;IAC3BW,WAAWT,MAAMI;IACjBM,gBAAgBV,MAAMK;IACtBM,eAAeX,MAAMM;EACvB,CAAC;EAED,OACE,mBAACb,OAAOmB,GAAP;IACCX;IACAE,WAAWN,GAAG,eAAeG,MAAMG,SAAS;IAC3C,GAAGK;IACH,GAAGD;IACJM,OAAOX;EAAA,EACT;AAEJ,CAAC;AAEDH,KAAKe,cAAc","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","compact","Text","props","ref","styles","className","align","decoration","casing","rest","aliasedProps","textAlign","textDecoration","textTransform","p","__css","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/layout/src/text.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}