{"ast":null,"code":"'use client';\n\n// src/use-event-listener-map.ts\nimport { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nfunction useEventListenerMap() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    const {\n      __listener: pointerEventListener\n    } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\nexport { useEventListenerMap };","map":{"version":3,"mappings":";;;AAAA,SAEEA,qBACAC,+BAEK;AACP,SAASC,aAAaC,WAAWC,cAAc;AA6BxC,SAASC,sBAAsC;EACpD,MAAMC,YAAYF,QAAO,mBAAIG,KAAK;EAClC,MAAMC,mBAAmBF,UAAUG;EAEnC,MAAMC,MAAMR,YAAY,CAACS,IAASC,MAAWC,UAAeC,YAAiB;IAC3E,MAAMC,uBAAuBd,wBAC3BY,UACAD,SAAS,cACX;IACAN,UAAUG,QAAQO,IAAIH,UAAU;MAC9BI,YAAYF;MACZH,MAAMZ,oBAAoBY,IAAI;MAC9BD;MACAG;IACF,CAAC;IACDH,GAAGO,iBAAiBN,MAAMG,sBAAsBD,OAAO;EACzD,GAAG,EAAE;EAEL,MAAMK,SAASjB,YACb,CAACS,IAASC,MAAWC,UAAeC,YAAiB;IACnD,MAAM;MAAEG,YAAYF;IAAqB,IACvCT,UAAUG,QAAQW,IAAIP,QAAQ;IAChCF,GAAGU,oBAAoBT,MAAMG,sBAAsBD,OAAO;IAC1DR,UAAUG,QAAQa,OAAOP,oBAAoB;EAC/C,GACA,EAAC,CACH;EAEAZ,UACE,MAAM,MAAM;IACVK,iBAAiBe,QAAQ,CAACC,OAAOC,QAAQ;MACvCN,OAAOK,MAAMb,IAAIa,MAAMZ,MAAMa,KAAKD,MAAMV,OAAO;IACjD,CAAC;EACH,GACA,CAACK,QAAQX,gBAAgB,EAC3B;EAEA,OAAO;IAAEE;IAAKS;EAAO;AACvB","names":["getPointerEventName","wrapPointerEventHandler","useCallback","useEffect","useRef","useEventListenerMap","listeners","Map","currentListeners","current","add","el","type","listener","options","pointerEventListener","set","__listener","addEventListener","remove","get","removeEventListener","delete","forEach","value","key"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-event-listener-map.ts"],"sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      const { __listener: pointerEventListener } =\n        listeners.current.get(listener)\n      el.removeEventListener(type, pointerEventListener, options)\n      listeners.current.delete(pointerEventListener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}