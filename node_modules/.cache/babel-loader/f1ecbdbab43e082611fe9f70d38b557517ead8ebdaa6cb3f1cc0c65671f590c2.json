{"ast":null,"code":"'use client';\n\nimport { modalManager, useModalManager } from \"./chunk-CYRBRIA2.mjs\";\n\n// src/use-modal.ts\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [dialogId, headerId, bodyId] = useIds(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);\n  useAriaHidden(dialogRef, isOpen && useInert);\n  const index = useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = useRef(null);\n  const onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const getDialogProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      role: \"dialog\",\n      ...props2,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(props2.onClick, event => event.stopPropagation())\n    };\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!modalManager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    };\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  useEffect(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\nexport { useModal, useAriaHidden };","map":{"version":3,"mappings":"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","names":["callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useId","useMemo","useRef","useState","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useIds","useAriaHidden","index","useModalManager","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","ref","role","tabIndex","onClick","modalManager","isTopModal","getDialogContainerProps","shouldHide","currentElement","idProp","prefixes","reactId","map","prefix"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/modal/src/use-modal.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { hideOthers } from \"aria-hidden\"\n\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { modalManager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   * @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook used to manage multiple or nested modals\n   */\n  const index = useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: React.MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: React.MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!modalManager.isTopModal(dialogRef.current)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: React.RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  // save current ref in a local var to trigger the effect on identity change\n  const currentElement = ref.current\n\n  useEffect(() => {\n    // keep using `ref.current` inside the effect\n    // it may have changed during render and the execution of the effect\n    if (!ref.current || !shouldHide) return undefined\n\n    return hideOthers(ref.current)\n  }, [shouldHide, ref, currentElement])\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}