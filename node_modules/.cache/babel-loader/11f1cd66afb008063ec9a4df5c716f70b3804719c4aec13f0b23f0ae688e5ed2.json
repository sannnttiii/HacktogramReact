{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-controllable.ts\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nfunction useControllableProp(prop, state) {\n  const isControlled = prop !== void 0;\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [valueState, setValue] = useState(defaultValue);\n  const isControlled = valueProp !== void 0;\n  const value = isControlled ? valueProp : valueState;\n  const updateValue = useCallback(next => {\n    const nextValue = runIfFn(next, value);\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [isControlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, updateValue];\n}\nexport { useControllableProp, useControllableState };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,eAAe;AACxB,SAASC,aAAaC,gBAAgB;AAG/B,SAASC,oBAAuBC,MAAqBC,OAAU;EACpE,MAAMC,eAAeF,SAAS;EAC9B,MAAMG,QAAQD,gBAAgB,OAAOF,SAAS,cAAcA,OAAOC;EACnE,OAAO,CAACC,cAAcC,KAAK;AAC7B;AAyBO,SAASC,qBAAwBC,OAAqC;EAC3E,MAAM;IACJF,OAAOG;IACPC;IACAC;IACAC,eAAe,CAACC,MAAMC,SAASD,SAASC;EAC1C,IAAIN;EACJ,MAAMO,eAAeC,eAAeL,QAAQ;EAC5C,MAAMM,mBAAmBD,eAAeJ,YAAY;EAEpD,MAAM,CAACM,YAAYC,QAAQ,IAAIlB,SAASS,YAAiB;EAEzD,MAAML,eAAeI,cAAc;EACnC,MAAMH,QAAQD,eAAgBI,YAAkBS;EAEhD,MAAME,cAAcpB,YACjBc,QAAkC;IACjC,MAAMO,YAAYtB,QAAQe,MAAMR,KAAK;IAErC,IAAI,CAACW,iBAAiBX,OAAOe,SAAS,GAAG;MACvC;IACF;IAEA,IAAI,CAAChB,cAAc;MACjBc,SAASE,SAAS;IACpB;IAEAN,aAAaM,SAAS;EACxB,GACA,CAAChB,cAAcU,cAAcT,OAAOW,gBAAgB,EACtD;EAEA,OAAO,CAACX,OAAOc,WAAW;AAC5B","names":["runIfFn","useCallback","useState","useControllableProp","prop","state","isControlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","useCallbackRef","shouldUpdateProp","valueState","setValue","updateValue","nextValue"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-controllable.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}