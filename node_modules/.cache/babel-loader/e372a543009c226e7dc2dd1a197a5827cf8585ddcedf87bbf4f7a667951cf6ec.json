{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\nfunction getErrorMessage(hook, provider) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\nfunction createContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue\n  } = options;\n  const Context = createReactContext(defaultValue);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    const context = useReactContext(Context);\n    if (!context && strict) {\n      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\nexport { createContext };","map":{"version":3,"mappings":";;;AAAA,SACEA,iBAAiBC,oBACjBC,cAAcC,uBACT;AAiBP,SAASC,gBAAgBC,MAAcC,UAAkB;EACvD,OAAO,GAAGD,0EAA0EC;AACtF;AAEO,SAASN,gBAAwD;EAAA,IAAvCO,8EAAmC,CAAC;EACnE,MAAM;IACJC;IACAC,SAAS;IACTC,WAAW;IACXC,eAAe;IACfC;IACAC;EACF,IAAIN;EAEJ,MAAMO,UAAUb,mBAAkCY,YAAY;EAE9DC,QAAQC,cAAcP;EAEtB,SAASN,aAAa;IAtCxB;IAuCI,MAAMc,UAAUb,gBAAgBW,OAAO;IAEvC,IAAI,CAACE,WAAWP,QAAQ;MACtB,MAAMQ,QAAQ,IAAIC,MAChBN,sCAAgBR,gBAAgBM,UAAUC,YAAY,EACxD;MACAM,MAAMT,OAAO;MACb,YAAMW,sBAAN,+BAA0BF,OAAOf;MACjC,MAAMe;IACR;IAEA,OAAOD;EACT;EAEA,OAAO,CAACF,QAAQM,UAAUlB,YAAYY,OAAO;AAC/C","names":["createContext","createReactContext","useContext","useReactContext","getErrorMessage","hook","provider","options","name","strict","hookName","providerName","errorMessage","defaultValue","Context","displayName","context","error","Error","captureStackTrace","Provider"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-context/src/index.ts"],"sourcesContent":["import {\n  createContext as createReactContext,\n  useContext as useReactContext,\n} from \"react\"\n\nexport interface CreateContextOptions<T> {\n  strict?: boolean\n  hookName?: string\n  providerName?: string\n  errorMessage?: string\n  name?: string\n  defaultValue?: T\n}\n\nexport type CreateContextReturn<T> = [\n  React.Provider<T>,\n  () => T,\n  React.Context<T>,\n]\n\nfunction getErrorMessage(hook: string, provider: string) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`\n}\n\nexport function createContext<T>(options: CreateContextOptions<T> = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue,\n  } = options\n\n  const Context = createReactContext<T | undefined>(defaultValue)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = useReactContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName),\n      )\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<T>\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}