{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { getActiveElement, getAllFocusable, isTabbable } from \"@chakra-ui/dom-utils\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallback, useRef } from \"react\";\nfunction preventReturnFocus(containerRef) {\n  const el = containerRef.current;\n  if (!el) return false;\n  const activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (el.contains(activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\nfunction useFocusOnHide(containerRef, options) {\n  const {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  const shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n    let rafId;\n    if (el) {\n      rafId = requestAnimationFrame(() => {\n        el.focus({\n          preventScroll: true\n        });\n      });\n      return () => {\n        cancelAnimationFrame(rafId);\n      };\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nfunction useFocusOnShow(target) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  const element = isRefObject(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef(autoFocusValue);\n  const lastVisibleRef = useRef(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (element.contains(document.activeElement)) return;\n    if (focusRef == null ? void 0 : focusRef.current) {\n      requestAnimationFrame(() => {\n        var _a;\n        (_a = focusRef.current) == null ? void 0 : _a.focus({\n          preventScroll\n        });\n      });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n      if (tabbableEls.length > 0) {\n        requestAnimationFrame(() => {\n          tabbableEls[0].focus({\n            preventScroll\n          });\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(element, \"transitionend\", onFocus);\n}\nfunction isRefObject(val) {\n  return \"current\" in val;\n}\nexport { useFocusOnHide, useFocusOnShow };","map":{"version":3,"mappings":";;;AAAA,SAEEA,kBACAC,iBACAC,kBACK;AACP,SAASC,wBAAwB;AACjC,SAASC,2BAA2B;AACpC,SAASC,uBAAuB;AAEhC,SAASC,aAAaC,cAAc;AAQpC,SAASC,mBAAmBC,cAA4C;EACtE,MAAMC,KAAKD,aAAaE;EACxB,IAAI,CAACD,IAAI,OAAO;EAEhB,MAAME,gBAAgBZ,iBAAiBU,EAAE;EAEzC,IAAI,CAACE,eAAe,OAAO;EAC3B,IAAIF,GAAGG,SAASD,aAAa,GAAG,OAAO;EACvC,IAAIV,WAAWU,aAAa,GAAG,OAAO;EAEtC,OAAO;AACT;AASO,SAASE,eACdL,cACAM,SACA;EACA,MAAM;IAAEC,aAAaC;IAAiBC;IAASC;EAAS,IAAIJ;EAE5D,MAAMC,cAAcC,mBAAmB,CAACC;EAExCb,gBAAgB,MAAM;IACpB,IAAI,CAACW,aAAa;IAElB,IAAIR,mBAAmBC,YAAY,GAAG;MACpC;IACF;IAEA,MAAMC,MAAKS,qCAAUR,YAAWF,aAAaE;IAE7C,IAAIS;IAEJ,IAAIV,IAAI;MACNU,QAAQC,sBAAsB,MAAM;QAClCX,GAAGY,MAAM;UAAEC,eAAe;QAAK,CAAC;MAClC,CAAC;MACD,OAAO,MAAM;QACXC,qBAAqBJ,KAAK;MAC5B;IACF;EACF,GAAG,CAACJ,aAAaP,cAAcU,QAAQ,CAAC;AAC1C;AASA,IAAMM,iBAAwC;EAC5CF,eAAe;EACfP,aAAa;AACf;AAEO,SAASU,eACdC,QAEA;EAAA,IADAZ,8EAAUU;EAEV,MAAM;IAAEN;IAAUI;IAAeP;IAAaE;EAAQ,IAAIH;EAC1D,MAAMa,UAAUC,YAAYF,MAAM,IAAIA,OAAOhB,UAAUgB;EAEvD,MAAMG,iBAAiBd,eAAeE;EACtC,MAAMa,eAAexB,OAAOuB,cAAc;EAC1C,MAAME,iBAAiBzB,OAAOW,OAAO;EAErCd,oBAAoB,MAAM;IACxB,IAAI,CAAC4B,eAAerB,WAAWO,SAAS;MACtCa,aAAapB,UAAUmB;IACzB;IACAE,eAAerB,UAAUO;EAC3B,GAAG,CAACA,SAASY,cAAc,CAAC;EAE5B,MAAMG,UAAU3B,YAAY,MAAM;IAChC,IAAI,CAACY,WAAW,CAACU,WAAW,CAACG,aAAapB,SAAS;IACnDoB,aAAapB,UAAU;IAEvB,IAAIiB,QAAQf,SAASqB,SAAStB,aAA4B,GAAG;IAE7D,IAAIO,qCAAUR,SAAS;MACrBU,sBAAsB,MAAM;QAzGlC;QA0GQ,eAASV,YAAT,mBAAkBW,MAAM;UAAEC;QAAc;MAC1C,CAAC;IACH,OAAO;MACL,MAAMY,cAAclC,gBAAgB2B,OAAO;MAC3C,IAAIO,YAAYC,SAAS,GAAG;QAC1Bf,sBAAsB,MAAM;UAC1Bc,YAAY,CAAC,EAAEb,MAAM;YAAEC;UAAc,CAAC;QACxC,CAAC;MACH;IACF;EACF,GAAG,CAACL,SAASK,eAAeK,SAAST,QAAQ,CAAC;EAE9Cd,gBAAgB,MAAM;IACpB4B,SAAQ;EACV,GAAG,CAACA,OAAO,CAAC;EAEZ9B,iBAAiByB,SAAS,iBAAiBK,OAAO;AACpD;AAEA,SAASJ,YAAYQ,KAAmC;EACtD,OAAO,aAAaA;AACtB","names":["getActiveElement","getAllFocusable","isTabbable","useEventListener","useSafeLayoutEffect","useUpdateEffect","useCallback","useRef","preventReturnFocus","containerRef","el","current","activeElement","contains","useFocusOnHide","options","shouldFocus","shouldFocusProp","visible","focusRef","rafId","requestAnimationFrame","focus","preventScroll","cancelAnimationFrame","defaultOptions","useFocusOnShow","target","element","isRefObject","autoFocusValue","autoFocusRef","lastVisibleRef","onFocus","document","tabbableEls","length","val"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-use-focus-effect/src/index.ts"],"sourcesContent":["import {\n  FocusableElement,\n  getActiveElement,\n  getAllFocusable,\n  isTabbable,\n} from \"@chakra-ui/dom-utils\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport type { RefObject } from \"react\"\nimport { useCallback, useRef } from \"react\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (el.contains(activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    let rafId: number\n\n    if (el) {\n      rafId = requestAnimationFrame(() => {\n        el.focus({ preventScroll: true })\n      })\n      return () => {\n        cancelAnimationFrame(rafId)\n      }\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n\n  const autoFocusValue = shouldFocus && visible\n  const autoFocusRef = useRef(autoFocusValue)\n  const lastVisibleRef = useRef(visible)\n\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue\n    }\n    lastVisibleRef.current = visible\n  }, [visible, autoFocusValue])\n\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return\n    autoFocusRef.current = false\n\n    if (element.contains(document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      requestAnimationFrame(() => {\n        focusRef.current?.focus({ preventScroll })\n      })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        requestAnimationFrame(() => {\n          tabbableEls[0].focus({ preventScroll })\n        })\n      }\n    }\n  }, [visible, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(element, \"transitionend\", onFocus)\n}\n\nfunction isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}