{"ast":null,"code":"'use client';\n\n// src/use-clipboard.ts\nimport { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\nfunction useClipboard(value) {\n  let optionsOrTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [hasCopied, setHasCopied] = useState(false);\n  const [valueState, setValueState] = useState(value);\n  useEffect(() => setValueState(value), [value]);\n  const {\n    timeout = 1500,\n    ...copyOptions\n  } = typeof optionsOrTimeout === \"number\" ? {\n    timeout: optionsOrTimeout\n  } : optionsOrTimeout;\n  const onCopy = useCallback(() => {\n    const didCopy = copy(valueState, copyOptions);\n    setHasCopied(didCopy);\n  }, [valueState, copyOptions]);\n  useEffect(() => {\n    let timeoutId = null;\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy,\n    hasCopied\n  };\n}\nexport { useClipboard };","map":{"version":3,"mappings":";;;AAAA,SAASA,UAAUC,aAAaC,iBAAiB;AACjD,OAAOC,UAAU;AAwBV,SAASC,aACdC,OAEA;EAAA,IADAC,uFAAiD,CAAC;EAElD,MAAM,CAACC,WAAWC,YAAY,IAAIR,SAAS,KAAK;EAEhD,MAAM,CAACS,YAAYC,aAAa,IAAIV,SAASK,KAAK;EAClDH,UAAU,MAAMQ,cAAcL,KAAK,GAAG,CAACA,KAAK,CAAC;EAE7C,MAAM;IAAEM,UAAU;IAAM,GAAGC;EAAY,IACrC,OAAON,qBAAqB,WACxB;IAAEK,SAASL;EAAiB,IAC5BA;EAEN,MAAMO,SAASZ,YAAY,MAAM;IAC/B,MAAMa,UAAUX,KAAKM,YAAYG,WAAW;IAC5CJ,aAAaM,OAAO;EACtB,GAAG,CAACL,YAAYG,WAAW,CAAC;EAE5BV,UAAU,MAAM;IACd,IAAIa,YAA2B;IAE/B,IAAIR,WAAW;MACbQ,YAAYC,OAAOC,WAAW,MAAM;QAClCT,aAAa,KAAK;MACpB,GAAGG,OAAO;IACZ;IAEA,OAAO,MAAM;MACX,IAAII,WAAW;QACbC,OAAOE,aAAaH,SAAS;MAC/B;IACF;EACF,GAAG,CAACJ,SAASJ,SAAS,CAAC;EAEvB,OAAO;IACLF,OAAOI;IACPU,UAAUT;IACVG;IACAN;EACF;AACF","names":["useState","useCallback","useEffect","copy","useClipboard","value","optionsOrTimeout","hasCopied","setHasCopied","valueState","setValueState","timeout","copyOptions","onCopy","didCopy","timeoutId","window","setTimeout","clearTimeout","setValue"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-clipboard.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param value the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-clipboard\n */\nexport function useClipboard(\n  value: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const [valueState, setValueState] = useState(value)\n  useEffect(() => setValueState(value), [value])\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === \"number\"\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(valueState, copyOptions)\n    setHasCopied(didCopy)\n  }, [valueState, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy,\n    hasCopied,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}