{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp != null ? idProp : `disclosure-${uid}`;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        var _a;\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    };\n  }\n  function getDisclosureProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\nexport { useDisclosure };","map":{"version":3,"mappings":";;;AAAA,SAASA,sBAAsB;AAC/B,SAAgBC,aAAaC,UAAUC,aAAa;AAkB7C,SAASC,gBAA8C;EAAA,IAAhCC,4EAA4B,CAAC;EACzD,MAAM;IACJC,SAASC;IACTC,QAAQC;IACRC,QAAQC;IACRC,IAAIC;EACN,IAAIR;EAEJ,MAAMS,aAAad,eAAeS,UAAU;EAC5C,MAAMM,cAAcf,eAAeO,WAAW;EAE9C,MAAM,CAACS,aAAaC,SAAS,IAAIf,SAASG,MAAMa,iBAAiB,KAAK;EAEtE,MAAMR,SAASC,eAAe,SAAYA,aAAaK;EAEvD,MAAMG,eAAeR,eAAe;EAEpC,MAAMS,MAAMjB,OAAM;EAClB,MAAMS,KAAKC,0BAAU,cAAcO;EAEnC,MAAMd,UAAUL,YAAY,MAAM;IAChC,IAAI,CAACkB,cAAc;MACjBF,UAAU,KAAK;IACjB;IACAF;EACF,GAAG,CAACI,cAAcJ,WAAW,CAAC;EAE9B,MAAMP,SAASP,YAAY,MAAM;IAC/B,IAAI,CAACkB,cAAc;MACjBF,UAAU,IAAI;IAChB;IACAH;EACF,GAAG,CAACK,cAAcL,UAAU,CAAC;EAE7B,MAAMO,WAAWpB,YAAY,MAAM;IACjC,IAAIS,QAAQ;MACVJ,SAAQ;IACV,OAAO;MACLE,QAAO;IACT;EACF,GAAG,CAACE,QAAQF,QAAQF,OAAO,CAAC;EAE5B,SAASgB,iBAAiD;IAAA,IAAlCjB,6EAAmB,CAAC;IAC1C,OAAO;MACL,GAAGA;MACH,iBAAiBK;MACjB,iBAAiBE;MACjBW,QAAQC,OAAO;QAlErB;QAmEQ,aAAMD,YAAN,gCAAgBC;QAChBH,UAAS;MACX;IACF;EACF;EAEA,SAASI,qBAAqD;IAAA,IAAlCpB,6EAAmB,CAAC;IAC9C,OAAO;MACL,GAAGA;MACHqB,QAAQ,CAAChB;MACTE;IACF;EACF;EAEA,OAAO;IACLF;IACAF;IACAF;IACAe;IACAF;IACAG;IACAG;EACF;AACF","names":["useCallbackRef","useCallback","useState","useId","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","handleOpen","handleClose","isOpenState","setIsOpen","defaultIsOpen","isControlled","uid","onToggle","getButtonProps","onClick","event","getDisclosureProps","hidden"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-use-disclosure/src/index.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}