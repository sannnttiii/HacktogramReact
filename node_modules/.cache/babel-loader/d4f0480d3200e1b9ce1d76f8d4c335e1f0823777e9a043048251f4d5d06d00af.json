{"ast":null,"code":"'use client';\n\n// src/switch.tsx\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  const styles = useMultiStyleConfig(\"Switch\", props);\n  const {\n    spacing = \"0.5rem\",\n    children,\n    ...ownProps\n  } = omitThemingProps(props);\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  const containerStyles = useMemo(() => ({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    lineHeight: 0,\n    ...styles.container\n  }), [styles.container]);\n  const trackStyles = useMemo(() => ({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track\n  }), [styles.track]);\n  const labelStyles = useMemo(() => ({\n    userSelect: \"none\",\n    marginStart: spacing,\n    ...styles.label\n  }), [spacing, styles.label]);\n  return /* @__PURE__ */jsxs(chakra.label, {\n    ...getRootProps(),\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles,\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-switch__input\",\n      ...getInputProps({}, ref)\n    }), /* @__PURE__ */jsx(chakra.span, {\n      ...getCheckboxProps(),\n      className: \"chakra-switch__track\",\n      __css: trackStyles,\n      children: /* @__PURE__ */jsx(chakra.span, {\n        __css: styles.thumb,\n        className: \"chakra-switch__thumb\",\n        ...getIndicatorProps()\n      })\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-switch__label\",\n      ...getLabelProps(),\n      __css: labelStyles,\n      children\n    })]\n  });\n});\nSwitch.displayName = \"Switch\";\nexport { Switch };","map":{"version":3,"mappings":";;;AAAA,SAASA,mBAAqC;AAC9C,SAASC,UAAU;AACnB,SACEC,QACAC,YAEAC,kBAIAC,2BACK;AACP,SAASC,eAAe;AAqEpB,SAKEC,KALFC;AAjDG,IAAMC,SAASN,WAAiC,SAASM,QAC9DC,OACAC,KACA;EACA,MAAMC,SAASP,oBAAoB,UAAUK,KAAK;EAElD,MAAM;IAAEG,UAAU;IAAUC;IAAU,GAAGC;EAAS,IAAIX,iBAAiBM,KAAK;EAE5E,MAAM;IACJM;IACAC;IACAC;IACAC;IACAC;EACF,IAAIpB,YAAYe,QAAQ;EAExB,MAAMM,kBAAqCf,QACzC,OAAO;IACLgB,SAAS;IACTC,UAAU;IACVC,eAAe;IACfC,YAAY;IACZ,GAAGb,OAAOc;EACZ,IACA,CAACd,OAAOc,SAAS,EACnB;EAEA,MAAMC,cAAiCrB,QACrC,OAAO;IACLgB,SAAS;IACTM,YAAY;IACZC,gBAAgB;IAChBC,WAAW;IACXC,QAAQ;IACR,GAAGnB,OAAOoB;EACZ,IACA,CAACpB,OAAOoB,KAAK,EACf;EAEA,MAAMC,cAAiC3B,QACrC,OAAO;IACL4B,YAAY;IACZC,aAAatB;IACb,GAAGD,OAAOwB;EACZ,IACA,CAACvB,SAASD,OAAOwB,KAAK,EACxB;EAEA,OACE,oBAAClC,OAAOkC,OAAP;IACE,GAAGjB,cAAa;IACjBkB,WAAWpC,GAAG,iBAAiBS,MAAM2B,SAAS;IAC9CC,OAAOjB;IAEPP,8BAAC;MAAMuB,WAAU;MAAwB,GAAGpB,cAAc,CAAC,GAAGN,GAAG;IAAA,CAAG,GACpE,mBAACT,OAAOqC,MAAP;MACE,GAAGrB,kBAAiB;MACrBmB,WAAU;MACVC,OAAOX;MAEPb,6BAACZ,OAAOqC,MAAP;QACCD,OAAO1B,OAAO4B;QACdH,WAAU;QACT,GAAGrB;MAAkB;IACxB,EACF,EACCF,YACC,mBAACZ,OAAOqC,MAAP;MACCF,WAAU;MACT,GAAGjB,eAAc;MAClBkB,OAAOL;MAENnB;IAAA,EACH;EAAA,EAEJ;AAEJ,CAAC;AAEDL,OAAOgC,cAAc","names":["useCheckbox","cx","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","useMemo","jsx","jsxs","Switch","props","ref","styles","spacing","children","ownProps","getIndicatorProps","getInputProps","getCheckboxProps","getRootProps","getLabelProps","containerStyles","display","position","verticalAlign","lineHeight","container","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","labelStyles","userSelect","marginStart","label","className","__css","span","thumb","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/switch/src/switch.tsx"],"sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\n/**\n * The `Switch` component is used as an alternative for the checkbox component for switching between \"enabled\" and \"disabled\" states.\n *\n * @see Docs https://chakra-ui.com/docs/components/switch\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/switch/\n */\nexport const Switch = forwardRef<SwitchProps, \"input\">(function Switch(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0,\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          {...getIndicatorProps()}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}