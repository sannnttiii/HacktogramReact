{"ast":null,"code":"'use client';\n\n// src/storage-manager.ts\nvar STORAGE_KEY = \"chakra-ui-color-mode\";\nfunction createLocalStorageManager(key) {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get(init) {\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      let value;\n      try {\n        value = localStorage.getItem(key) || init;\n      } catch (e) {}\n      return value || init;\n    },\n    set(value) {\n      try {\n        localStorage.setItem(key, value);\n      } catch (e) {}\n    }\n  };\n}\nvar localStorageManager = createLocalStorageManager(STORAGE_KEY);\nfunction parseCookie(cookie, key) {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));\n  return match == null ? void 0 : match[2];\n}\nfunction createCookieStorageManager(key, cookie) {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get(init) {\n      if (cookie) return parseCookie(cookie, key);\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      return parseCookie(document.cookie, key) || init;\n    },\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`;\n    }\n  };\n}\nvar cookieStorageManager = createCookieStorageManager(STORAGE_KEY);\nvar cookieStorageManagerSSR = cookie => createCookieStorageManager(STORAGE_KEY, cookie);\nexport { STORAGE_KEY, createLocalStorageManager, localStorageManager, createCookieStorageManager, cookieStorageManager, cookieStorageManagerSSR };","map":{"version":3,"mappings":";;;AAEO,IAAMA,cAAc;AAWpB,SAASC,0BAA0BC,KAA6B;EACrE,OAAO;IACLC,KAAK;IACLC,MAAM;IACNC,IAAIC,MAAO;MACT,IAAI,EAACC,yCAAYC,WAAU,OAAOF;MAClC,IAAIG;MACJ,IAAI;QACFA,QAAQC,aAAaC,QAAQT,GAAG,KAAKI;MACvC,SAASM,GAAP,CAEF;MAEA,OAAOH,SAASH;IAClB;IACAO,IAAIJ,OAAO;MACT,IAAI;QACFC,aAAaI,QAAQZ,KAAKO,KAAK;MACjC,SAASG,GAAP,CAEF;IACF;EACF;AACF;AAEO,IAAMG,sBAAsBd,0BAA0BD,WAAW;AAExE,SAASgB,YAAYC,QAAgBf,KAA6B;EAChE,MAAMgB,QAAQD,OAAOC,MAAM,IAAIC,OAAO,QAAQjB,aAAa,CAAC;EAC5D,OAAOgB,+BAAQ;AACjB;AAEO,SAASE,2BACdlB,KACAe,QACgB;EAChB,OAAO;IACLd,KAAK,CAAC,CAACc;IACPb,MAAM;IACNC,IAAIC,MAAuB;MACzB,IAAIW,QAAQ,OAAOD,YAAYC,QAAQf,GAAG;MAC1C,IAAI,EAACK,yCAAYC,WAAU,OAAOF;MAClC,OAAOU,YAAYR,SAASS,QAAQf,GAAG,KAAKI;IAC9C;IACAO,IAAIJ,OAAO;MACTD,SAASS,SAAS,GAAGf,OAAOO;IAC9B;EACF;AACF;AAEO,IAAMY,uBAAuBD,2BAA2BpB,WAAW;AAEnE,IAAMsB,0BAA2BL,UACtCG,2BAA2BpB,aAAaiB,MAAM","names":["STORAGE_KEY","createLocalStorageManager","key","ssr","type","get","init","globalThis","document","value","localStorage","getItem","e","set","setItem","localStorageManager","parseCookie","cookie","match","RegExp","createCookieStorageManager","cookieStorageManager","cookieStorageManagerSSR"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/color-mode/src/storage-manager.ts"],"sourcesContent":["import { ColorMode } from \"./color-mode-types\"\n\nexport const STORAGE_KEY = \"chakra-ui-color-mode\"\n\ntype MaybeColorMode = ColorMode | undefined\n\nexport interface StorageManager {\n  type: \"cookie\" | \"localStorage\"\n  ssr?: boolean\n  get(init?: ColorMode): MaybeColorMode\n  set(value: ColorMode | \"system\"): void\n}\n\nexport function createLocalStorageManager(key: string): StorageManager {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get(init?) {\n      if (!globalThis?.document) return init\n      let value: any\n      try {\n        value = localStorage.getItem(key) || init\n      } catch (e) {\n        // no op\n      }\n\n      return value || init\n    },\n    set(value) {\n      try {\n        localStorage.setItem(key, value)\n      } catch (e) {\n        // no op\n      }\n    },\n  }\n}\n\nexport const localStorageManager = createLocalStorageManager(STORAGE_KEY)\n\nfunction parseCookie(cookie: string, key: string): MaybeColorMode {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`))\n  return match?.[2] as MaybeColorMode\n}\n\nexport function createCookieStorageManager(\n  key: string,\n  cookie?: string,\n): StorageManager {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get(init?): MaybeColorMode {\n      if (cookie) return parseCookie(cookie, key)\n      if (!globalThis?.document) return init\n      return parseCookie(document.cookie, key) || init\n    },\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`\n    },\n  }\n}\n\nexport const cookieStorageManager = createCookieStorageManager(STORAGE_KEY)\n\nexport const cookieStorageManagerSSR = (cookie: string) =>\n  createCookieStorageManager(STORAGE_KEY, cookie)\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}