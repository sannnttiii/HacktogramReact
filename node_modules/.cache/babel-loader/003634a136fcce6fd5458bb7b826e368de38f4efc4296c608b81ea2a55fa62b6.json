{"ast":null,"code":"'use client';\n\nimport { useAccordionContext } from \"./chunk-74QY6M57.mjs\";\nimport { useAccordionItemContext, useAccordionStyles } from \"./chunk-RUEU7BLR.mjs\";\n\n// src/accordion-panel.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { Collapse } from \"@chakra-ui/transition\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AccordionPanel = forwardRef(function AccordionPanel2(props, ref) {\n  const {\n    className,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    reduceMotion\n  } = useAccordionContext();\n  const {\n    getPanelProps,\n    isOpen\n  } = useAccordionItemContext();\n  const panelProps = getPanelProps(rest, ref);\n  const _className = cx(\"chakra-accordion__panel\", className);\n  const styles = useAccordionStyles();\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n  const child = /* @__PURE__ */jsx(chakra.div, {\n    ...panelProps,\n    __css: styles.panel,\n    className: _className\n  });\n  if (!reduceMotion) {\n    return /* @__PURE__ */jsx(Collapse, {\n      in: isOpen,\n      ...motionProps,\n      children: child\n    });\n  }\n  return child;\n});\nAccordionPanel.displayName = \"AccordionPanel\";\nexport { AccordionPanel };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,QAAQC,kBAAmC;AACpD,SAASC,gBAA+B;AACxC,SAASC,UAAU;AAsCb;AAlBC,IAAMC,iBAAiBH,WAC5B,SAASG,gBAAeC,OAAOC,KAAK;EAClC,MAAM;IAAEC;IAAWC;IAAa,GAAGC;EAAK,IAAIJ;EAE5C,MAAM;IAAEK;EAAa,IAAIC,qBAAoB;EAC7C,MAAM;IAAEC;IAAeC;EAAO,IAAIC,yBAAwB;EAG1D,MAAMC,aAAaH,cAAcH,MAAMH,GAAG;EAE1C,MAAMU,aAAab,GAAG,2BAA2BI,SAAS;EAC1D,MAAMU,SAASC,oBAAmB;EAElC,IAAI,CAACR,cAAc;IACjB,OAAOK,WAAWI;EACpB;EAEA,MAAMC,QACJ,mBAACpB,OAAOqB,KAAP;IAAY,GAAGN;IAAYO,OAAOL,OAAOM;IAAOhB,WAAWS;EAAA,CAAY;EAG1E,IAAI,CAACN,cAAc;IACjB,OACE,mBAACR;MAASsB,IAAIX;MAAS,GAAGL;MACvBiB;IAAA,CACH;EAEJ;EAEA,OAAOL;AACT,EACF;AAEAhB,eAAesB,cAAc","names":["chakra","forwardRef","Collapse","cx","AccordionPanel","props","ref","className","motionProps","rest","reduceMotion","useAccordionContext","getPanelProps","isOpen","useAccordionItemContext","panelProps","_className","styles","useAccordionStyles","hidden","child","div","__css","panel","in","children","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/accordion/src/accordion-panel.tsx"],"sourcesContent":["import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { Collapse, CollapseProps } from \"@chakra-ui/transition\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  useAccordionItemContext,\n  useAccordionStyles,\n} from \"./accordion-context\"\nimport { useAccordionContext } from \"./use-accordion\"\n\nexport interface AccordionPanelProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The properties passed to the underlying `Collapse` component.\n   */\n  motionProps?: CollapseProps\n}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  function AccordionPanel(props, ref) {\n    const { className, motionProps, ...rest } = props\n\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(rest, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", className)\n    const styles = useAccordionStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div {...panelProps} __css={styles.panel} className={_className} />\n    )\n\n    if (!reduceMotion) {\n      return (\n        <Collapse in={isOpen} {...motionProps}>\n          {child}\n        </Collapse>\n      )\n    }\n\n    return child\n  },\n)\n\nAccordionPanel.displayName = \"AccordionPanel\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}