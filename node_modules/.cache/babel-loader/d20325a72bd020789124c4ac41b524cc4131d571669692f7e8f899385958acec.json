{"ast":null,"code":"'use client';\n\nimport { DescendantsManager } from \"./chunk-FT3H4P66.mjs\";\nimport { cast, useSafeLayoutEffect } from \"./chunk-3A5YOZDU.mjs\";\n\n// src/use-descendant.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useRef, useState } from \"react\";\nfunction useDescendants() {\n  const descendants = useRef(new DescendantsManager());\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy();\n  });\n  return descendants.current;\n}\nvar [DescendantsContextProvider, useDescendantsContext] = createContext({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n});\nfunction useDescendant(options) {\n  const descendants = useDescendantsContext();\n  const [index, setIndex] = useState(-1);\n  const ref = useRef(null);\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    const dataIndex = Number(ref.current.dataset[\"index\"]);\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex);\n    }\n  });\n  const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref)\n  };\n}\nfunction createDescendantContext() {\n  const ContextProvider = cast(DescendantsContextProvider);\n  const _useDescendantsContext = () => cast(useDescendantsContext());\n  const _useDescendant = options => useDescendant(options);\n  const _useDescendants = () => useDescendants();\n  return [\n  // context provider\n  ContextProvider,\n  // call this when you need to read from context\n  _useDescendantsContext,\n  // descendants state information, to be called and passed to `ContextProvider`\n  _useDescendants,\n  // descendant index information\n  _useDescendant];\n}\nexport { createDescendantContext };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,qBAAqB;AAC9B,SAASC,iBAAiB;AAC1B,SAASC,QAAQC,gBAAgB;AAQjC,SAASC,iBAGL;EACF,MAAMC,cAAcH,OAAO,IAAII,oBAA0B;EACzDC,oBAAoB,MAAM;IACxB,OAAO,MAAMF,YAAYG,QAAQC,SAAQ;EAC3C,CAAC;EACD,OAAOJ,YAAYG;AACrB;AAaA,IAAM,CAACE,4BAA4BC,qBAAqB,IACtDX,cAAoC;EAClCY,MAAM;EACNC,cACE;AACJ,CAAC;AASH,SAASC,cAGPC,SAAgC;EAChC,MAAMV,cAAcM,uBAAsB;EAC1C,MAAM,CAACK,OAAOC,QAAQ,IAAId,SAAS,EAAE;EACrC,MAAMe,MAAMhB,OAAU,IAAI;EAE1BK,oBAAoB,MAAM;IACxB,OAAO,MAAM;MACX,IAAI,CAACW,IAAIV,SAAS;MAClBH,YAAYc,WAAWD,IAAIV,OAAO;IACpC;EACF,GAAG,EAAE;EAELD,oBAAoB,MAAM;IACxB,IAAI,CAACW,IAAIV,SAAS;IAClB,MAAMY,YAAYC,OAAOH,IAAIV,QAAQc,QAAQ,OAAO,CAAC;IACrD,IAAIN,SAASI,aAAa,CAACC,OAAOE,MAAMH,SAAS,GAAG;MAClDH,SAASG,SAAS;IACpB;EACF,CAAC;EAED,MAAMI,cAAcT,UAChBU,KAA2BpB,YAAYqB,SAASX,OAAO,CAAC,IACxDU,KAA2BpB,YAAYqB,QAAQ;EAEnD,OAAO;IACLrB;IACAW;IACAW,cAActB,YAAYuB,eAAeV,IAAIV,OAAO;IACpDkB,UAAUzB,UAAUuB,aAAaN,GAAG;EACtC;AACF;AAOO,SAASW,0BAGZ;EAEF,MAAMC,kBAAkBL,KAA0Bf,0BAA0B;EAE5E,MAAMqB,yBAAyB,MAC7BN,KAA+Bd,uBAAuB;EAExD,MAAMqB,iBAAkBjB,WACtBD,cAAoBC,OAAO;EAE7B,MAAMkB,kBAAkB,MAAM7B,gBAAqB;EAEnD,OAAO;EAAA;EAEL0B;EAAA;EAEAC;EAAA;EAEAE;EAAA;EAEAD,eACF;AACF","names":["createContext","mergeRefs","useRef","useState","useDescendants","descendants","DescendantsManager","useSafeLayoutEffect","current","destroy","DescendantsContextProvider","useDescendantsContext","name","errorMessage","useDescendant","options","index","setIndex","ref","unregister","dataIndex","Number","dataset","isNaN","refCallback","cast","register","enabledIndex","enabledIndexOf","createDescendantContext","ContextProvider","_useDescendantsContext","_useDescendant","_useDescendants"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/descendant/src/use-descendant.ts"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() {\n  const descendants = useRef(new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy()\n  })\n  return descendants.current\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [DescendantsContextProvider, useDescendantsContext] =\n  createContext<UseDescendantsReturn>({\n    name: \"DescendantsProvider\",\n    errorMessage:\n      \"useDescendantsContext must be used within DescendantsProvider\",\n  })\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>(options?: DescendantOptions<K>) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset[\"index\"])\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<React.RefCallback<T>>(descendants.register(options))\n    : cast<React.RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}