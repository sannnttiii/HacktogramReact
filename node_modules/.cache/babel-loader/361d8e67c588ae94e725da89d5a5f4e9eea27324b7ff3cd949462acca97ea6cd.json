{"ast":null,"code":"'use client';\n\n// src/get-next-item-from-search.ts\nfunction getNextItemFromSearch(items, searchString, itemToString, currentItem) {\n  if (searchString == null) {\n    return currentItem;\n  }\n  if (!currentItem) {\n    const foundItem = items.find(item => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));\n    return foundItem;\n  }\n  const matchingItems = items.filter(item => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));\n  if (matchingItems.length > 0) {\n    let nextIndex;\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem);\n      nextIndex = currentIndex + 1;\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0;\n      }\n      return matchingItems[nextIndex];\n    }\n    nextIndex = items.indexOf(matchingItems[0]);\n    return items[nextIndex];\n  }\n  return currentItem;\n}\nexport { getNextItemFromSearch };","map":{"version":3,"mappings":";;;AAQO,SAASA,sBACdC,OACAC,cACAC,cACAC,aACe;EACf,IAAIF,gBAAgB,MAAM;IACxB,OAAOE;EACT;EAGA,IAAI,CAACA,aAAa;IAChB,MAAMC,YAAYJ,MAAMK,KAAMC,QAC5BJ,aAAaI,IAAI,EAAEC,aAAY,CAAEC,WAAWP,aAAaM,aAAa,EACxE;IACA,OAAOH;EACT;EAGA,MAAMK,gBAAgBT,MAAMU,OAAQJ,QAClCJ,aAAaI,IAAI,EAAEC,aAAY,CAAEC,WAAWP,aAAaM,aAAa,EACxE;EAGA,IAAIE,cAAcE,SAAS,GAAG;IAC5B,IAAIC;IAGJ,IAAIH,cAAcI,SAASV,WAAW,GAAG;MACvC,MAAMW,eAAeL,cAAcM,QAAQZ,WAAW;MACtDS,YAAYE,eAAe;MAC3B,IAAIF,cAAcH,cAAcE,QAAQ;QACtCC,YAAY;MACd;MACA,OAAOH,cAAcG,SAAS;IAChC;IAEAA,YAAYZ,MAAMe,QAAQN,cAAc,CAAC,CAAC;IAC1C,OAAOT,MAAMY,SAAS;EACxB;EAGA,OAAOT;AACT","names":["getNextItemFromSearch","items","searchString","itemToString","currentItem","foundItem","find","item","toLowerCase","startsWith","matchingItems","filter","length","nextIndex","includes","currentIndex","indexOf"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/menu/src/get-next-item-from-search.ts"],"sourcesContent":["/**\n * Gets the next item based on a search string\n *\n * @param items array of items\n * @param searchString the search string\n * @param itemToString resolves an item to string\n * @param currentItem the current selected item\n */\nexport function getNextItemFromSearch<T>(\n  items: T[],\n  searchString: string,\n  itemToString: (item: T) => string,\n  currentItem: T,\n): T | undefined {\n  if (searchString == null) {\n    return currentItem\n  }\n\n  // If current item doesn't exist, find the item that matches the search string\n  if (!currentItem) {\n    const foundItem = items.find((item) =>\n      itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n    )\n    return foundItem\n  }\n\n  // Filter items for ones that match the search string (case insensitive)\n  const matchingItems = items.filter((item) =>\n    itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n  )\n\n  // If there's a match, let's get the next item to select\n  if (matchingItems.length > 0) {\n    let nextIndex: number\n\n    // If the currentItem is in the available items, we move to the next available option\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem)\n      nextIndex = currentIndex + 1\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0\n      }\n      return matchingItems[nextIndex]\n    }\n    // Else, we pick the first item in the available items\n    nextIndex = items.indexOf(matchingItems[0])\n    return items[nextIndex]\n  }\n\n  // a decent fallback to the currentItem\n  return currentItem\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}