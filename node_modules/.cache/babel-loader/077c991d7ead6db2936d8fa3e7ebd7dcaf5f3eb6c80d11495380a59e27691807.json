{"ast":null,"code":"'use client';\n\nimport { useTheme } from \"./chunk-UIGT7YZF.mjs\";\n\n// src/hooks.ts\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nfunction useChakra() {\n  const colorModeResult = useColorMode();\n  const theme = useTheme();\n  return {\n    ...colorModeResult,\n    theme\n  };\n}\nfunction getBreakpointValue(theme, value, fallback) {\n  var _a, _b;\n  if (value == null) return value;\n  const getValue = val => {\n    var _a2, _b2;\n    return (_b2 = (_a2 = theme.__breakpoints) == null ? void 0 : _a2.asArray) == null ? void 0 : _b2[val];\n  };\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\nfunction getTokenValue(theme, value, fallback) {\n  var _a, _b;\n  if (value == null) return value;\n  const getValue = val => {\n    var _a2, _b2;\n    return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.value;\n  };\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\nfunction useToken(scale, token, fallback) {\n  const theme = useTheme();\n  return getToken(scale, token, fallback)(theme);\n}\nfunction getToken(scale, token, fallback) {\n  const _token = Array.isArray(token) ? token : [token];\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback];\n  return theme => {\n    const fallbackArr = _fallback.filter(Boolean);\n    const result = _token.map((token2, index) => {\n      var _a, _b;\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token2, (_a = fallbackArr[index]) != null ? _a : token2);\n      }\n      const path = `${scale}.${token2}`;\n      return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);\n    });\n    return Array.isArray(token) ? result : result[0];\n  };\n}\nexport { useChakra, useToken, getToken };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,oBAAoB;AAItB,SAASC,YAAmC;EACjD,MAAMC,kBAAkBF,cAAa;EACrC,MAAMG,QAAQC,UAAS;EACvB,OAAO;IAAE,GAAGF;IAAiBC;EAAM;AACrC;AAEA,SAASE,mBACPF,OACAG,OACAC,UACA;EAdF;EAeE,IAAID,SAAS,MAAM,OAAOA;EAC1B,MAAME,WAAYC,OAAQ;IAhB5B;IAgB+B,2BAAMC,kBAAN,oBAAqBC,YAArB,oBAA+BF;EAAA;EAC5D,QAAOG,oBAASN,KAAK,MAAd,YAAmBE,SAASD,QAAQ,MAApC,YAAyCA;AAClD;AAEA,SAASM,cACPV,OACAG,OACAC,UACA;EAxBF;EAyBE,IAAID,SAAS,MAAM,OAAOA;EAC1B,MAAME,WAAYC,OAAQ;IA1B5B;IA0B+B,2BAAMK,aAAN,oBAAiBL,SAAjB,oBAAuBH;EAAA;EACpD,QAAOM,oBAASN,KAAK,MAAd,YAAmBE,SAASD,QAAQ,MAApC,YAAyCA;AAClD;AAOO,SAASQ,SACdC,OACAC,OACAV,UACA;EACA,MAAMJ,QAAQC,UAAS;EACvB,OAAOc,SAASF,OAAOC,OAAOV,QAAQ,EAAEJ,KAAK;AAC/C;AAEO,SAASe,SACdF,OACAC,OACAV,UACoB;EACpB,MAAMY,SAASC,MAAMC,QAAQJ,KAAK,IAAIA,QAAQ,CAACA,KAAK;EACpD,MAAMK,YAAYF,MAAMC,QAAQd,QAAQ,IAAIA,WAAW,CAACA,QAAQ;EAChE,OAAQJ,SAAqB;IAC3B,MAAMoB,cAAcD,UAAUE,OAAOC,OAAO;IAC5C,MAAMC,SAASP,OAAOQ,IAAI,CAACV,QAAOW,UAAU;MArDhD;MAsDM,IAAIZ,UAAU,eAAe;QAC3B,OAAOX,mBAAmBF,OAAOc,SAAOY,iBAAYD,KAAK,MAAjB,YAAsBX,MAAK;MACrE;MACA,MAAMa,OAAO,GAAGd,KAAK,IAAIC,MAAK;MAC9B,OAAOJ,cAAcV,OAAO2B,OAAMlB,iBAAYgB,KAAK,MAAjB,YAAsBX,MAAK;IAC/D,CAAC;IACD,OAAOG,MAAMC,QAAQJ,KAAK,IAAIS,SAASA,OAAO,CAAC;EACjD;AACF","names":["useColorMode","useChakra","colorModeResult","theme","useTheme","getBreakpointValue","value","fallback","getValue","val","__breakpoints","asArray","_b","getTokenValue","__cssMap","useToken","scale","token","getToken","_token","Array","isArray","_fallback","fallbackArr","filter","Boolean","result","map","index","_a","path"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/system/src/hooks.ts"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { Dict, StringOrNumber } from \"@chakra-ui/utils\"\nimport { useTheme } from \"./use-theme\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nfunction getBreakpointValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__breakpoints?.asArray?.[val]\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\nfunction getTokenValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__cssMap?.[val]?.value\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\n/**\n * `useToken` is a custom hook used to resolve design tokens from the theme.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-token\n */\nexport function useToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n) {\n  const theme = useTheme()\n  return getToken(scale, token, fallback)(theme)\n}\n\nexport function getToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n): (theme: Dict) => T {\n  const _token = Array.isArray(token) ? token : [token]\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback]\n  return (theme: Dict<any>) => {\n    const fallbackArr = _fallback.filter(Boolean) as T[]\n    const result = _token.map((token, index) => {\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token, fallbackArr[index] ?? token)\n      }\n      const path = `${scale}.${token}`\n      return getTokenValue(theme, path, fallbackArr[index] ?? token)\n    })\n    return Array.isArray(token) ? result : result[0]\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}