{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { trackElementSize } from \"@zag-js/element-size\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nvar useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? useLayoutEffect : useEffect;\nfunction trackMutation(el, cb) {\n  var _a, _b;\n  if (!el || !el.parentElement) return;\n  const win = (_b = (_a = el.ownerDocument) == null ? void 0 : _a.defaultView) != null ? _b : window;\n  const observer = new win.MutationObserver(() => {\n    cb();\n  });\n  observer.observe(el.parentElement, {\n    childList: true\n  });\n  return () => {\n    observer.disconnect();\n  };\n}\nfunction useSizes(_ref) {\n  let {\n    getNodes,\n    observeMutation = true\n  } = _ref;\n  const [sizes, setSizes] = useState([]);\n  const [count, setCount] = useState(0);\n  useSafeLayoutEffect(() => {\n    const elements = getNodes();\n    const cleanups = elements.map((element, index) => trackElementSize(element, size => {\n      setSizes(sizes2 => {\n        return [...sizes2.slice(0, index), size, ...sizes2.slice(index + 1)];\n      });\n    }));\n    if (observeMutation) {\n      const firstNode = elements[0];\n      cleanups.push(trackMutation(firstNode, () => {\n        setCount(count2 => count2 + 1);\n      }));\n    }\n    return () => {\n      cleanups.forEach(cleanup => {\n        cleanup == null ? void 0 : cleanup();\n      });\n    };\n  }, [count]);\n  return sizes;\n}\nfunction isRef(ref) {\n  return typeof ref === \"object\" && ref !== null && \"current\" in ref;\n}\nfunction useSize(subject) {\n  const [size] = useSizes({\n    observeMutation: false,\n    getNodes() {\n      const node = isRef(subject) ? subject.current : subject;\n      return [node];\n    }\n  });\n  return size;\n}\nexport { useSize, useSizes };","map":{"version":3,"mappings":";;;AAAA,SAASA,wBAAqC;AAC9C,SAASC,WAAWC,iBAAiBC,gBAAgB;AAErD,IAAMC,sBAAsBC,QAAQC,yCAAYC,QAAQ,IACpDL,kBACAD;AAEJ,SAASO,cAAcC,IAAwBC,IAAgB;EAP/D;EAQE,IAAI,CAACD,MAAM,CAACA,GAAGE,eAAe;EAC9B,MAAMC,OAAMC,cAAGC,kBAAH,mBAAkBC,gBAAlB,YAAiCC;EAC7C,MAAMC,WAAW,IAAIL,IAAIM,iBAAiB,MAAM;IAC9CR,IAAG;EACL,CAAC;EACDO,SAASE,QAAQV,GAAGE,eAAe;IAAES,WAAW;EAAK,CAAC;EACtD,OAAO,MAAM;IACXH,SAASI,YAAW;EACtB;AACF;AAEO,SAASC,eAMb;EAAA,IANoD;IACrDC;IACAC,kBAAkB;EACpB;EAIE,MAAM,CAACC,OAAOC,QAAQ,IAAIvB,SAAwB,EAAE;EACpD,MAAM,CAACwB,OAAOC,QAAQ,IAAIzB,SAAS,CAAC;EAEpCC,oBAAoB,MAAM;IACxB,MAAMyB,WAAWN,UAAS;IAE1B,MAAMO,WAAWD,SAASE,IAAI,CAACC,SAASC,UACtCjC,iBAAiBgC,SAAUE,QAAS;MAClCR,SAAUD,UAAU;QAClB,OAAO,CACL,GAAGA,OAAMU,MAAM,GAAGF,KAAK,GACvBC,MACA,GAAGT,OAAMU,MAAMF,QAAQ,CAAC,EAC1B;MACF,CAAC;IACH,CAAC,EACH;IAEA,IAAIT,iBAAiB;MACnB,MAAMY,YAAYP,SAAS,CAAC;MAC5BC,SAASO,KACP7B,cAAc4B,WAAW,MAAM;QAC7BR,SAAUD,UAAUA,SAAQ,CAAC;MAC/B,CAAC,EACH;IACF;IAEA,OAAO,MAAM;MACXG,SAASQ,QAASC,WAAY;QAC5BA;MACF,CAAC;IACH;EACF,GAAG,CAACZ,KAAK,CAAC;EAEV,OAAOF;AACT;AAEA,SAASe,MAAMC,KAAuC;EACpD,OAAO,OAAOA,QAAQ,YAAYA,QAAQ,QAAQ,aAAaA;AACjE;AAEO,SAASC,QACdC,SACA;EACA,MAAM,CAACT,IAAI,IAAIZ,SAAS;IACtBE,iBAAiB;IACjBD,WAAW;MACT,MAAMqB,OAAOJ,MAAMG,OAAO,IAAIA,QAAQE,UAAUF;MAChD,OAAO,CAACC,IAAI;IACd;EACF,CAAC;EACD,OAAOV;AACT","names":["trackElementSize","useEffect","useLayoutEffect","useState","useSafeLayoutEffect","Boolean","globalThis","document","trackMutation","el","cb","parentElement","win","_b","ownerDocument","defaultView","window","observer","MutationObserver","observe","childList","disconnect","useSizes","getNodes","observeMutation","sizes","setSizes","count","setCount","elements","cleanups","map","element","index","size","slice","firstNode","push","forEach","cleanup","isRef","ref","useSize","subject","node","current"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/react-use-size/src/index.ts"],"sourcesContent":["import { trackElementSize, ElementSize } from \"@zag-js/element-size\"\nimport { useEffect, useLayoutEffect, useState } from \"react\"\n\nconst useSafeLayoutEffect = Boolean(globalThis?.document)\n  ? useLayoutEffect\n  : useEffect\n\nfunction trackMutation(el: HTMLElement | null, cb: () => void) {\n  if (!el || !el.parentElement) return\n  const win = el.ownerDocument?.defaultView ?? window\n  const observer = new win.MutationObserver(() => {\n    cb()\n  })\n  observer.observe(el.parentElement, { childList: true })\n  return () => {\n    observer.disconnect()\n  }\n}\n\nexport function useSizes<T extends HTMLElement | null>({\n  getNodes,\n  observeMutation = true,\n}: {\n  getNodes: () => T[]\n  observeMutation?: boolean\n}) {\n  const [sizes, setSizes] = useState<ElementSize[]>([])\n  const [count, setCount] = useState(0)\n\n  useSafeLayoutEffect(() => {\n    const elements = getNodes()\n\n    const cleanups = elements.map((element, index) =>\n      trackElementSize(element, (size) => {\n        setSizes((sizes) => {\n          return [\n            ...sizes.slice(0, index),\n            size,\n            ...sizes.slice(index + 1),\n          ] as ElementSize[]\n        })\n      }),\n    )\n\n    if (observeMutation) {\n      const firstNode = elements[0]\n      cleanups.push(\n        trackMutation(firstNode, () => {\n          setCount((count) => count + 1)\n        }),\n      )\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => {\n        cleanup?.()\n      })\n    }\n  }, [count])\n\n  return sizes as Array<ElementSize | undefined>\n}\n\nfunction isRef(ref: any): ref is React.RefObject<any> {\n  return typeof ref === \"object\" && ref !== null && \"current\" in ref\n}\n\nexport function useSize<T extends HTMLElement | null>(\n  subject: T | React.RefObject<T>,\n) {\n  const [size] = useSizes({\n    observeMutation: false,\n    getNodes() {\n      const node = isRef(subject) ? subject.current : subject\n      return [node]\n    },\n  })\n  return size as ElementSize | undefined\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}