{"ast":null,"code":"'use client';\n\nimport { PinInputDescendantsProvider, PinInputProvider, usePinInput, usePinInputField } from \"./chunk-7FMJRAMH.mjs\";\n\n// src/pin-input.tsx\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction PinInput(props) {\n  const styles = useStyleConfig(\"PinInput\", props);\n  const {\n    children,\n    ...rest\n  } = omitThemingProps(props);\n  const {\n    descendants,\n    ...context\n  } = usePinInput(rest);\n  const clones = getValidChildren(children).map(child => cloneElement(child, {\n    __css: styles\n  }));\n  return /* @__PURE__ */jsx(PinInputDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx(PinInputProvider, {\n      value: context,\n      children: clones\n    })\n  });\n}\nPinInput.displayName = \"PinInput\";\nvar PinInputField = forwardRef(function PinInputField2(props, ref) {\n  const inputProps = usePinInputField(props, ref);\n  return /* @__PURE__ */jsx(chakra.input, {\n    ...inputProps,\n    className: cx(\"chakra-pin-input\", props.className)\n  });\n});\nPinInputField.displayName = \"PinInputField\";\nexport { PinInput, PinInputField };","map":{"version":3,"mappings":";;;;;AAAA,SACEA,QACAC,YACAC,kBAEAC,sBAEK;AACP,SAASC,UAAU;AACnB,SAASC,wBAAwB;AAQjC,SAASC,oBAAoB;AA4CvB;AAZC,SAASC,SAASC,OAAsB;EAC7C,MAAMC,SAASN,eAAe,YAAYK,KAAK;EAE/C,MAAM;IAAEE;IAAU,GAAGC;EAAK,IAAIT,iBAAiBM,KAAK;EACpD,MAAM;IAAEI;IAAa,GAAGC;EAAQ,IAAIC,YAAYH,IAAI;EAEpD,MAAMI,SAASV,iBAAiBK,QAAQ,EAAEM,IAAKC,SAC7CX,aAAaW,OAAO;IAAEC,OAAOT;EAAO,CAAC,EACvC;EAEA,OACE,mBAACU;IAA4BC,OAAOR;IAClCF,6BAACW;MAAiBD,OAAOP;MAAUH;IAAA,CAAO;EAAA,CAC5C;AAEJ;AAEAH,SAASe,cAAc;AAIhB,IAAMC,gBAAgBtB,WAC3B,SAASsB,eAAcf,OAAOgB,KAAK;EACjC,MAAMC,aAAaC,iBAAiBlB,OAAOgB,GAAG;EAC9C,OACE,mBAACxB,OAAO2B,OAAP;IACE,GAAGF;IACJG,WAAWxB,GAAG,oBAAoBI,MAAMoB,SAAS;EAAA,EACnD;AAEJ,EACF;AAEAL,cAAcD,cAAc","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","getValidChildren","cloneElement","PinInput","props","styles","children","rest","descendants","context","usePinInput","clones","map","child","__css","PinInputDescendantsProvider","value","PinInputProvider","displayName","PinInputField","ref","inputProps","usePinInputField","input","className"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/pin-input/src/pin-input.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  PinInputDescendantsProvider,\n  PinInputProvider,\n  usePinInput,\n  usePinInputField,\n  UsePinInputProps,\n} from \"./use-pin-input\"\nimport { cloneElement } from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface PinInputProps\n  extends UsePinInputProps,\n    ThemingProps<\"PinInput\">,\n    InputOptions {\n  /**\n   * The children of the pin input component\n   */\n  children: React.ReactNode\n}\n\n/**\n * The `PinInput` component is similar to the Input component, but is optimized for entering sequences of digits quickly.\n *\n * @see Docs https://chakra-ui.com/docs/components/pin-input\n */\nexport function PinInput(props: PinInputProps) {\n  const styles = useStyleConfig(\"PinInput\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const { descendants, ...context } = usePinInput(rest)\n\n  const clones = getValidChildren(children).map((child) =>\n    cloneElement(child, { __css: styles }),\n  )\n\n  return (\n    <PinInputDescendantsProvider value={descendants}>\n      <PinInputProvider value={context}>{clones}</PinInputProvider>\n    </PinInputDescendantsProvider>\n  )\n}\n\nPinInput.displayName = \"PinInput\"\n\nexport interface PinInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  function PinInputField(props, ref) {\n    const inputProps = usePinInputField(props, ref)\n    return (\n      <chakra.input\n        {...inputProps}\n        className={cx(\"chakra-pin-input\", props.className)}\n      />\n    )\n  },\n)\n\nPinInputField.displayName = \"PinInputField\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}