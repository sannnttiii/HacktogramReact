{"ast":null,"code":"'use client';\n\nimport { useRangeSlider } from \"./chunk-K3MZ7A5P.mjs\";\nimport { cx } from \"./chunk-DX64QB22.mjs\";\n\n// src/range-slider.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig, useTheme } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar [RangeSliderProvider, useRangeSliderContext] = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\"\n});\nvar [RangeSliderStylesProvider, useRangeSliderStyles] = createContext({\n  name: `RangeSliderStylesContext`,\n  errorMessage: `useRangeSliderStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<RangeSlider />\" `\n});\nvar RangeSlider = forwardRef(function RangeSlider2(props, ref) {\n  const sliderProps = {\n    orientation: \"horizontal\",\n    ...props\n  };\n  const styles = useMultiStyleConfig(\"Slider\", sliderProps);\n  const ownProps = omitThemingProps(sliderProps);\n  const {\n    direction\n  } = useTheme();\n  ownProps.direction = direction;\n  const {\n    getRootProps,\n    ...context\n  } = useRangeSlider(ownProps);\n  const ctx = useMemo(() => ({\n    ...context,\n    name: sliderProps.name\n  }), [context, sliderProps.name]);\n  return /* @__PURE__ */jsx(RangeSliderProvider, {\n    value: ctx,\n    children: /* @__PURE__ */jsx(RangeSliderStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, {\n        ...getRootProps({}, ref),\n        className: \"chakra-slider\",\n        __css: styles.container,\n        children: sliderProps.children\n      })\n    })\n  });\n});\nRangeSlider.displayName = \"RangeSlider\";\nvar RangeSliderThumb = forwardRef(function RangeSliderThumb2(props, ref) {\n  const {\n    getThumbProps,\n    getInputProps,\n    name\n  } = useRangeSliderContext();\n  const styles = useRangeSliderStyles();\n  const thumbProps = getThumbProps(props, ref);\n  return /* @__PURE__ */jsxs(chakra.div, {\n    ...thumbProps,\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: styles.thumb,\n    children: [thumbProps.children, name && /* @__PURE__ */jsx(\"input\", {\n      ...getInputProps({\n        index: props.index\n      })\n    })]\n  });\n});\nRangeSliderThumb.displayName = \"RangeSliderThumb\";\nvar RangeSliderTrack = forwardRef(function RangeSliderTrack2(props, ref) {\n  const {\n    getTrackProps\n  } = useRangeSliderContext();\n  const styles = useRangeSliderStyles();\n  const trackProps = getTrackProps(props, ref);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ...trackProps,\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: styles.track,\n    \"data-testid\": \"chakra-range-slider-track\"\n  });\n});\nRangeSliderTrack.displayName = \"RangeSliderTrack\";\nvar RangeSliderFilledTrack = forwardRef(function RangeSliderFilledTrack2(props, ref) {\n  const {\n    getInnerTrackProps\n  } = useRangeSliderContext();\n  const styles = useRangeSliderStyles();\n  const trackProps = getInnerTrackProps(props, ref);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ...trackProps,\n    className: \"chakra-slider__filled-track\",\n    __css: styles.filledTrack\n  });\n});\nRangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\";\nvar RangeSliderMark = forwardRef(function RangeSliderMark2(props, ref) {\n  const {\n    getMarkerProps\n  } = useRangeSliderContext();\n  const styles = useRangeSliderStyles();\n  const markProps = getMarkerProps(props, ref);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ...markProps,\n    className: cx(\"chakra-slider__marker\", props.className),\n    __css: styles.mark\n  });\n});\nRangeSliderMark.displayName = \"RangeSliderMark\";\nexport { RangeSliderProvider, useRangeSliderContext, useRangeSliderStyles, RangeSlider, RangeSliderThumb, RangeSliderTrack, RangeSliderFilledTrack, RangeSliderMark };","map":{"version":3,"mappings":"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","names":["createContext","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","useTheme","useMemo","jsxs","RangeSliderProvider","useRangeSliderContext","name","errorMessage","RangeSliderStylesProvider","useRangeSliderStyles","RangeSlider","props","ref","sliderProps","orientation","styles","ownProps","direction","getRootProps","context","useRangeSlider","ctx","value","children","div","className","__css","container","displayName","RangeSliderThumb","getThumbProps","getInputProps","thumbProps","cx","thumb","index","RangeSliderTrack","getTrackProps","trackProps","track","RangeSliderFilledTrack","getInnerTrackProps","filledTrack","RangeSliderMark","getMarkerProps","markProps","mark"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/slider/src/range-slider.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/utils\"\nimport { useMemo } from \"react\"\nimport {\n  useRangeSlider,\n  UseRangeSliderProps,\n  UseRangeSliderReturn,\n} from \"./use-range-slider\"\n\ninterface RangeSliderContext\n  extends Omit<UseRangeSliderReturn, \"getRootProps\"> {\n  name?: string | string[]\n}\n\nconst [RangeSliderProvider, useRangeSliderContext] =\n  createContext<RangeSliderContext>({\n    name: \"SliderContext\",\n    errorMessage:\n      \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\",\n  })\n\nconst [RangeSliderStylesProvider, useRangeSliderStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `RangeSliderStylesContext`,\n  errorMessage: `useRangeSliderStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<RangeSlider />\" `,\n})\n\nexport { useRangeSliderStyles }\n\nexport { RangeSliderProvider, useRangeSliderContext }\n\nexport interface RangeSliderProps\n  extends UseRangeSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseRangeSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb/\n */\nexport const RangeSlider = forwardRef<RangeSliderProps, \"div\">(\n  function RangeSlider(props, ref) {\n    const sliderProps: RangeSliderProps = {\n      orientation: \"horizontal\",\n      ...props,\n    }\n\n    const styles = useMultiStyleConfig(\"Slider\", sliderProps)\n    const ownProps = omitThemingProps(sliderProps)\n\n    const { direction } = useTheme()\n    ownProps.direction = direction\n\n    const { getRootProps, ...context } = useRangeSlider(ownProps)\n    const ctx = useMemo(\n      () => ({ ...context, name: sliderProps.name }),\n      [context, sliderProps.name],\n    )\n\n    return (\n      <RangeSliderProvider value={ctx}>\n        <RangeSliderStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className=\"chakra-slider\"\n            __css={styles.container}\n          >\n            {sliderProps.children}\n          </chakra.div>\n        </RangeSliderStylesProvider>\n      </RangeSliderProvider>\n    )\n  },\n)\n\nRangeSlider.displayName = \"RangeSlider\"\n\nexport interface RangeSliderThumbProps extends HTMLChakraProps<\"div\"> {\n  index: number\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const RangeSliderThumb = forwardRef<RangeSliderThumbProps, \"div\">(\n  function RangeSliderThumb(props, ref) {\n    const { getThumbProps, getInputProps, name } = useRangeSliderContext()\n    const styles = useRangeSliderStyles()\n    const thumbProps = getThumbProps(props, ref)\n\n    return (\n      <chakra.div\n        {...thumbProps}\n        className={cx(\"chakra-slider__thumb\", props.className)}\n        __css={styles.thumb}\n      >\n        {thumbProps.children}\n        {name && <input {...getInputProps({ index: props.index })} />}\n      </chakra.div>\n    )\n  },\n)\n\nRangeSliderThumb.displayName = \"RangeSliderThumb\"\n\nexport interface RangeSliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderTrack = forwardRef<RangeSliderTrackProps, \"div\">(\n  function RangeSliderTrack(props, ref) {\n    const { getTrackProps } = useRangeSliderContext()\n    const styles = useRangeSliderStyles()\n    const trackProps = getTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__track\", props.className)}\n        __css={styles.track}\n        data-testid=\"chakra-range-slider-track\"\n      />\n    )\n  },\n)\n\nRangeSliderTrack.displayName = \"RangeSliderTrack\"\n\nexport interface RangeSliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderFilledTrack = forwardRef<\n  RangeSliderInnerTrackProps,\n  \"div\"\n>(function RangeSliderFilledTrack(props, ref) {\n  const { getInnerTrackProps } = useRangeSliderContext()\n  const styles = useRangeSliderStyles()\n  const trackProps = getInnerTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className=\"chakra-slider__filled-track\"\n      __css={styles.filledTrack}\n    />\n  )\n})\n\nRangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\"\n\nexport interface RangeSliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const RangeSliderMark = forwardRef<RangeSliderMarkProps, \"div\">(\n  function RangeSliderMark(props, ref) {\n    const { getMarkerProps } = useRangeSliderContext()\n    const styles = useRangeSliderStyles()\n    const markProps = getMarkerProps(props, ref)\n    return (\n      <chakra.div\n        {...markProps}\n        className={cx(\"chakra-slider__marker\", props.className)}\n        __css={styles.mark}\n      />\n    )\n  },\n)\n\nRangeSliderMark.displayName = \"RangeSliderMark\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}