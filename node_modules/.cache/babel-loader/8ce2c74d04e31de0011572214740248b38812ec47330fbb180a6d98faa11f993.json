{"ast":null,"code":"'use client';\n\nimport { MenuDescendantsProvider, MenuProvider, useMenu } from \"./chunk-SANI5SUM.mjs\";\n\n// src/menu.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { omitThemingProps, useMultiStyleConfig, useTheme } from \"@chakra-ui/system\";\nimport { runIfFn } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [MenuStylesProvider, useMenuStyles] = createContext({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `\n});\nvar Menu = props => {\n  const {\n    children\n  } = props;\n  const styles = useMultiStyleConfig(\"Menu\", props);\n  const ownProps = omitThemingProps(props);\n  const {\n    direction\n  } = useTheme();\n  const {\n    descendants,\n    ...ctx\n  } = useMenu({\n    ...ownProps,\n    direction\n  });\n  const context = useMemo(() => ctx, [ctx]);\n  const {\n    isOpen,\n    onClose,\n    forceUpdate\n  } = context;\n  return /* @__PURE__ */jsx(MenuDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx(MenuProvider, {\n      value: context,\n      children: /* @__PURE__ */jsx(MenuStylesProvider, {\n        value: styles,\n        children: runIfFn(children, {\n          isOpen,\n          onClose,\n          forceUpdate\n        })\n      })\n    })\n  });\n};\nMenu.displayName = \"Menu\";\nexport { useMenuStyles, Menu };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,qBAAqB;AAC9B,SACEC,kBAGAC,qBACAC,gBACK;AACP,SAASC,eAAe;AACxB,SAASC,eAAe;AA+ChB;AAvCR,IAAM,CAACC,oBAAoBC,aAAa,IAAIP,cAE1C;EACAQ,MAAM;EACNC,cAAc;AAChB,CAAC;AAoBM,IAAMC,OAA6BC,SAAU;EAClD,MAAM;IAAEC;EAAS,IAAID;EAErB,MAAME,SAASX,oBAAoB,QAAQS,KAAK;EAChD,MAAMG,WAAWb,iBAAiBU,KAAK;EACvC,MAAM;IAAEI;EAAU,IAAIZ,UAAS;EAC/B,MAAM;IAAEa;IAAa,GAAGC;EAAI,IAAIC,QAAQ;IAAE,GAAGJ;IAAUC;EAAU,CAAC;EAClE,MAAMI,UAAUd,QAAQ,MAAMY,KAAK,CAACA,GAAG,CAAC;EAExC,MAAM;IAAEG;IAAQC;IAASC;EAAY,IAAIH;EAEzC,OACE,mBAACI;IAAwBC,OAAOR;IAC9BJ,6BAACa;MAAaD,OAAOL;MACnBP,6BAACN;QAAmBkB,OAAOX;QACxBD,kBAAQA,UAAU;UAAEQ;UAAQC;UAASC;QAAY,CAAC;MAAA,CACrD;IAAA,CACF;EAAA,CACF;AAEJ;AAEAZ,KAAKgB,cAAc","names":["createContext","omitThemingProps","useMultiStyleConfig","useTheme","runIfFn","useMemo","MenuStylesProvider","useMenuStyles","name","errorMessage","Menu","props","children","styles","ownProps","direction","descendants","ctx","useMenu","context","isOpen","onClose","forceUpdate","MenuDescendantsProvider","value","MenuProvider","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/menu/src/menu.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport {\n  MenuDescendantsProvider,\n  MenuProvider,\n  useMenu,\n  UseMenuProps,\n} from \"./use-menu\"\n\nconst [MenuStylesProvider, useMenuStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `,\n})\n\nexport { useMenuStyles }\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode)\n\nexport interface MenuProps extends UseMenuProps, ThemingProps<\"Menu\"> {\n  children: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n *\n * @see Docs https://chakra-ui.com/docs/components/menu\n */\nexport const Menu: React.FC<MenuProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig(\"Menu\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  const { descendants, ...ctx } = useMenu({ ...ownProps, direction })\n  const context = useMemo(() => ctx, [ctx])\n\n  const { isOpen, onClose, forceUpdate } = context\n\n  return (\n    <MenuDescendantsProvider value={descendants}>\n      <MenuProvider value={context}>\n        <MenuStylesProvider value={styles}>\n          {runIfFn(children, { isOpen, onClose, forceUpdate })}\n        </MenuStylesProvider>\n      </MenuProvider>\n    </MenuDescendantsProvider>\n  )\n}\n\nMenu.displayName = \"Menu\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}