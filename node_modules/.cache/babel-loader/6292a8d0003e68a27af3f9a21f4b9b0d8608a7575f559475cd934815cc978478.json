{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-event-listener.ts\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useEffect } from \"react\";\nfunction useEventListener(event, handler, env, options) {\n  const listener = useCallbackRef(handler);\n  useEffect(() => {\n    var _a;\n    const node = (_a = runIfFn(env)) != null ? _a : document;\n    if (!handler) {\n      return;\n    }\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener, handler]);\n  return () => {\n    var _a;\n    const node = (_a = runIfFn(env)) != null ? _a : document;\n    node.removeEventListener(event, listener, options);\n  };\n}\nexport { useEventListener };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,eAAe;AACxB,SAASC,iBAAiB;AAiBnB,SAASC,iBACdC,OACAC,SACAC,KACAC,SACA;EACA,MAAMC,WAAWC,eAAeJ,OAAO;EAEvCH,UAAU,MAAM;IA1BlB;IA2BI,MAAMQ,QAAOC,aAAQL,GAAG,MAAX,YAAgBM;IAE7B,IAAI,CAACP,SAAS;MACZ;IACF;IAEAK,KAAKG,iBAAiBT,OAAOI,UAAUD,OAAO;IAC9C,OAAO,MAAM;MACXG,KAAKI,oBAAoBV,OAAOI,UAAUD,OAAO;IACnD;EACF,GAAG,CAACH,OAAOE,KAAKC,SAASC,UAAUH,OAAO,CAAC;EAE3C,OAAO,MAAM;IAvCf;IAwCI,MAAMK,QAAOC,aAAQL,GAAG,MAAX,YAAgBM;IAC7BF,KAAKI,oBAAoBV,OAAOI,UAAUD,OAAO;EACnD;AACF","names":["runIfFn","useEffect","useEventListener","event","handler","env","options","listener","useCallbackRef","node","_a","document","addEventListener","removeEventListener"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/hooks/src/use-event-listener.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useEffect } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param env the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler?: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    if (!handler) {\n      return\n    }\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener, handler])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}