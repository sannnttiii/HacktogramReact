{"ast":null,"code":"'use client';\n\nimport { StackItem } from \"./chunk-ZFQCCYWD.mjs\";\nimport { getDividerStyles } from \"./chunk-5VJV6UNA.mjs\";\n\n// src/stack/stack.tsx\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  const dividerStyle = useMemo(() => getDividerStyles({\n    spacing,\n    direction\n  }), [spacing, direction]);\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */jsx(StackItem, {\n        children: child\n      }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider) return _child;\n      const clonedDivider = cloneElement(divider, {\n        __css: dividerStyle\n      });\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [_child, _divider]\n      }, key);\n    });\n  }, [divider, dividerStyle, hasDivider, shouldUseChildren, shouldWrapChildren, children]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: direction,\n    flexWrap: wrap,\n    gap: hasDivider ? void 0 : spacing,\n    className: _className,\n    ...rest,\n    children: clones\n  });\n});\nStack.displayName = \"Stack\";\nexport { Stack };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,wBAAwB;AACjC,SAASC,UAAU;AACnB,SACEC,QACAC,kBAGK;AACP,SAASC,cAAcC,UAAUC,eAAe;AAuGjB,cAenBC,YAfmB;AAjCxB,IAAMC,QAAQL,WAA8B,CAACM,OAAOC,QAAQ;EACjE,MAAM;IACJC;IACAC,WAAWC;IACXC;IACAC;IACAC,UAAU;IACVC;IACAC;IACAC;IACAC;IACAC;IACA,GAAGC;EACL,IAAIb;EAEJ,MAAMG,YAAYD,WAAW,QAAQE,wCAAiB;EAEtD,MAAMU,eAAejB,QACnB,MAAMkB,iBAAiB;IAAER;IAASJ;EAAU,CAAC,GAC7C,CAACI,SAASJ,SAAS,EACrB;EAEA,MAAMa,aAAa,CAAC,CAACN;EACrB,MAAMO,oBAAoB,CAACL,sBAAsB,CAACI;EAElD,MAAME,SAASrB,QAAQ,MAAM;IAC3B,MAAMsB,gBAAgB5B,iBAAiBkB,QAAQ;IAC/C,OAAOQ,oBACHE,gBACAA,cAAcC,IAAI,CAACC,OAAOC,UAAU;MAElC,MAAMC,MAAM,OAAOF,MAAME,QAAQ,cAAcF,MAAME,MAAMD;MAC3D,MAAME,SAASF,QAAQ,MAAMH,cAAcM;MAC3C,MAAMC,eAAe,mBAACC;QAAqBlB;MAAA,GAANc,GAAY;MACjD,MAAMK,SAAShB,qBAAqBc,eAAeL;MAEnD,IAAI,CAACL,YAAY,OAAOY;MAExB,MAAMC,gBAAgBlC,aACpBe,SACA;QACEoB,OAAOhB;MACT,EACF;MAEA,MAAMiB,WAAWP,SAAS,OAAOK;MAEjC,OACE,oBAACjC;QACEa,mBACAsB;MAAA,GAFYR,GAGf;IAEJ,CAAC;EACP,GAAG,CACDb,SACAI,cACAE,YACAC,mBACAL,oBACAH,SACD;EAED,MAAMuB,aAAaxC,GAAG,gBAAgBmB,SAAS;EAE/C,OACE,mBAAClB,OAAOwC,KAAP;IACChC;IACAiC,SAAQ;IACRC,YAAY9B;IACZ+B,gBAAgB9B;IAChB+B,eAAelC;IACfmC,UAAU9B;IACV+B,KAAKvB,aAAa,SAAYT;IAC9BI,WAAWqB;IACV,GAAGnB;IAEHJ;EAAA,EACH;AAEJ,CAAC;AAEDV,MAAMyC,cAAc","names":["getValidChildren","cx","chakra","forwardRef","cloneElement","Fragment","useMemo","jsxs","Stack","props","ref","isInline","direction","directionProp","align","justify","spacing","wrap","children","divider","className","shouldWrapChildren","rest","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","map","child","index","key","isLast","length","wrappedChild","StackItem","_child","clonedDivider","__css","_divider","_className","div","display","alignItems","justifyContent","flexDirection","flexWrap","gap","displayName"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/layout/src/stack/stack.tsx"],"sourcesContent":["import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}