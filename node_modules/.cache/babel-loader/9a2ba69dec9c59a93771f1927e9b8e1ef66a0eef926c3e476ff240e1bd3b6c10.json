{"ast":null,"code":"'use client';\n\nimport { useButtonType } from \"./chunk-J37R6SZE.mjs\";\nimport { useButtonGroup } from \"./chunk-T6ZDZOLO.mjs\";\nimport { ButtonIcon } from \"./chunk-3RENZ2UO.mjs\";\nimport { ButtonSpinner } from \"./chunk-QB2Y5VKH.mjs\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", {\n    ...group,\n    ...props\n  });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = {\n      ...(styles == null ? void 0 : styles[\"_focus\"]),\n      zIndex: 1\n    };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && {\n        _focus\n      })\n    };\n  }, [styles, group]);\n  const {\n    ref: _ref,\n    type: defaultType\n  } = useButtonType(as);\n  const contentProps = {\n    rightIcon,\n    leftIcon,\n    iconSpacing,\n    children\n  };\n  return /* @__PURE__ */jsxs(chakra.button, {\n    ref: useMergeRefs(ref, _ref),\n    as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className),\n    ...rest,\n    disabled: isDisabled || isLoading,\n    children: [isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--start\",\n      label: loadingText,\n      placement: \"start\",\n      spacing: iconSpacing,\n      children: spinner\n    }), isLoading ? loadingText || /* @__PURE__ */jsx(chakra.span, {\n      opacity: 0,\n      children: /* @__PURE__ */jsx(ButtonContent, {\n        ...contentProps\n      })\n    }) : /* @__PURE__ */jsx(ButtonContent, {\n      ...contentProps\n    }), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--end\",\n      label: loadingText,\n      placement: \"end\",\n      spacing: iconSpacing,\n      children: spinner\n    })]\n  });\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const {\n    leftIcon,\n    rightIcon,\n    children,\n    iconSpacing\n  } = props;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [leftIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginEnd: iconSpacing,\n      children: leftIcon\n    }), children, rightIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginStart: iconSpacing,\n      children: rightIcon\n    })]\n  });\n}\nexport { Button };","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,oBAAoB;AAC7B,SACEC,QACAC,YAEAC,kBAGAC,sBACK;AACP,SAASC,IAAIC,gBAAgB;AAE7B,SAASC,eAAe;AAoEpB,SAwDAC,UA5CIC,KAZJC;AAlDG,IAAMC,SAAST,WAAkC,CAACU,OAAOC,QAAQ;EACtE,MAAMC,QAAQC,gBAAe;EAC7B,MAAMC,SAASZ,eAAe,UAAU;IAAE,GAAGU;IAAO,GAAGF;EAAM,CAAC;EAE9D,MAAM;IACJK,aAAaH,+BAAOG;IACpBC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC,cAAc;IACdC;IACAC;IACAC,mBAAmB;IACnBC;IACAC;IACA,GAAGC;EACL,IAAI3B,iBAAiBS,KAAK;EAQ1B,MAAMmB,eAAkCxB,QAAQ,MAAM;IAEpD,MAAMyB,SAAS;MAAE,IAAGhB,iCAAS;MAAWiB,QAAQ;IAAE;IAClD,OAAO;MACLC,SAAS;MACTC,YAAY;MACZC,YAAY;MACZC,gBAAgB;MAChBC,YAAY;MACZC,UAAU;MACVC,YAAY;MACZC,eAAe;MACfC,SAAS;MACT,GAAG1B;MACH,IAAI,CAAC,CAACF,SAAS;QAAEkB;MAAO;IAC1B;EACF,GAAG,CAAChB,QAAQF,KAAK,CAAC;EAElB,MAAM;IAAED,KAAK8B;IAAMlB,MAAMmB;EAAY,IAAIC,cAAchB,EAAE;EAEzD,MAAMiB,eAAe;IAAExB;IAAWD;IAAUG;IAAaJ;EAAS;EAElE,OACE,oBAACnB,OAAO8C,QAAP;IACClC,KAAKb,aAAaa,KAAK8B,IAAI;IAC3Bd;IACAJ,MAAMA,sBAAQmB;IACd,eAAatC,SAASa,QAAQ;IAC9B,gBAAcb,SAASY,SAAS;IAChC8B,OAAOjB;IACPH,WAAWvB,GAAG,iBAAiBuB,SAAS;IACvC,GAAGE;IACJmB,UAAUhC,cAAcC;IAEvBE,wBAAaO,qBAAqB,WACjC,mBAACuB;MACCtB,WAAU;MACVuB,OAAO5B;MACP6B,WAAU;MACVC,SAAS7B;MAERJ;IAAA,EACH,EAGDF,YACCK,eACE,mBAACtB,OAAOqD,MAAP;MAAYC,SAAS;MACpBnC,6BAACoC;QAAe,GAAGV;MAAA,CAAc;IAAA,CACnC,IAGF,mBAACU;MAAe,GAAGV;IAAA,CAAc,GAGlC5B,aAAaS,qBAAqB,SACjC,mBAACuB;MACCtB,WAAU;MACVuB,OAAO5B;MACP6B,WAAU;MACVC,SAAS7B;MAERJ;IAAA,EACH;EAAA,EAEJ;AAEJ,CAAC;AAEDT,OAAO8C,cAAc;AAOrB,SAASD,cAAc5C,OAA2B;EAChD,MAAM;IAAES;IAAUC;IAAWF;IAAUI;EAAY,IAAIZ;EACvD,OACE;IACGQ,uBAAY,mBAACsC;MAAWC,WAAWnC;MAAcJ;IAAA,CAAS,GAC1DA,UACAE,aACC,mBAACoC;MAAWE,aAAapC;MAAcJ;IAAA,CAAU;EAAA,CAErD;AAEJ","names":["useMergeRefs","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","useMemo","Fragment","jsx","jsxs","Button","props","ref","group","useButtonGroup","styles","isDisabled","isLoading","isActive","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","buttonStyles","_focus","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","_ref","defaultType","useButtonType","contentProps","button","__css","disabled","ButtonSpinner","label","placement","spacing","span","opacity","ButtonContent","displayName","ButtonIcon","marginEnd","marginStart"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/button/src/button.tsx"],"sourcesContent":["import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}