{"ast":null,"code":"'use client';\n\nimport { ariaAttr, callAllHandlers, dataAttr } from \"./chunk-DX64QB22.mjs\";\nimport { getIsReversed, getStyles } from \"./chunk-E23N4XEN.mjs\";\n\n// src/use-slider.ts\nimport { usePanEvent } from \"@chakra-ui/react-use-pan-event\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useSize } from \"@chakra-ui/react-use-size\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { clampValue, percentToValue, roundValueToStep, valueToPercent } from \"@chakra-ui/number-utils\";\nimport { useCallback, useMemo, useRef, useId, useState } from \"react\";\nfunction useSlider(props) {\n  var _a;\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props;\n  const onChangeStart = useCallbackRef(onChangeStartProp);\n  const onChangeEnd = useCallbackRef(onChangeEndProp);\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation\n  });\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),\n    onChange\n  });\n  const [isDragging, setDragging] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const isInteractive = !(isDisabled || isReadOnly);\n  const tenSteps = (max - min) / 10;\n  const oneStep = step || (max - min) / 100;\n  const value = clampValue(computedValue, min, max);\n  const reversedValue = max - value + min;\n  const trackValue = isReversed ? reversedValue : value;\n  const thumbPercent = valueToPercent(trackValue, min, max);\n  const isVertical = orientation === \"vertical\";\n  const stateRef = useLatestRef({\n    min,\n    max,\n    step,\n    isDisabled,\n    value,\n    isInteractive,\n    isReversed,\n    isVertical,\n    eventSource: null,\n    focusThumbOnChange,\n    orientation\n  });\n  const trackRef = useRef(null);\n  const thumbRef = useRef(null);\n  const rootRef = useRef(null);\n  const reactId = useId();\n  const uuid = idProp != null ? idProp : reactId;\n  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`];\n  const getValueFromPointer = useCallback(event => {\n    var _a2, _b;\n    if (!trackRef.current) return;\n    const state2 = stateRef.current;\n    state2.eventSource = \"pointer\";\n    const trackRect = trackRef.current.getBoundingClientRect();\n    const {\n      clientX,\n      clientY\n    } = (_b = (_a2 = event.touches) == null ? void 0 : _a2[0]) != null ? _b : event;\n    const diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;\n    const length = isVertical ? trackRect.height : trackRect.width;\n    let percent = diff / length;\n    if (isReversed) {\n      percent = 1 - percent;\n    }\n    let nextValue = percentToValue(percent, state2.min, state2.max);\n    if (state2.step) {\n      nextValue = parseFloat(roundValueToStep(nextValue, state2.min, state2.step));\n    }\n    nextValue = clampValue(nextValue, state2.min, state2.max);\n    return nextValue;\n  }, [isVertical, isReversed, stateRef]);\n  const constrain = useCallback(value2 => {\n    const state2 = stateRef.current;\n    if (!state2.isInteractive) return;\n    value2 = parseFloat(roundValueToStep(value2, state2.min, oneStep));\n    value2 = clampValue(value2, state2.min, state2.max);\n    setValue(value2);\n  }, [oneStep, setValue, stateRef]);\n  const actions = useMemo(() => ({\n    stepUp() {\n      let step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n      const next = isReversed ? value - step2 : value + step2;\n      constrain(next);\n    },\n    stepDown() {\n      let step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n      const next = isReversed ? value + step2 : value - step2;\n      constrain(next);\n    },\n    reset() {\n      constrain(defaultValue || 0);\n    },\n    stepTo(value2) {\n      constrain(value2);\n    }\n  }), [constrain, isReversed, value, oneStep, defaultValue]);\n  const onKeyDown = useCallback(event => {\n    const state2 = stateRef.current;\n    const keyMap = {\n      ArrowRight: () => actions.stepUp(),\n      ArrowUp: () => actions.stepUp(),\n      ArrowLeft: () => actions.stepDown(),\n      ArrowDown: () => actions.stepDown(),\n      PageUp: () => actions.stepUp(tenSteps),\n      PageDown: () => actions.stepDown(tenSteps),\n      Home: () => constrain(state2.min),\n      End: () => constrain(state2.max)\n    };\n    const action = keyMap[event.key];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      state2.eventSource = \"keyboard\";\n    }\n  }, [actions, constrain, tenSteps, stateRef]);\n  const valueText = (_a = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _a : ariaValueText;\n  const thumbSize = useSize(thumbRef);\n  const {\n    getThumbStyle,\n    rootStyle,\n    trackStyle,\n    innerTrackStyle\n  } = useMemo(() => {\n    const state2 = stateRef.current;\n    const thumbRect = thumbSize != null ? thumbSize : {\n      width: 0,\n      height: 0\n    };\n    return getStyles({\n      isReversed,\n      orientation: state2.orientation,\n      thumbRects: [thumbRect],\n      thumbPercents: [thumbPercent]\n    });\n  }, [isReversed, thumbSize, thumbPercent, stateRef]);\n  const focusThumb = useCallback(() => {\n    const state2 = stateRef.current;\n    if (state2.focusThumbOnChange) {\n      setTimeout(() => {\n        var _a2;\n        return (_a2 = thumbRef.current) == null ? void 0 : _a2.focus();\n      });\n    }\n  }, [stateRef]);\n  useUpdateEffect(() => {\n    const state2 = stateRef.current;\n    focusThumb();\n    if (state2.eventSource === \"keyboard\") {\n      onChangeEnd == null ? void 0 : onChangeEnd(state2.value);\n    }\n  }, [value, onChangeEnd]);\n  function setValueFromPointer(event) {\n    const nextValue = getValueFromPointer(event);\n    if (nextValue != null && nextValue !== stateRef.current.value) {\n      setValue(nextValue);\n    }\n  }\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      const state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setDragging(true);\n      focusThumb();\n      setValueFromPointer(event);\n      onChangeStart == null ? void 0 : onChangeStart(state2.value);\n    },\n    onPanSessionEnd() {\n      const state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setDragging(false);\n      onChangeEnd == null ? void 0 : onChangeEnd(state2.value);\n    },\n    onPan(event) {\n      const state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setValueFromPointer(event);\n    }\n  });\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ...htmlProps,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: {\n        ...props2.style,\n        ...rootStyle\n      }\n    };\n  }, [htmlProps, isDisabled, isFocused, rootStyle]);\n  const getTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: {\n        ...props2.style,\n        ...trackStyle\n      }\n    };\n  }, [isDisabled, trackId, trackStyle]);\n  const getInnerTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      style: {\n        ...props2.style,\n        ...innerTrackStyle\n      }\n    };\n  }, [innerTrackStyle]);\n  const getThumbProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : void 0,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? void 0 : ariaLabelledBy,\n      style: {\n        ...props2.style,\n        ...getThumbStyle(0)\n      },\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, () => setFocused(true)),\n      onBlur: callAllHandlers(props2.onBlur, () => setFocused(false))\n    };\n  }, [isInteractive, thumbId, isDragging, valueText, min, max, value, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown]);\n  const getMarkerProps = useCallback(function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const isInRange = !(props2.value < min || props2.value > max);\n    const isHighlighted = value >= props2.value;\n    const markerPercent = valueToPercent(props2.value, min, max);\n    const markerStyle = {\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      ...orient({\n        orientation,\n        vertical: {\n          bottom: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`\n        },\n        horizontal: {\n          left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`\n        }\n      })\n    };\n    return {\n      ...props2,\n      ref,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: {\n        ...props2.style,\n        ...markerStyle\n      }\n    };\n  }, [isDisabled, isReversed, max, min, orientation, value]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref,\n      type: \"hidden\",\n      value,\n      name\n    };\n  }, [name, value]);\n  const state = {\n    value,\n    isFocused,\n    isDragging\n  };\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps\n  };\n}\nfunction orient(options) {\n  const {\n    orientation,\n    vertical,\n    horizontal\n  } = options;\n  return orientation === \"vertical\" ? vertical : horizontal;\n}\nfunction getDefaultValue(min, max) {\n  return max < min ? min : min + (max - min) / 2;\n}\nexport { useSlider };","map":{"version":3,"mappings":"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","names":["usePanEvent","useCallbackRef","useUpdateEffect","useControllableState","useSize","mergeRefs","useLatestRef","clampValue","percentToValue","roundValueToStep","valueToPercent","useCallback","useMemo","useRef","useId","useState","useSlider","props","min","max","onChange","value","valueProp","defaultValue","isReversed","isReversedProp","direction","orientation","id","idProp","isDisabled","isReadOnly","onChangeStart","onChangeStartProp","onChangeEnd","onChangeEndProp","step","getAriaValueText","getAriaValueTextProp","ariaValueText","ariaLabel","ariaLabelledBy","name","focusThumbOnChange","htmlProps","getIsReversed","computedValue","setValue","getDefaultValue","isDragging","setDragging","isFocused","setFocused","isInteractive","tenSteps","oneStep","reversedValue","trackValue","thumbPercent","isVertical","stateRef","eventSource","trackRef","thumbRef","rootRef","reactId","uuid","thumbId","trackId","getValueFromPointer","event","current","state","trackRect","getBoundingClientRect","clientX","clientY","_b","touches","diff","bottom","left","length","height","width","percent","nextValue","parseFloat","constrain","actions","stepUp","next","stepDown","reset","stepTo","onKeyDown","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","key","preventDefault","stopPropagation","valueText","_a","thumbSize","getThumbStyle","rootStyle","trackStyle","innerTrackStyle","thumbRect","getStyles","thumbRects","thumbPercents","focusThumb","setTimeout","focus","setValueFromPointer","onPanSessionStart","onPanSessionEnd","onPan","getRootProps","ref","tabIndex","ariaAttr","dataAttr","style","getTrackProps","getInnerTrackProps","getThumbProps","role","callAllHandlers","onFocus","onBlur","getMarkerProps","isInRange","isHighlighted","markerPercent","markerStyle","position","pointerEvents","orient","vertical","horizontal","getInputProps","type","options"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/slider/src/use-slider.ts"],"sourcesContent":["import { usePanEvent } from \"@chakra-ui/react-use-pan-event\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useSize } from \"@chakra-ui/react-use-size\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\"\nimport type { PropGetter, RequiredPropGetter } from \"@chakra-ui/react-types\"\nimport {\n  clampValue,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/number-utils\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/utils\"\nimport { useCallback, useMemo, useRef, useId, useState } from \"react\"\nimport { getIsReversed, getStyles } from \"./slider-utils\"\n\nexport interface UseSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number\n  /**\n   * Orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * Function called when the user starts selecting a new value (by dragging or clicking)\n   */\n  onChangeStart?(value: number): void\n  /**\n   * Function called when the user is done selecting a new value (by dragging or clicking)\n   */\n  onChangeEnd?(value: number): void\n  /**\n   * Function called whenever the slider value changes  (by dragging or clicking)\n   */\n  onChange?(value: number): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string\n  /**\n   * If `true`, the slider will be disabled\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string\n  /**\n   * The writing mode\n   * @default \"ltr\"\n   */\n  direction?: \"ltr\" | \"rtl\"\n}\n\nexport interface SliderState {\n  value: number\n  isFocused: boolean\n  isDragging: boolean\n}\n\nexport interface SliderActions {\n  stepUp(step?: number): void\n  stepDown(step?: number): void\n  reset(): void\n  stepTo(value: number): void\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slider/\n */\nexport function useSlider(props: UseSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation,\n  })\n\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? getDefaultValue(min, max),\n    onChange,\n  })\n\n  const [isDragging, setDragging] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n  const value = clampValue(computedValue, min, max)\n  const reversedValue = max - value + min\n  const trackValue = isReversed ? reversedValue : value\n  const thumbPercent = valueToPercent(trackValue, min, max)\n\n  const isVertical = orientation === \"vertical\"\n\n  const stateRef = useLatestRef({\n    min,\n    max,\n    step,\n    isDisabled,\n    value,\n    isInteractive,\n    isReversed,\n    isVertical,\n    eventSource: null as \"pointer\" | \"keyboard\" | null,\n    focusThumbOnChange,\n    orientation,\n  })\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<HTMLElement>(null)\n  const thumbRef = useRef<HTMLElement>(null)\n  const rootRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for component parts\n   */\n  const reactId = useId()\n  const uuid = idProp ?? reactId\n  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`]\n\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n  const getValueFromPointer = useCallback(\n    (event: any) => {\n      if (!trackRef.current) return\n\n      const state = stateRef.current\n      state.eventSource = \"pointer\"\n\n      const trackRect = trackRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical\n        ? trackRect.bottom - clientY\n        : clientX - trackRect.left\n\n      const length = isVertical ? trackRect.height : trackRect.width\n      let percent = diff / length\n\n      if (isReversed) {\n        percent = 1 - percent\n      }\n\n      let nextValue = percentToValue(percent, state.min, state.max)\n\n      if (state.step) {\n        nextValue = parseFloat(\n          roundValueToStep(nextValue, state.min, state.step),\n        )\n      }\n\n      nextValue = clampValue(nextValue, state.min, state.max)\n\n      return nextValue\n    },\n    [isVertical, isReversed, stateRef],\n  )\n\n  const constrain = useCallback(\n    (value: number) => {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      value = parseFloat(roundValueToStep(value, state.min, oneStep))\n      value = clampValue(value, state.min, state.max)\n      setValue(value)\n    },\n    [oneStep, setValue, stateRef],\n  )\n\n  const actions: SliderActions = useMemo(\n    () => ({\n      stepUp(step = oneStep) {\n        const next = isReversed ? value - step : value + step\n        constrain(next)\n      },\n      stepDown(step = oneStep) {\n        const next = isReversed ? value + step : value - step\n        constrain(next)\n      },\n      reset() {\n        constrain(defaultValue || 0)\n      },\n      stepTo(value: number) {\n        constrain(value)\n      },\n    }),\n    [constrain, isReversed, value, oneStep, defaultValue],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const state = stateRef.current\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowRight: () => actions.stepUp(),\n        ArrowUp: () => actions.stepUp(),\n        ArrowLeft: () => actions.stepDown(),\n        ArrowDown: () => actions.stepDown(),\n        PageUp: () => actions.stepUp(tenSteps),\n        PageDown: () => actions.stepDown(tenSteps),\n        Home: () => constrain(state.min),\n        End: () => constrain(state.max),\n      }\n\n      const action = keyMap[event.key]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        state.eventSource = \"keyboard\"\n      }\n    },\n    [actions, constrain, tenSteps, stateRef],\n  )\n\n  /**\n   * ARIA (Optional): To define a human-readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n  const valueText = getAriaValueText?.(value) ?? ariaValueText\n\n  /**\n   * Measure the dimensions of the thumb, so\n   * we can center it within the track properly\n   */\n  const thumbSize = useSize(thumbRef)\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } =\n    useMemo(() => {\n      const state = stateRef.current\n\n      const thumbRect = thumbSize ?? { width: 0, height: 0 }\n      return getStyles({\n        isReversed,\n        orientation: state.orientation,\n        thumbRects: [thumbRect],\n        thumbPercents: [thumbPercent],\n      })\n    }, [isReversed, thumbSize, thumbPercent, stateRef])\n\n  const focusThumb = useCallback(() => {\n    const state = stateRef.current\n    if (state.focusThumbOnChange) {\n      setTimeout(() => thumbRef.current?.focus())\n    }\n  }, [stateRef])\n\n  useUpdateEffect(() => {\n    const state = stateRef.current\n    focusThumb()\n    if (state.eventSource === \"keyboard\") {\n      onChangeEnd?.(state.value)\n    }\n  }, [value, onChangeEnd])\n\n  function setValueFromPointer(event: MouseEvent | TouchEvent | PointerEvent) {\n    const nextValue = getValueFromPointer(event)\n    if (nextValue != null && nextValue !== stateRef.current.value) {\n      setValue(nextValue)\n    }\n  }\n\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setDragging(true)\n      focusThumb()\n      setValueFromPointer(event)\n      onChangeStart?.(state.value)\n    },\n    onPanSessionEnd() {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setDragging(false)\n      onChangeEnd?.(state.value)\n    },\n    onPan(event) {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setValueFromPointer(event)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ...htmlProps,\n        ref: mergeRefs(ref, rootRef),\n        tabIndex: -1,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"data-focused\": dataAttr(isFocused),\n        style: {\n          ...props.style,\n          ...rootStyle,\n        },\n      }\n    },\n    [htmlProps, isDisabled, isFocused, rootStyle],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, trackRef),\n        id: trackId,\n        \"data-disabled\": dataAttr(isDisabled),\n        style: {\n          ...props.style,\n          ...trackStyle,\n        },\n      }\n    },\n    [isDisabled, trackId, trackStyle],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        style: {\n          ...props.style,\n          ...innerTrackStyle,\n        },\n      }\n    },\n    [innerTrackStyle],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, thumbRef),\n        role: \"slider\",\n        tabIndex: isInteractive ? 0 : undefined,\n        id: thumbId,\n        \"data-active\": dataAttr(isDragging),\n        \"aria-valuetext\": valueText,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": value,\n        \"aria-orientation\": orientation,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n        style: {\n          ...props.style,\n          ...getThumbStyle(0),\n        },\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, () => setFocused(true)),\n        onBlur: callAllHandlers(props.onBlur, () => setFocused(false)),\n      }\n    },\n    [\n      isInteractive,\n      thumbId,\n      isDragging,\n      valueText,\n      min,\n      max,\n      value,\n      orientation,\n      isDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      getThumbStyle,\n      onKeyDown,\n    ],\n  )\n\n  const getMarkerProps: RequiredPropGetter<{ value: number }> = useCallback(\n    (props, ref = null) => {\n      const isInRange = !(props.value < min || props.value > max)\n      const isHighlighted = value >= props.value\n      const markerPercent = valueToPercent(props.value, min, max)\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation: orientation,\n          vertical: {\n            bottom: isReversed\n              ? `${100 - markerPercent}%`\n              : `${markerPercent}%`,\n          },\n          horizontal: {\n            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`,\n          },\n        }),\n      }\n\n      return {\n        ...props,\n        ref,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        type: \"hidden\",\n        value,\n        name,\n      }\n    },\n    [name, value],\n  )\n\n  const state: SliderState = { value, isFocused, isDragging }\n\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n  }\n}\n\nexport type UseSliderReturn = ReturnType<typeof useSlider>\n\nfunction orient(options: {\n  orientation: UseSliderProps[\"orientation\"]\n  vertical: React.CSSProperties\n  horizontal: React.CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\nfunction getDefaultValue(min: number, max: number) {\n  return max < min ? min : min + (max - min) / 2\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}