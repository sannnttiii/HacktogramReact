{"ast":null,"code":"'use client';\n\nimport { cssVars, getBoxShadow, toTransformOrigin } from \"./chunk-6WT2JRWX.mjs\";\n\n// src/modifiers.ts\nvar matchWidth = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: _ref => {\n    let {\n      state\n    } = _ref;\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  effect: _ref2 => {\n    let {\n      state\n    } = _ref2;\n    return () => {\n      const reference = state.elements.reference;\n      state.elements.popper.style.width = `${reference.offsetWidth}px`;\n    };\n  }\n};\nvar transformOrigin = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: _ref3 => {\n    let {\n      state\n    } = _ref3;\n    setTransformOrigin(state);\n  },\n  effect: _ref4 => {\n    let {\n      state\n    } = _ref4;\n    return () => {\n      setTransformOrigin(state);\n    };\n  }\n};\nvar setTransformOrigin = state => {\n  state.elements.popper.style.setProperty(cssVars.transformOrigin.var, toTransformOrigin(state.placement));\n};\nvar positionArrow = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: _ref5 => {\n    let {\n      state\n    } = _ref5;\n    setArrowStyles(state);\n  }\n};\nvar setArrowStyles = state => {\n  var _a;\n  if (!state.placement) return;\n  const overrides = getArrowStyle(state.placement);\n  if (((_a = state.elements) == null ? void 0 : _a.arrow) && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1\n    });\n    const vars = {\n      [cssVars.arrowSizeHalf.var]: `calc(${cssVars.arrowSize.varRef} / 2 - 1px)`,\n      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`\n    };\n    for (const property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property]);\n    }\n  }\n};\nvar getArrowStyle = placement => {\n  if (placement.startsWith(\"top\")) {\n    return {\n      property: \"bottom\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return {\n      property: \"top\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"left\")) {\n    return {\n      property: \"right\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"right\")) {\n    return {\n      property: \"left\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n};\nvar innerArrow = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: _ref6 => {\n    let {\n      state\n    } = _ref6;\n    setInnerArrowStyles(state);\n  },\n  effect: _ref7 => {\n    let {\n      state\n    } = _ref7;\n    return () => {\n      setInnerArrowStyles(state);\n    };\n  }\n};\nvar setInnerArrowStyles = state => {\n  if (!state.elements.arrow) return;\n  const inner = state.elements.arrow.querySelector(\"[data-popper-arrow-inner]\");\n  if (!inner) return;\n  const boxShadow = getBoxShadow(state.placement);\n  if (boxShadow) {\n    inner.style.setProperty(\"--popper-arrow-default-shadow\", boxShadow);\n  }\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`\n  });\n};\nexport { matchWidth, transformOrigin, positionArrow, innerArrow };","map":{"version":3,"mappings":"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","names":["matchWidth","name","enabled","phase","requires","fn","state","styles","popper","width","rects","reference","effect","elements","style","offsetWidth","transformOrigin","setTransformOrigin","setProperty","cssVars","var","toTransformOrigin","placement","positionArrow","setArrowStyles","overrides","getArrowStyle","_a","arrow","Object","assign","property","value","arrowSize","varRef","height","zIndex","vars","arrowSizeHalf","arrowOffset","startsWith","innerArrow","setInnerArrowStyles","inner","querySelector","boxShadow","getBoxShadow","transform","background","arrowBg","top","left","position"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/popper/src/modifiers.ts"],"sourcesContent":["import { Placement, Modifier, State } from \"@popperjs/core\"\nimport { getBoxShadow, toTransformOrigin, cssVars } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n The match width modifier sets the popper width to match the reference.\n It is useful for custom selects, autocomplete, etc.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const matchWidth: Modifier<\"matchWidth\", any> = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: ({ state }) => {\n    state.styles.popper.width = `${state.rects.reference.width}px`\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      const reference = state.elements.reference as HTMLElement\n      state.elements.popper.style.width = `${reference.offsetWidth}px`\n    },\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The transform origin modifier sets the css `transformOrigin` value of the popper\n  based on the dynamic placement state of the popper.\n  \n  Useful when we need to animate/transition the popper.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const transformOrigin: Modifier<\"transformOrigin\", any> = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: ({ state }) => {\n    setTransformOrigin(state)\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      setTransformOrigin(state)\n    },\n}\n\nconst setTransformOrigin = (state: State) => {\n  state.elements.popper.style.setProperty(\n    cssVars.transformOrigin.var,\n    toTransformOrigin(state.placement),\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`\n  styles generated by popper.js to properly position the arrow\n* -----------------------------------------------------------------------------------------------*/\n\nexport const positionArrow: Modifier<\"positionArrow\", any> = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: ({ state }) => {\n    setArrowStyles(state)\n  },\n}\n\nconst setArrowStyles = (state: Partial<State>) => {\n  if (!state.placement) return\n  const overrides = getArrowStyle(state.placement)\n\n  if (state.elements?.arrow && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1,\n    })\n\n    const vars = {\n      [cssVars.arrowSizeHalf\n        .var]: `calc(${cssVars.arrowSize.varRef} / 2 - 1px)`,\n      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`,\n    }\n\n    for (const property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property])\n    }\n  }\n}\n\nconst getArrowStyle = (placement: Placement) => {\n  if (placement.startsWith(\"top\")) {\n    return { property: \"bottom\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return { property: \"top\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"left\")) {\n    return { property: \"right\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"right\")) {\n    return { property: \"left\", value: cssVars.arrowOffset.varRef }\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The inner arrow modifier, sets the placement styles for the inner arrow that forms\n  the popper arrow tip.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const innerArrow: Modifier<\"innerArrow\", any> = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: ({ state }) => {\n    setInnerArrowStyles(state)\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      setInnerArrowStyles(state)\n    },\n}\n\nconst setInnerArrowStyles = (state: State) => {\n  if (!state.elements.arrow) return\n\n  const inner = state.elements.arrow.querySelector(\n    \"[data-popper-arrow-inner]\",\n  ) as HTMLElement | null\n\n  if (!inner) return\n  const boxShadow = getBoxShadow(state.placement)\n  if (boxShadow) {\n    inner.style.setProperty(\"--popper-arrow-default-shadow\", boxShadow)\n  }\n\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`,\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}