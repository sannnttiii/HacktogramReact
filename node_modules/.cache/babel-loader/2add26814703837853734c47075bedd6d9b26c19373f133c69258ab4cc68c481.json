{"ast":null,"code":"'use client';\n\n// src/use-checkbox.ts\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/use-checkbox.ts\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useCheckbox() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const formControlProps = useFormControlProps(props);\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy\n  } = formControlProps;\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = void 0,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props;\n  const htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  const onChangeProp = useCallbackRef(onChange);\n  const onBlurProp = useCallbackRef(onBlur);\n  const onFocusProp = useCallbackRef(onFocus);\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const [isActive, setActive] = useState(false);\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const inputRef = useRef(null);\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true);\n  const [checkedState, setCheckedState] = useState(!!defaultChecked);\n  const isControlled = checkedProp !== void 0;\n  const isChecked = isControlled ? checkedProp : checkedState;\n  const handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked);\n    };\n    el.form.addEventListener(\"reset\", formResetListener);\n    return () => {\n      var _a;\n      return (_a = el.form) == null ? void 0 : _a.removeEventListener(\"reset\", formResetListener);\n    };\n  }, []);\n  const trulyDisabled = isDisabled && !isFocusable;\n  const onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const onPressDown = event => {\n      if (isFocused) {\n        event.preventDefault();\n      }\n      setActive(true);\n    };\n    return {\n      ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovered(false))\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getIndicatorProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly)\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...htmlProps,\n      ...props2,\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props2.onClick, () => {\n        var _a;\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(() => {\n            var _a2;\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus({\n              preventScroll: true\n            });\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      tabIndex,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(props2.onBlur, onBlurProp, () => setFocused(false)),\n      onFocus: callAllHandlers(props2.onFocus, onFocusProp, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    };\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  const getLabelProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  }, [isChecked, isDisabled, isInvalid]);\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nexport { useCheckbox };","map":{"version":3,"mappings":"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","names":["useFormControlProps","useSafeLayoutEffect","useUpdateEffect","useCallbackRef","mergeRefs","callAllHandlers","dataAttr","omit","object","keysToOmit","clone","Object","assign","key","visuallyHiddenStyle","trackFocusVisible","useCallback","useEffect","useRef","useState","useCheckbox","props","formControlProps","isDisabled","isReadOnly","isRequired","isInvalid","id","onBlur","onFocus","ariaDescribedBy","defaultChecked","isChecked","checkedProp","isFocusable","onChange","isIndeterminate","name","value","tabIndex","ariaLabel","ariaLabelledBy","ariaInvalid","rest","htmlProps","onChangeProp","onBlurProp","onFocusProp","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","el","form","formResetListener","addEventListener","removeEventListener","trulyDisabled","onKeyDown","onKeyUp","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getIndicatorProps","getRootProps","node","tagName","onClick","click","requestAnimationFrame","focus","preventScroll","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","state","stopPropagation"],"sources":["/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/@chakra-ui/checkbox/src/use-checkbox.ts","/Users/santitri1205/Documents/SkillAcademy/BATCH2/react-final-project-hacktogram-v1/node_modules/utilities/object-utils/src/omit.ts"],"sourcesContent":["import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport type { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { CheckboxState, UseCheckboxProps } from \"./checkbox-types\"\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const formControlProps = useFormControlProps(props)\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy,\n  } = formControlProps\n\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props\n\n  const htmlProps = omit(rest, [\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n    \"isInvalid\",\n    \"id\",\n    \"onBlur\",\n    \"onFocus\",\n    \"aria-describedby\",\n  ])\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovered] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const isControlled = checkedProp !== undefined\n  const isChecked = isControlled ? checkedProp : checkedState\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false)\n    }\n  }, [isDisabled, setFocused])\n\n  /**\n   * HTMLFormElement.reset() should reset the checkbox state\n   */\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current\n    if (!el?.form) return\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked)\n    }\n    el.form.addEventListener(\"reset\", formResetListener)\n    return () => el.form?.removeEventListener(\"reset\", formResetListener)\n  }, [])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        if (isFocused) {\n          event.preventDefault()\n        }\n        setActive(true)\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n          setHovered(true),\n        ),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n          setHovered(false),\n        ),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getIndicatorProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          requestAnimationFrame(() => {\n            inputRef.current?.focus({ preventScroll: true })\n          })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        tabIndex,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, () =>\n          setFocused(false),\n        ),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, () =>\n          setFocused(true),\n        ),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n      tabIndex,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  const state: CheckboxState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}